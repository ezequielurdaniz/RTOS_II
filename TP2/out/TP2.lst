
RTOSII/RTOS_II/TP2/out/TP2.elf:     file format elf32-littlearm
RTOSII/RTOS_II/TP2/out/TP2.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000bc5

Program Header:
0x70000001 off    0x00015870 vaddr 0x1a005870 paddr 0x1a005870 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00002e34 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00005878 memsz 0x00005878 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a005878 align 2**16
         filesz 0x00000298 memsz 0x00000298 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000586c  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000298  10000000  1a005878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020298  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020298  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020298  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020298  2**2
                  CONTENTS
  6 .bss          00002b9c  10000298  10000298  00000298  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020298  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020298  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020298  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020298  2**2
                  CONTENTS
 11 .init_array   00000004  1a00586c  1a00586c  0001586c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a005870  1a005870  00015870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020298  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020298  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020298  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020298  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020298  2**2
                  CONTENTS
 18 .noinit       00000000  10002e34  10002e34  00020298  2**2
                  CONTENTS
 19 .debug_info   00036a9e  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 0000682f  00000000  00000000  00056d36  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000c0e8  00000000  00000000  0005d565  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00001130  00000000  00000000  0006964d  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00001270  00000000  00000000  0006a77d  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  00012864  00000000  00000000  0006b9ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   000187f8  00000000  00000000  0007e251  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    000322c9  00000000  00000000  00096a49  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  000c8d12  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000c8d91  2**0
                  CONTENTS, READONLY
 29 .debug_frame  0000330c  00000000  00000000  000c8dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000298 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a00586c l    d  .init_array	00000000 .init_array
1a005870 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002e34 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a0038b4 l     F .text	000000a4 uartProcessIRQ
10002d34 l     O .bss	00000004 rxIsrCallbackUART0
10002d38 l     O .bss	00000004 rxIsrCallbackUART2
10002d3c l     O .bss	00000004 rxIsrCallbackUART3
10002d40 l     O .bss	00000004 txIsrCallbackUART0
10002d44 l     O .bss	00000004 txIsrCallbackUART2
10002d48 l     O .bss	00000004 txIsrCallbackUART3
1a005594 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 Driver.c
00000000 l    df *ABS*	00000000 OA.c
00000000 l    df *ABS*	00000000 crc8.c
1a0052f0 l     O .text	00000010 crc8_small_table
00000000 l    df *ABS*	00000000 ProcessLetters.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 TimersControl.c
00000000 l    df *ABS*	00000000 Callbacks.c
1000029a l     O .bss	00000001 indice.14571
1000029b l     O .bss	00000001 indicerx.14559
1000029c l     O .bss	0000004b lReceivedValue.14570
00000000 l    df *ABS*	00000000 system.c
100002e8 l     O .bss	00000004 heap_end.5781
00000000 l    df *ABS*	00000000 heap_4.c
1a000d18 l     F .text	00000064 prvHeapInit
100002f0 l     O .bss	00002000 ucHeap
1a000d7c l     F .text	00000058 prvInsertBlockIntoFreeList
100002ec l     O .bss	00000004 pxEnd
100022f0 l     O .bss	00000004 xBlockAllocatedBit
100022f4 l     O .bss	00000004 xFreeBytesRemaining
100022f8 l     O .bss	00000004 xMinimumEverFreeBytesRemaining
100022fc l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 queue.c
1a000f60 l     F .text	0000001e prvIsQueueFull
1a000f7e l     F .text	0000001a prvIsQueueEmpty
1a000f98 l     F .text	00000076 prvCopyDataToQueue
1a00100e l     F .text	00000024 prvCopyDataFromQueue
1a001032 l     F .text	0000006e prvUnlockQueue
1a001124 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
10002304 l     O .bss	00000168 uxIdleTaskStack.10728
1000246c l     O .bss	000005a0 uxTimerTaskStack.10735
10002a0c l     O .bss	00000060 xIdleTaskTCB.10727
10002a6c l     O .bss	00000060 xTimerTaskTCB.10734
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a001810 l     F .text	0000002c prvResetNextTaskUnblockTime
1a00183c l     F .text	00000092 prvInitialiseNewTask
1a0018d0 l     F .text	00000068 prvInitialiseTaskLists
1a001938 l     F .text	000000ac prvAddNewTaskToReadyList
1a0019e4 l     F .text	00000038 prvDeleteTCB
1a001a1c l     F .text	0000004c prvCheckTasksWaitingTermination
1a001a68 l     F .text	00000028 prvIdleTask
1a001a90 l     F .text	00000098 prvAddCurrentTaskToDelayedList
10002ad0 l     O .bss	00000004 pxDelayedTaskList
10002ad4 l     O .bss	00000004 pxOverflowDelayedTaskList
10002ad8 l     O .bss	0000008c pxReadyTasksLists
10002b64 l     O .bss	00000004 uxCurrentNumberOfTasks
10002b68 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002b6c l     O .bss	00000004 uxPendedTicks
10002b70 l     O .bss	00000004 uxSchedulerSuspended
10002b74 l     O .bss	00000004 uxTaskNumber
10002b78 l     O .bss	00000004 uxTopReadyPriority
10002b7c l     O .bss	00000014 xDelayedTaskList1
10002b90 l     O .bss	00000014 xDelayedTaskList2
10002ba4 l     O .bss	00000004 xNextTaskUnblockTime
10002ba8 l     O .bss	00000004 xNumOfOverflows
10002bac l     O .bss	00000014 xPendingReadyList
10002bc0 l     O .bss	00000004 xSchedulerRunning
10002bc4 l     O .bss	00000014 xSuspendedTaskList
10002bd8 l     O .bss	00000014 xTasksWaitingTermination
10002bec l     O .bss	00000004 xTickCount
10002bf0 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a0022dc l     F .text	00000020 prvGetNextExpireTime
1a0022fc l     F .text	00000048 prvInsertTimerInActiveList
1a002344 l     F .text	00000070 prvCheckForValidListAndQueue
1a0023b4 l     F .text	00000040 prvInitialiseNewTimer
1a002770 l     F .text	00000016 prvTimerTask
1a0024fc l     F .text	00000078 prvSwitchTimerLists
1a002574 l     F .text	0000002c prvSampleTimeNow
1a0025a0 l     F .text	00000060 prvProcessExpiredTimer
1a002600 l     F .text	00000074 prvProcessTimerOrBlockTask
1a002674 l     F .text	000000fc prvProcessReceivedCommands
10002bf4 l     O .bss	00000004 pxCurrentTimerList
10002bf8 l     O .bss	00000004 pxOverflowTimerList
10002bfc l     O .bss	000000a0 ucStaticTimerQueueStorage.11828
10002c9c l     O .bss	00000014 xActiveTimerList1
10002cb0 l     O .bss	00000014 xActiveTimerList2
10002cc4 l     O .bss	00000004 xLastTime.11777
10002cc8 l     O .bss	00000050 xStaticTimerQueue.11827
10002d18 l     O .bss	00000004 xTimerQueue
10002d1c l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a002788 l     F .text	00000040 prvTaskExitError
1a0027c8 l     F .text	00000022 prvPortStartFirstTask
1a0027f0 l     F .text	0000000e vPortEnableVFP
1a002850 l       .text	00000000 pxCurrentTCBConst2
1a002930 l       .text	00000000 pxCurrentTCBConst
10002d20 l     O .bss	00000001 ucMaxSysCallPriority
10002d24 l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 board.c
1a002b24 l     F .text	00000044 Board_LED_Init
1a002b68 l     F .text	00000040 Board_TEC_Init
1a002ba8 l     F .text	00000040 Board_GPIO_Init
1a002be8 l     F .text	00000030 Board_ADC_Init
1a002c18 l     F .text	00000038 Board_SPI_Init
1a002c50 l     F .text	00000024 Board_I2C_Init
1a005420 l     O .text	00000008 GpioButtons
1a005428 l     O .text	0000000c GpioLeds
1a005434 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a00544c l     O .text	00000004 InitClkStates
1a005450 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a002dc4 l     F .text	0000002c Chip_UART_GetIndex
1a0054c4 l     O .text	00000008 UART_BClock
1a0054cc l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a002f6c l     F .text	00000014 Chip_ADC_GetClockIndex
1a002f80 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a003034 l     F .text	000000a4 pll_calc_divs
1a0030d8 l     F .text	0000010c pll_get_frac
1a0031e4 l     F .text	0000004c Chip_Clock_FindBaseClock
1a003458 l     F .text	00000022 Chip_Clock_GetDivRate
10002d2c l     O .bss	00000008 audio_usb_pll_freq
1a0054e0 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a00554c l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0037ac l     F .text	00000014 Chip_SSP_GetClockIndex
1a0037c0 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000003c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_timer.c
1a003b9e l     F .text	00000002 errorOcurred
1a003ba0 l     F .text	00000002 doNothing
10000040 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a003cac l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002d4c l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a003ffc l     F .text	00000010 clearInterrupt
1a00400c l     F .text	0000005c serveInterrupt
10000080 l     O .data	00000048 ultrasonicSensors
1a0056c4 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a0044e8 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a004c9c l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 impure.c
100000cc l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 
1a005870 l       .init_array	00000000 __init_array_end
1a00586c l       .bss_RAM5	00000000 __preinit_array_end
1a00586c l       .init_array	00000000 __init_array_start
1a00586c l       .bss_RAM5	00000000 __preinit_array_start
1a00327c g     F .text	0000001c Chip_Clock_GetDividerSource
1a000a60 g     F .text	000000bc uartUsbReceiveCallback
10002d58 g     O .bss	00000004 rear
1a000c64 g     F .text	00000012 _isatty_r
1a0048d4 g     F .text	000000b8 _puts_r
1a003c24 g     F .text	00000044 TIMER2_IRQHandler
1a003ab4 g     F .text	00000014 uartRxRead
1a000c76 g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002898 g     F .text	0000002c vPortExitCritical
1a002458 g     F .text	00000038 xTimerCreate
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a0048a4 g     F .text	00000030 printf
1a002d0a g     F .text	00000008 __stdio_init
1a0049f6 g     F .text	00000024 __sseek
1a004568 g     F .text	00000060 __sinit
1a004a34 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a001698 g     F .text	00000052 vQueueWaitForMessageRestricted
1a00453c g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a003026 g     F .text	0000000c Chip_ADC_SetResolution
1a004c9a g     F .text	00000002 __malloc_unlock
1a002934 g     F .text	0000002c SysTick_Handler
1a002e44 g     F .text	00000040 Chip_UART_SetBaud
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a002cac g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a0028d0 g     F .text	00000064 PendSV_Handler
1a0046ec g     F .text	0000001c __locale_ctype_ptr
1a0013a0 g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a005878 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a000300 g     F .text	00000018 ObtenerCantidadCaracteres
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
10002acc g     O .bss	00000004 pxCurrentTCB
1a000c5a g     F .text	0000000a _fstat_r
53ff6cca g       *ABS*	00000000 __valid_user_code_checksum
10002d5c g     O .bss	00000004 TimeToExit
1a005878 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a000818 g     F .text	00000014 BorrarBufferIn
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a002168 g     F .text	00000018 vTaskInternalSetTimeOutState
1a003a74 g     F .text	00000028 uartCallbackClr
1a003c68 g     F .text	00000044 TIMER3_IRQHandler
1a0034fa g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001bc g     F .text	0000000a UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a002998 g     F .text	00000110 xPortStartScheduler
1a00472c g     F .text	00000016 memcpy
1a002074 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a004530 g     F .text	0000000c _cleanup_r
1a002960  w    F .text	00000038 vPortSetupTimerInterrupt
1a00044c g     F .text	00000078 Demonio
1a004088 g     F .text	00000000 .hidden __aeabi_uldivmod
10002e34 g       .noinit	00000000 _noinit
1a00498c g     F .text	00000010 puts
1a000ef0 g     F .text	00000070 vPortFree
1a003b72 g     F .text	00000018 uartWriteString
10002e2c g     O .bss	00000004 SystemCoreClock
1a00090c g     F .text	00000074 EnvioErrorUartdDelim
1a002df0 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a002aa8 g     F .text	0000005c vPortValidateInterruptPriority
1a000180  w    F .text	00000002 UsageFault_Handler
1a003578 g     F .text	0000004c Chip_Clock_GetRate
1a001706 g     F .text	00000018 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a002d4c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0040b8 g     F .text	000002cc .hidden __udivmoddi4
1a000cf8 g     F .text	00000020 _sbrk_r
1a00541c g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000c80 g     F .text	0000004e _read_r
1a001700 g     F .text	00000006 vListInitialiseItem
1a004072 g     F .text	0000000a GPIO1_IRQHandler
1a00146c g     F .text	00000158 xQueueReceive
10002dec g     O .bss	00000040 xQueueRegistry
10002d60 g     O .bss	0000004b memDinIn
1a001794 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a005870 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a00082c g     F .text	00000078 EnvioErrorUartLim
1a005728 g     O .text	00000004 _global_impure_ptr
1a0046a4 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000dd4 g     F .text	0000011c pvPortMalloc
1a002cc8 g     F .text	00000030 Board_Init
1a000c4e  w    F .text	00000002 _init
1a0016ea g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a001d84 g     F .text	0000000c xTaskGetTickCount
1a001224 g     F .text	0000017c xQueueGenericSend
1a004640 g     F .text	00000028 __libc_fini_array
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10002dac g     O .bss	00000004 front
10002e34 g       .bss	00000000 _ebss
1a003ba4 g     F .text	00000040 TIMER0_IRQHandler
1a000bc4 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a0008a4 g     F .text	00000068 EnvioErrorUart
1a003774 g     F .text	00000038 Chip_I2C_SetClockRate
1a00222c g     F .text	000000b0 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a003230 g     F .text	0000004c Chip_Clock_EnableCrystal
1a000b1c g     F .text	000000a8 uartUsbSendCallback
10002db0 g     O .bss	00000001 fsmUARTRXState
1a00078c g     F .text	0000003c TimeToExitCallback
10008000 g       *ABS*	00000000 __top_RamLoc32
1a0020dc g     F .text	0000008c xTaskRemoveFromEventList
1a0017d8  w    F .text	0000001c vApplicationMallocFailedHook
1a00018a g     F .text	0000001e data_init
1a003be4 g     F .text	00000040 TIMER1_IRQHandler
1a0056c8 g     O .text	00000020 __sf_fake_stderr
1a003750 g     F .text	00000024 Chip_I2C_Init
1a001c00 g     F .text	000000e0 vTaskDelete
1a003b8a g     F .text	0000000a UART2_IRQHandler
10002db4 g     O .bss	00000010 Instancia2
1a0033ec g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a000780 g     F .text	0000000a HeartbeatCallback
1a0055dc g     O .text	000000e6 gpioPinsInit
1a003958 g     F .text	00000090 uartInterrupt
1a0017ac  w    F .text	0000002c vAssertCalled
1a003b58 g     F .text	0000001a uartWriteByte
1a0037d8 g     F .text	00000012 Chip_SSP_SetClockRate
1a003f5e g     F .text	00000016 gpioToggle
1a004cca g     F .text	00000024 __sfputs_r
1a00407c g     F .text	0000000a GPIO2_IRQHandler
1a005230 g     F .text	00000000 memchr
1a002180 g     F .text	00000080 xTaskCheckForTimeOut
1a004754 g     F .text	0000009c _free_r
1a0034d4 g     F .text	00000026 Chip_Clock_GetBaseClock
10000298 g       .bss	00000000 _bss
1a002ff4 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0007f8 g     F .text	00000020 VerificaColaLlena
10002d28 g     O .bss	00000004 freeRtosInterruptCallback
1a001d74 g     F .text	00000010 vTaskSuspendAll
1a001d90 g     F .text	00000010 xTaskGetTickCountFromISR
1a0003b0 g     F .text	0000004c uartDriverInit
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a0037ea g     F .text	0000003e Chip_SSP_SetBitRate
1a001752 g     F .text	00000028 uxListRemove
1a00372c g     F .text	00000002 Chip_GPIO_Init
1a005448 g     O .text	00000004 OscRateIn
1a003adc g     F .text	0000007c uartInit
1a001b28 g     F .text	00000072 xTaskCreateStatic
10002e34 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a001fac g     F .text	000000c8 vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a001146 g     F .text	00000090 xQueueGenericCreateStatic
1a0020a4 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a000c50 g     F .text	0000000a _close_r
1a003ce0 g     F .text	000001ac gpioInit
1a00177c g     F .text	00000018 vApplicationGetIdleTaskMemory
10000298 g     O .bss	00000001 CorriendoMayus
1a002490 g     F .text	0000006c xTimerGenericCommand
1a004af4 g     F .text	000000dc __swsetup_r
1a0017f4  w    F .text	0000001c vApplicationStackOverflowHook
1a004384  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0005e8 g     F .text	00000030 crc8_calc
1a0045c8 g     F .text	00000078 __sfp
1a00499c g     F .text	00000022 __sread
10002dc4 g     O .bss	00000004 tempInstMayus
1a003f74 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a004c98 g     F .text	00000002 __malloc_lock
1a002c98 g     F .text	00000014 Board_UARTPutChar
1a00063a g     F .text	00000026 CheckLettersFnc
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a004494 g     F .text	00000054 _fflush_r
1a0056e8 g     O .text	00000020 __sf_fake_stdin
1a003298 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a004742 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000660 g     F .text	00000120 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a00171e g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002830 g     F .text	00000024 SVC_Handler
1a004a1a g     F .text	00000008 __sclose
1a0023f4 g     F .text	00000064 xTimerCreateTimerTask
1a0047f0 g     F .text	000000b4 _malloc_r
1a004ad8 g     F .text	0000001a __ascii_wctomb
1a0007c8 g     F .text	00000030 EliminaBloqueMemoriaDinamica
1a003a9c g     F .text	00000018 uartTxReady
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a003508 g     F .text	0000003c Chip_Clock_EnableOpts
1a002d02 g     F .text	00000008 __stdio_getchar
1a00055c g     F .text	0000008c ActiveObject_Init
1a0015c4 g     F .text	000000aa xQueueReceiveFromISR
1a0011d6 g     F .text	0000004e xQueueGenericCreate
10002dc8 g     O .bss	00000010 Instancia1
1a0032b4 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a00336c g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a003860 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a003e8c g     F .text	0000006a gpioWrite
1a000c4c  w    F .text	00000002 _fini
1a0048a4 g     F .text	00000030 iprintf
1a001eb8 g     F .text	000000f4 xTaskResumeAll
1a001ce0 g     F .text	00000094 vTaskStartScheduler
1a002fb4 g     F .text	00000040 Chip_ADC_Init
10002e30 g     O .bss	00000004 g_pUsbApi
1a002d14 g     F .text	00000038 Board_SetupMuxing
1a002e84 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a000cce g     F .text	00000028 _write_r
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a004f1c g     F .text	000000ea _printf_common
100000c8 g     O .data	00000004 _impure_ptr
1a004388 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a003ac8 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a004708 g     F .text	00000024 __ascii_mbtowc
10000000 g       .data	00000000 _data
1a002200 g     F .text	0000000c vTaskMissedYield
10002e34 g       .bss	00000000 _pvHeapStart
1a000510 g     F .text	0000004c AO_Minus
1a000178 g       .text	00000000 __section_table_end
1a003828 g     F .text	00000038 Chip_SSP_Init
10002dd8 g     O .bss	00000004 TimerHeartbeat
10000299 g     O .bss	00000001 CorriendoMinus
1a001670 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a001da0 g     F .text	00000118 xTaskIncrementTick
1a0004c4 g     F .text	0000004c AO_Mayus
1a000318 g     F .text	00000098 Driver
1a004bd0 g     F .text	00000048 __swhatbuf_r
1a002b04 g     F .text	00000020 DAC_IRQHandler
1a002c74 g     F .text	00000024 Board_Debug_Init
1a002cf8 g     F .text	0000000a __stdio_putchar
1a0010a0 g     F .text	00000084 xQueueGenericReset
10000298 g       .data	00000000 _edata
1a003730 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a001b9a g     F .text	00000066 xTaskCreate
1a0035d8 g     F .text	00000154 Chip_SetupCoreClock
1a0049be g     F .text	00000038 __swrite
1a004068 g     F .text	0000000a GPIO0_IRQHandler
1a004cf0 g     F .text	0000022c _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a004668 g     F .text	0000003c _fwalk_reent
1a0035c4 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0003fc g     F .text	00000050 EnvioMensajeUART
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a000980 g     F .text	000000e0 TimeoutCallback
1a005708 g     O .text	00000020 __sf_fake_stdout
1a00220c g     F .text	00000020 xTaskGetSchedulerState
1a005736 g     O .text	00000101 _ctype_
1a004384  w    F .text	00000002 .hidden __aeabi_idiv0
1a0039e8 g     F .text	0000008c uartCallbackSet
1a00017e  w    F .text	00000002 BusFault_Handler
1a004c18 g     F .text	00000080 __smakebuf_r
10002ddc g     O .bss	00000004 xQueueEnvia
1a004a22 g     F .text	00000010 strlen
1a002804 g     F .text	0000002c pxPortInitialiseStack
1a005008 g     F .text	00000224 _printf_i
1a003544 g     F .text	00000034 Chip_Clock_Enable
1a003b94 g     F .text	0000000a UART3_IRQHandler
10002d54 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
10002de0 g     O .bss	00000004 xQueueRecibe
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a003ef6 g     F .text	00000068 gpioRead
1a003f90 g     F .text	0000006c boardInit
1a002854 g     F .text	00000044 vPortEnterCritical
10002d50 g     O .bss	00000004 __malloc_free_list
10002de4 g     O .bss	00000004 tempInstMinus
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a004cf0 g     F .text	0000022c _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
10002de8 g     O .bss	00000004 TimerTimeout
1000012c g     O .data	0000016c __global_locale
1a00347c g     F .text	00000058 Chip_Clock_SetBaseClock
1a000618 g     F .text	00000022 CalculaCRC8
1a003898 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a002db8 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 c5 0b 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a ca 6c ff 53     }............l.S
	...
1a00002c:	31 28 00 1a 85 01 00 1a 00 00 00 00 d1 28 00 1a     1(...........(..
1a00003c:	35 29 00 1a                                         5)..

1a000040 <g_pfnVendorVectors>:
1a000040:	05 2b 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     .+..............
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	75 3f 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     u?..............
1a000070:	a5 3b 00 1a e5 3b 00 1a 25 3c 00 1a 69 3c 00 1a     .;...;..%<..i<..
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a 8b 3b 00 1a 95 3b 00 1a     .........;...;..
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	69 40 00 1a 73 40 00 1a 7d 40 00 1a bb 01 00 1a     i@..s@..}@......
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a005878 	.word	0x1a005878
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000298 	.word	0x00000298
1a000120:	1a005878 	.word	0x1a005878
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a005878 	.word	0x1a005878
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a005878 	.word	0x1a005878
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a005878 	.word	0x1a005878
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000298 	.word	0x10000298
1a000154:	00002b9c 	.word	0x00002b9c
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ __volatile__("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f003 fb78 	bl	1a0038b4 <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <ObtenerCantidadCaracteres>:
 * @param[in] void
 *
 * @return  char
 */

uint8_t ObtenerCantidadCaracteres(){
1a000300:	b508      	push	{r3, lr}

	// Guardo en indice la cantidad de datos que recibi por el puerto serie
      uint8_t indice;

      indice = strlen(front->datos);
1a000302:	4b04      	ldr	r3, [pc, #16]	; (1a000314 <ObtenerCantidadCaracteres+0x14>)
1a000304:	6818      	ldr	r0, [r3, #0]
1a000306:	f004 fb8c 	bl	1a004a22 <strlen>
1a00030a:	b2c0      	uxtb	r0, r0
      indice--; // acomodo el indice
1a00030c:	3801      	subs	r0, #1

      return indice;
}
1a00030e:	b2c0      	uxtb	r0, r0
1a000310:	bd08      	pop	{r3, pc}
1a000312:	bf00      	nop
1a000314:	10002dac 	.word	0x10002dac

1a000318 <Driver>:
 *
 * @return  void
 */

void Driver( void* pvParameters )
{
1a000318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00031a:	e01a      	b.n	1a000352 <Driver+0x3a>
       // El primer elemento de la cola dinamica es el comando
       ComandoDin=front->datos[0];

       // Acomoda los datos para seleccionar solo los mismos y pisar el comando en la cola de memoria dinamica
       for(int i = 0 ; i < strlen(front->datos); i++){
           front->datos[i] = front->datos[i+1];
1a00031c:	1c6b      	adds	r3, r5, #1
1a00031e:	5ce2      	ldrb	r2, [r4, r3]
1a000320:	5562      	strb	r2, [r4, r5]
       for(int i = 0 ; i < strlen(front->datos); i++){
1a000322:	461d      	mov	r5, r3
1a000324:	4b1f      	ldr	r3, [pc, #124]	; (1a0003a4 <Driver+0x8c>)
1a000326:	681c      	ldr	r4, [r3, #0]
1a000328:	4626      	mov	r6, r4
1a00032a:	4620      	mov	r0, r4
1a00032c:	f004 fb79 	bl	1a004a22 <strlen>
1a000330:	42a8      	cmp	r0, r5
1a000332:	d8f3      	bhi.n	1a00031c <Driver+0x4>
       }

       // Guardo en indice la cantidad de datos que recibi por el puerto serie
       indice=ObtenerCantidadCaracteres();
1a000334:	f7ff ffe4 	bl	1a000300 <ObtenerCantidadCaracteres>

       // Calcular CRC
       // realizo el calculo del CRC para verificar el dato entrante
       crc_temp_rx = crc8_calc(0 , front->datos , indice-1);
1a000338:	1e44      	subs	r4, r0, #1
1a00033a:	4622      	mov	r2, r4
1a00033c:	4631      	mov	r1, r6
1a00033e:	2000      	movs	r0, #0
1a000340:	f000 f952 	bl	1a0005e8 <crc8_calc>

   	   // chequeo que el CRC8 calculado sea igual al CRC8 entrante con los datos por el puerto serie
   	   if(crc_temp_rx == front->datos[indice-1]){
1a000344:	4b17      	ldr	r3, [pc, #92]	; (1a0003a4 <Driver+0x8c>)
1a000346:	681b      	ldr	r3, [r3, #0]
1a000348:	5d1a      	ldrb	r2, [r3, r4]
1a00034a:	4282      	cmp	r2, r0
1a00034c:	d008      	beq.n	1a000360 <Driver+0x48>

   	    }
   	    else
   	    {
   	       // Llego un paquete con mal CRC8, devuelvo error por el puerto
   	    	EnvioErrorUart();
1a00034e:	f000 faa9 	bl	1a0008a4 <EnvioErrorUart>
       while(front==NULL);
1a000352:	4b14      	ldr	r3, [pc, #80]	; (1a0003a4 <Driver+0x8c>)
1a000354:	681b      	ldr	r3, [r3, #0]
1a000356:	2b00      	cmp	r3, #0
1a000358:	d0fb      	beq.n	1a000352 <Driver+0x3a>
       ComandoDin=front->datos[0];
1a00035a:	781f      	ldrb	r7, [r3, #0]
       for(int i = 0 ; i < strlen(front->datos); i++){
1a00035c:	2500      	movs	r5, #0
1a00035e:	e7e1      	b.n	1a000324 <Driver+0xc>
   		   front->datos[indice -1] = '\0';
1a000360:	2200      	movs	r2, #0
1a000362:	551a      	strb	r2, [r3, r4]
   		   EstadoPaquete = CheckLettersFnc(front->datos);
1a000364:	4b0f      	ldr	r3, [pc, #60]	; (1a0003a4 <Driver+0x8c>)
1a000366:	6818      	ldr	r0, [r3, #0]
1a000368:	f000 f967 	bl	1a00063a <CheckLettersFnc>
   		   if(EstadoPaquete == true ){
1a00036c:	2801      	cmp	r0, #1
1a00036e:	d115      	bne.n	1a00039c <Driver+0x84>
             if(ComandoDin=='1'){
1a000370:	2f31      	cmp	r7, #49	; 0x31
1a000372:	d00a      	beq.n	1a00038a <Driver+0x72>
             else if(ComandoDin=='2'){
1a000374:	2f32      	cmp	r7, #50	; 0x32
1a000376:	d1ec      	bne.n	1a000352 <Driver+0x3a>
                 Instancia2.ComandoOA=2;
1a000378:	480b      	ldr	r0, [pc, #44]	; (1a0003a8 <Driver+0x90>)
1a00037a:	2302      	movs	r3, #2
1a00037c:	6083      	str	r3, [r0, #8]
                 Instancia2.datos = front->datos;
1a00037e:	4b09      	ldr	r3, [pc, #36]	; (1a0003a4 <Driver+0x8c>)
1a000380:	681b      	ldr	r3, [r3, #0]
1a000382:	60c3      	str	r3, [r0, #12]
                 resMinus=ActiveObject_Init(&Instancia2);
1a000384:	f000 f8ea 	bl	1a00055c <ActiveObject_Init>
1a000388:	e7e3      	b.n	1a000352 <Driver+0x3a>
   				 Instancia1.ComandoOA=1;
1a00038a:	4808      	ldr	r0, [pc, #32]	; (1a0003ac <Driver+0x94>)
1a00038c:	2301      	movs	r3, #1
1a00038e:	6083      	str	r3, [r0, #8]
   				 Instancia1.datos = front->datos;
1a000390:	4b04      	ldr	r3, [pc, #16]	; (1a0003a4 <Driver+0x8c>)
1a000392:	681b      	ldr	r3, [r3, #0]
1a000394:	60c3      	str	r3, [r0, #12]
   				 resMayus=ActiveObject_Init(&Instancia1);
1a000396:	f000 f8e1 	bl	1a00055c <ActiveObject_Init>
1a00039a:	e7da      	b.n	1a000352 <Driver+0x3a>
   				EnvioErrorUart();
1a00039c:	f000 fa82 	bl	1a0008a4 <EnvioErrorUart>
1a0003a0:	e7d7      	b.n	1a000352 <Driver+0x3a>
1a0003a2:	bf00      	nop
1a0003a4:	10002dac 	.word	0x10002dac
1a0003a8:	10002db4 	.word	0x10002db4
1a0003ac:	10002dc8 	.word	0x10002dc8

1a0003b0 <uartDriverInit>:
 * @param[in] uart
 *
 * @return  NULL
 */

void uartDriverInit(uartMap_t uart) {
1a0003b0:	b510      	push	{r4, lr}
1a0003b2:	4604      	mov	r4, r0

	/* Inicializar la UART_USB junto con las interrupciones de Tx y Rx */
	uartConfig(uart, 115200);
1a0003b4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0003b8:	f003 fb90 	bl	1a003adc <uartInit>
	// Seteo un callback al evento de recepcion y habilito su interrupcion
	uartCallbackSet(uart, UART_RECEIVE, uartUsbReceiveCallback, NULL);
1a0003bc:	2300      	movs	r3, #0
1a0003be:	4a0c      	ldr	r2, [pc, #48]	; (1a0003f0 <uartDriverInit+0x40>)
1a0003c0:	4619      	mov	r1, r3
1a0003c2:	4620      	mov	r0, r4
1a0003c4:	f003 fb10 	bl	1a0039e8 <uartCallbackSet>
	// Seteo un callback al evento de transmisor libre y habilito su interrupcion
	uartCallbackSet(uart, UART_TRANSMITER_FREE, uartUsbSendCallback, NULL);
1a0003c8:	2300      	movs	r3, #0
1a0003ca:	4a0a      	ldr	r2, [pc, #40]	; (1a0003f4 <uartDriverInit+0x44>)
1a0003cc:	2101      	movs	r1, #1
1a0003ce:	4620      	mov	r0, r4
1a0003d0:	f003 fb0a 	bl	1a0039e8 <uartCallbackSet>
	// Habilito todas las interrupciones de UART_USB
	uartInterrupt(uart, true);
1a0003d4:	2101      	movs	r1, #1
1a0003d6:	4620      	mov	r0, r4
1a0003d8:	f003 fabe 	bl	1a003958 <uartInterrupt>
	// Clear el callback para transmision del UART
	uartCallbackClr(uart, UART_TRANSMITER_FREE);
1a0003dc:	2101      	movs	r1, #1
1a0003de:	4620      	mov	r0, r4
1a0003e0:	f003 fb48 	bl	1a003a74 <uartCallbackClr>
	// Mensaje de inicio
	uartWriteString(uart, "Iniciando...\r\n");
1a0003e4:	4904      	ldr	r1, [pc, #16]	; (1a0003f8 <uartDriverInit+0x48>)
1a0003e6:	4620      	mov	r0, r4
1a0003e8:	f003 fbc3 	bl	1a003b72 <uartWriteString>

}
1a0003ec:	bd10      	pop	{r4, pc}
1a0003ee:	bf00      	nop
1a0003f0:	1a000a61 	.word	0x1a000a61
1a0003f4:	1a000b1d 	.word	0x1a000b1d
1a0003f8:	1a0052d0 	.word	0x1a0052d0

1a0003fc <EnvioMensajeUART>:
 *
 * @return  void
 */


void EnvioMensajeUART(char * str, int indice){
1a0003fc:	b570      	push	{r4, r5, r6, lr}
1a0003fe:	b084      	sub	sp, #16
1a000400:	4606      	mov	r6, r0
1a000402:	460d      	mov	r5, r1

	BaseType_t xStatusTX;  // Variable de status de la queue
	char caracter_out;

	for(int i = 0 ; i < indice+1 ; i++){
1a000404:	2400      	movs	r4, #0
1a000406:	e00a      	b.n	1a00041e <EnvioMensajeUART+0x22>
	   caracter_out = str[i];
1a000408:	5d33      	ldrb	r3, [r6, r4]
1a00040a:	a904      	add	r1, sp, #16
1a00040c:	f801 3d01 	strb.w	r3, [r1, #-1]!
	   xStatusTX = xQueueSend( xQueueRecibe, &caracter_out, 0 ); // envio datos por Queue
1a000410:	2300      	movs	r3, #0
1a000412:	461a      	mov	r2, r3
1a000414:	480b      	ldr	r0, [pc, #44]	; (1a000444 <EnvioMensajeUART+0x48>)
1a000416:	6800      	ldr	r0, [r0, #0]
1a000418:	f000 ff04 	bl	1a001224 <xQueueGenericSend>
	for(int i = 0 ; i < indice+1 ; i++){
1a00041c:	3401      	adds	r4, #1
1a00041e:	1c6b      	adds	r3, r5, #1
1a000420:	42a3      	cmp	r3, r4
1a000422:	dcf1      	bgt.n	1a000408 <EnvioMensajeUART+0xc>
	}

	// Inicia el timer de salida
	xTimerStart( TimeToExit , 0 );
1a000424:	4b08      	ldr	r3, [pc, #32]	; (1a000448 <EnvioMensajeUART+0x4c>)
1a000426:	681c      	ldr	r4, [r3, #0]
1a000428:	f001 fcac 	bl	1a001d84 <xTaskGetTickCount>
1a00042c:	2300      	movs	r3, #0
1a00042e:	9300      	str	r3, [sp, #0]
1a000430:	4602      	mov	r2, r0
1a000432:	2101      	movs	r1, #1
1a000434:	4620      	mov	r0, r4
1a000436:	f002 f82b 	bl	1a002490 <xTimerGenericCommand>
	EliminaBloqueMemoriaDinamica();
1a00043a:	f000 f9c5 	bl	1a0007c8 <EliminaBloqueMemoriaDinamica>

}
1a00043e:	b004      	add	sp, #16
1a000440:	bd70      	pop	{r4, r5, r6, pc}
1a000442:	bf00      	nop
1a000444:	10002de0 	.word	0x10002de0
1a000448:	10002d5c 	.word	0x10002d5c

1a00044c <Demonio>:
{
1a00044c:	b500      	push	{lr}
1a00044e:	b083      	sub	sp, #12
1a000450:	e002      	b.n	1a000458 <Demonio+0xc>
	 if( Instancia2.xQueueOA != 0 )
1a000452:	4b1a      	ldr	r3, [pc, #104]	; (1a0004bc <Demonio+0x70>)
1a000454:	6818      	ldr	r0, [r3, #0]
1a000456:	b9d0      	cbnz	r0, 1a00048e <Demonio+0x42>
	 if( Instancia1.xQueueOA != 0 )
1a000458:	4b19      	ldr	r3, [pc, #100]	; (1a0004c0 <Demonio+0x74>)
1a00045a:	6818      	ldr	r0, [r3, #0]
1a00045c:	2800      	cmp	r0, #0
1a00045e:	d0f8      	beq.n	1a000452 <Demonio+0x6>
		 if(xQueueReceive(Instancia1.xQueueOA, &lValueToSend1, 0)){
1a000460:	2200      	movs	r2, #0
1a000462:	a901      	add	r1, sp, #4
1a000464:	f001 f802 	bl	1a00146c <xQueueReceive>
1a000468:	2800      	cmp	r0, #0
1a00046a:	d0f2      	beq.n	1a000452 <Demonio+0x6>
			 lValueToSend1 = CalculaCRC8(lValueToSend1);
1a00046c:	9801      	ldr	r0, [sp, #4]
1a00046e:	f000 f8d3 	bl	1a000618 <CalculaCRC8>
1a000472:	4604      	mov	r4, r0
1a000474:	9001      	str	r0, [sp, #4]
			 EnvioMensajeUART(lValueToSend1, strlen(lValueToSend1));
1a000476:	f004 fad4 	bl	1a004a22 <strlen>
1a00047a:	4601      	mov	r1, r0
1a00047c:	4620      	mov	r0, r4
1a00047e:	f7ff ffbd 	bl	1a0003fc <EnvioMensajeUART>
			 memset(&lValueToSend1[0], 0, sizeof(lValueToSend1));                      // clear the array
1a000482:	2300      	movs	r3, #0
1a000484:	9a01      	ldr	r2, [sp, #4]
1a000486:	6013      	str	r3, [r2, #0]
			 Instancia1.xQueueOA=0;
1a000488:	4a0d      	ldr	r2, [pc, #52]	; (1a0004c0 <Demonio+0x74>)
1a00048a:	6013      	str	r3, [r2, #0]
1a00048c:	e7e1      	b.n	1a000452 <Demonio+0x6>
	 	if(xQueueReceive(Instancia2.xQueueOA, &lValueToSend2, 0)){
1a00048e:	2200      	movs	r2, #0
1a000490:	4669      	mov	r1, sp
1a000492:	f000 ffeb 	bl	1a00146c <xQueueReceive>
1a000496:	2800      	cmp	r0, #0
1a000498:	d0de      	beq.n	1a000458 <Demonio+0xc>
	 		lValueToSend2 = CalculaCRC8(lValueToSend2);
1a00049a:	9800      	ldr	r0, [sp, #0]
1a00049c:	f000 f8bc 	bl	1a000618 <CalculaCRC8>
1a0004a0:	4604      	mov	r4, r0
1a0004a2:	9000      	str	r0, [sp, #0]
	 		EnvioMensajeUART(lValueToSend2, strlen(lValueToSend2));
1a0004a4:	f004 fabd 	bl	1a004a22 <strlen>
1a0004a8:	4601      	mov	r1, r0
1a0004aa:	4620      	mov	r0, r4
1a0004ac:	f7ff ffa6 	bl	1a0003fc <EnvioMensajeUART>
	 		memset(&lValueToSend2[0], 0, sizeof(lValueToSend2));                      // clear the array
1a0004b0:	2300      	movs	r3, #0
1a0004b2:	9a00      	ldr	r2, [sp, #0]
1a0004b4:	6013      	str	r3, [r2, #0]
	 		Instancia2.xQueueOA=0;
1a0004b6:	4a01      	ldr	r2, [pc, #4]	; (1a0004bc <Demonio+0x70>)
1a0004b8:	6013      	str	r3, [r2, #0]
1a0004ba:	e7cd      	b.n	1a000458 <Demonio+0xc>
1a0004bc:	10002db4 	.word	0x10002db4
1a0004c0:	10002dc8 	.word	0x10002dc8

1a0004c4 <AO_Mayus>:
 *
 *  Task para mayusculizar
 *
 */

void AO_Mayus( void* param  ) { 	                        /* Active Object application */
1a0004c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0004c6:	4606      	mov	r6, r0
1a0004c8:	e01d      	b.n	1a000506 <AO_Mayus+0x42>
	BaseType_t xStatusTX;    // Variable de status de la queue

	while(1) {

		 for (int i = 0; obj->datos[i] != '\0'; i++){
		      obj->datos[i] = toupper((char)(obj->datos[i]));
1a0004ca:	68f3      	ldr	r3, [r6, #12]
1a0004cc:	55dc      	strb	r4, [r3, r7]
		 for (int i = 0; obj->datos[i] != '\0'; i++){
1a0004ce:	3501      	adds	r5, #1
1a0004d0:	68f3      	ldr	r3, [r6, #12]
1a0004d2:	462f      	mov	r7, r5
1a0004d4:	5d5c      	ldrb	r4, [r3, r5]
1a0004d6:	b14c      	cbz	r4, 1a0004ec <AO_Mayus+0x28>
		      obj->datos[i] = toupper((char)(obj->datos[i]));
1a0004d8:	f004 f908 	bl	1a0046ec <__locale_ctype_ptr>
1a0004dc:	4420      	add	r0, r4
1a0004de:	7843      	ldrb	r3, [r0, #1]
1a0004e0:	f003 0303 	and.w	r3, r3, #3
1a0004e4:	2b02      	cmp	r3, #2
1a0004e6:	d1f0      	bne.n	1a0004ca <AO_Mayus+0x6>
1a0004e8:	3c20      	subs	r4, #32
1a0004ea:	e7ee      	b.n	1a0004ca <AO_Mayus+0x6>
		 }

		 xStatusTX=xQueueSend(obj->xQueueOA, &obj->datos, 0);
1a0004ec:	4631      	mov	r1, r6
1a0004ee:	f851 0b0c 	ldr.w	r0, [r1], #12
1a0004f2:	2300      	movs	r3, #0
1a0004f4:	461a      	mov	r2, r3
1a0004f6:	f000 fe95 	bl	1a001224 <xQueueGenericSend>
		 CorriendoMayus=false;
1a0004fa:	4b04      	ldr	r3, [pc, #16]	; (1a00050c <AO_Mayus+0x48>)
1a0004fc:	2200      	movs	r2, #0
1a0004fe:	701a      	strb	r2, [r3, #0]
         // llamar a destructor del obj
         vTaskDelete(obj->xHandleOA);
1a000500:	6870      	ldr	r0, [r6, #4]
1a000502:	f001 fb7d 	bl	1a001c00 <vTaskDelete>
		 for (int i = 0; obj->datos[i] != '\0'; i++){
1a000506:	2500      	movs	r5, #0
1a000508:	e7e2      	b.n	1a0004d0 <AO_Mayus+0xc>
1a00050a:	bf00      	nop
1a00050c:	10000298 	.word	0x10000298

1a000510 <AO_Minus>:
 *
 *  Task para mayusculizar
 *
 */

void AO_Minus( void* param  ) { 	                        /* Active Object application */
1a000510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a000512:	4606      	mov	r6, r0
1a000514:	e01d      	b.n	1a000552 <AO_Minus+0x42>
	BaseType_t xStatusTX;    // Variable de status de la queue

	while(1) {

		 for (int i = 0; obj->datos[i] != '\0'; i++){
		      obj->datos[i] = tolower((char)(obj->datos[i]));
1a000516:	68f3      	ldr	r3, [r6, #12]
1a000518:	55dc      	strb	r4, [r3, r7]
		 for (int i = 0; obj->datos[i] != '\0'; i++){
1a00051a:	3501      	adds	r5, #1
1a00051c:	68f3      	ldr	r3, [r6, #12]
1a00051e:	462f      	mov	r7, r5
1a000520:	5d5c      	ldrb	r4, [r3, r5]
1a000522:	b14c      	cbz	r4, 1a000538 <AO_Minus+0x28>
		      obj->datos[i] = tolower((char)(obj->datos[i]));
1a000524:	f004 f8e2 	bl	1a0046ec <__locale_ctype_ptr>
1a000528:	4420      	add	r0, r4
1a00052a:	7843      	ldrb	r3, [r0, #1]
1a00052c:	f003 0303 	and.w	r3, r3, #3
1a000530:	2b01      	cmp	r3, #1
1a000532:	d1f0      	bne.n	1a000516 <AO_Minus+0x6>
1a000534:	3420      	adds	r4, #32
1a000536:	e7ee      	b.n	1a000516 <AO_Minus+0x6>
		 }

		 xStatusTX=xQueueSend(obj->xQueueOA, &obj->datos, 0);
1a000538:	4631      	mov	r1, r6
1a00053a:	f851 0b0c 	ldr.w	r0, [r1], #12
1a00053e:	2300      	movs	r3, #0
1a000540:	461a      	mov	r2, r3
1a000542:	f000 fe6f 	bl	1a001224 <xQueueGenericSend>
		 CorriendoMinus=false;
1a000546:	4b04      	ldr	r3, [pc, #16]	; (1a000558 <AO_Minus+0x48>)
1a000548:	2200      	movs	r2, #0
1a00054a:	701a      	strb	r2, [r3, #0]
         // llamar a destructor del obj
         vTaskDelete(obj->xHandleOA);
1a00054c:	6870      	ldr	r0, [r6, #4]
1a00054e:	f001 fb57 	bl	1a001c00 <vTaskDelete>
		 for (int i = 0; obj->datos[i] != '\0'; i++){
1a000552:	2500      	movs	r5, #0
1a000554:	e7e2      	b.n	1a00051c <AO_Minus+0xc>
1a000556:	bf00      	nop
1a000558:	10000299 	.word	0x10000299

1a00055c <ActiveObject_Init>:
bool_t ActiveObject_Init( Active_Object_t* Obj ) {
1a00055c:	b530      	push	{r4, r5, lr}
1a00055e:	b083      	sub	sp, #12
1a000560:	4605      	mov	r5, r0
	 if(Obj->ComandoOA==1){
1a000562:	6883      	ldr	r3, [r0, #8]
1a000564:	2b01      	cmp	r3, #1
1a000566:	d003      	beq.n	1a000570 <ActiveObject_Init+0x14>
	if(Obj->ComandoOA==2){
1a000568:	2b02      	cmp	r3, #2
1a00056a:	d01a      	beq.n	1a0005a2 <ActiveObject_Init+0x46>
}
1a00056c:	b003      	add	sp, #12
1a00056e:	bd30      	pop	{r4, r5, pc}
		 if(CorriendoMayus == false){
1a000570:	4b18      	ldr	r3, [pc, #96]	; (1a0005d4 <ActiveObject_Init+0x78>)
1a000572:	781b      	ldrb	r3, [r3, #0]
1a000574:	b10b      	cbz	r3, 1a00057a <ActiveObject_Init+0x1e>
			 return false;
1a000576:	2000      	movs	r0, #0
1a000578:	e7f8      	b.n	1a00056c <ActiveObject_Init+0x10>
	  xReturned = xTaskCreate(
1a00057a:	1d03      	adds	r3, r0, #4
1a00057c:	9301      	str	r3, [sp, #4]
1a00057e:	2401      	movs	r4, #1
1a000580:	9400      	str	r4, [sp, #0]
1a000582:	4603      	mov	r3, r0
1a000584:	22b4      	movs	r2, #180	; 0xb4
1a000586:	4914      	ldr	r1, [pc, #80]	; (1a0005d8 <ActiveObject_Init+0x7c>)
1a000588:	4814      	ldr	r0, [pc, #80]	; (1a0005dc <ActiveObject_Init+0x80>)
1a00058a:	f001 fb06 	bl	1a001b9a <xTaskCreate>
		  Obj->xQueueOA = xQueueCreate(1, sizeof( char  *));	/* Creo cola */
1a00058e:	2200      	movs	r2, #0
1a000590:	2104      	movs	r1, #4
1a000592:	4620      	mov	r0, r4
1a000594:	f000 fe1f 	bl	1a0011d6 <xQueueGenericCreate>
1a000598:	6028      	str	r0, [r5, #0]
		  CorriendoMayus=true;
1a00059a:	4b0e      	ldr	r3, [pc, #56]	; (1a0005d4 <ActiveObject_Init+0x78>)
1a00059c:	701c      	strb	r4, [r3, #0]
		  return true;
1a00059e:	4620      	mov	r0, r4
1a0005a0:	e7e4      	b.n	1a00056c <ActiveObject_Init+0x10>
	 	  if(CorriendoMinus == false){
1a0005a2:	4b0f      	ldr	r3, [pc, #60]	; (1a0005e0 <ActiveObject_Init+0x84>)
1a0005a4:	781b      	ldrb	r3, [r3, #0]
1a0005a6:	b10b      	cbz	r3, 1a0005ac <ActiveObject_Init+0x50>
	 		  return false;
1a0005a8:	2000      	movs	r0, #0
1a0005aa:	e7df      	b.n	1a00056c <ActiveObject_Init+0x10>
	 	  xReturned = xTaskCreate(
1a0005ac:	1d03      	adds	r3, r0, #4
1a0005ae:	9301      	str	r3, [sp, #4]
1a0005b0:	2401      	movs	r4, #1
1a0005b2:	9400      	str	r4, [sp, #0]
1a0005b4:	4603      	mov	r3, r0
1a0005b6:	22b4      	movs	r2, #180	; 0xb4
1a0005b8:	4907      	ldr	r1, [pc, #28]	; (1a0005d8 <ActiveObject_Init+0x7c>)
1a0005ba:	480a      	ldr	r0, [pc, #40]	; (1a0005e4 <ActiveObject_Init+0x88>)
1a0005bc:	f001 faed 	bl	1a001b9a <xTaskCreate>
	 		  Obj->xQueueOA = xQueueCreate(1, sizeof( char  *));	/* Creo cola */
1a0005c0:	2200      	movs	r2, #0
1a0005c2:	2104      	movs	r1, #4
1a0005c4:	4620      	mov	r0, r4
1a0005c6:	f000 fe06 	bl	1a0011d6 <xQueueGenericCreate>
1a0005ca:	6028      	str	r0, [r5, #0]
	 		 CorriendoMinus=true;
1a0005cc:	4b04      	ldr	r3, [pc, #16]	; (1a0005e0 <ActiveObject_Init+0x84>)
1a0005ce:	701c      	strb	r4, [r3, #0]
	 		  return true;
1a0005d0:	4620      	mov	r0, r4
1a0005d2:	e7cb      	b.n	1a00056c <ActiveObject_Init+0x10>
1a0005d4:	10000298 	.word	0x10000298
1a0005d8:	1a0052e0 	.word	0x1a0052e0
1a0005dc:	1a0004c5 	.word	0x1a0004c5
1a0005e0:	10000299 	.word	0x10000299
1a0005e4:	1a000511 	.word	0x1a000511

1a0005e8 <crc8_calc>:
 * @return  uint8_t
 */


uint8_t crc8_calc(uint8_t val, void *buf, int cnt)
{
1a0005e8:	b430      	push	{r4, r5}
	int i;
	uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
1a0005ea:	2400      	movs	r4, #0
1a0005ec:	e00d      	b.n	1a00060a <crc8_calc+0x22>
		val ^= p[i];
1a0005ee:	5d0b      	ldrb	r3, [r1, r4]
1a0005f0:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_small_table[val >> 4];
1a0005f2:	0918      	lsrs	r0, r3, #4
1a0005f4:	4d07      	ldr	r5, [pc, #28]	; (1a000614 <crc8_calc+0x2c>)
1a0005f6:	5628      	ldrsb	r0, [r5, r0]
1a0005f8:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
1a0005fc:	b2c0      	uxtb	r0, r0
		val = (val << 4) ^ crc8_small_table[val >> 4];
1a0005fe:	0903      	lsrs	r3, r0, #4
1a000600:	56eb      	ldrsb	r3, [r5, r3]
1a000602:	ea83 1000 	eor.w	r0, r3, r0, lsl #4
1a000606:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
1a000608:	3401      	adds	r4, #1
1a00060a:	4294      	cmp	r4, r2
1a00060c:	dbef      	blt.n	1a0005ee <crc8_calc+0x6>
	}
	return val;
}
1a00060e:	bc30      	pop	{r4, r5}
1a000610:	4770      	bx	lr
1a000612:	bf00      	nop
1a000614:	1a0052f0 	.word	0x1a0052f0

1a000618 <CalculaCRC8>:
 *
 * @return  char*
 */


char* CalculaCRC8(char *str){
1a000618:	b538      	push	{r3, r4, r5, lr}
1a00061a:	4605      	mov	r5, r0

	uint8_t indice;

	uint8_t crc = crc8_calc(0 , str , strlen(str)); // realizo el calculo del CRC8
1a00061c:	f004 fa01 	bl	1a004a22 <strlen>
1a000620:	4604      	mov	r4, r0
1a000622:	4602      	mov	r2, r0
1a000624:	4629      	mov	r1, r5
1a000626:	2000      	movs	r0, #0
1a000628:	f7ff ffde 	bl	1a0005e8 <crc8_calc>
1a00062c:	b2e4      	uxtb	r4, r4

	indice = strlen(str);						    // calcula el largo del str

	str[indice] = crc;   // le agrega el CRC8
1a00062e:	5528      	strb	r0, [r5, r4]
	str[indice+1] = '\0';		    // le agrega el caracter fin de linea
1a000630:	3401      	adds	r4, #1
1a000632:	2300      	movs	r3, #0
1a000634:	552b      	strb	r3, [r5, r4]

	return str;
}
1a000636:	4628      	mov	r0, r5
1a000638:	bd38      	pop	{r3, r4, r5, pc}

1a00063a <CheckLettersFnc>:
 * @param[in] char *
 *
 * @return  bool_t
 */

bool_t CheckLettersFnc(char *str){
1a00063a:	b538      	push	{r3, r4, r5, lr}
1a00063c:	4605      	mov	r5, r0

	 for (int i = 0; str[i] != '\0'; i++){
1a00063e:	2400      	movs	r4, #0
1a000640:	5d2b      	ldrb	r3, [r5, r4]
1a000642:	b14b      	cbz	r3, 1a000658 <CheckLettersFnc+0x1e>
		 if(!isalpha(str[i])){ // verifica si el caracter es alfabetico
1a000644:	f004 f852 	bl	1a0046ec <__locale_ctype_ptr>
1a000648:	5d2b      	ldrb	r3, [r5, r4]
1a00064a:	4418      	add	r0, r3
1a00064c:	7843      	ldrb	r3, [r0, #1]
1a00064e:	f013 0f03 	tst.w	r3, #3
1a000652:	d003      	beq.n	1a00065c <CheckLettersFnc+0x22>
	 for (int i = 0; str[i] != '\0'; i++){
1a000654:	3401      	adds	r4, #1
1a000656:	e7f3      	b.n	1a000640 <CheckLettersFnc+0x6>
			 return false;  // devuelve error si encuentra un caracter no alfabetico
		 }
	 }
	 return true; // Si llega hasta aca, recorrio toda la cadena y encontro caracteres alfabeticos
1a000658:	2001      	movs	r0, #1
}
1a00065a:	bd38      	pop	{r3, r4, r5, pc}
			 return false;  // devuelve error si encuentra un caracter no alfabetico
1a00065c:	2000      	movs	r0, #0
1a00065e:	e7fc      	b.n	1a00065a <CheckLettersFnc+0x20>

1a000660 <main>:
 *
 * @return  int
 */

int main(void)
{
1a000660:	b500      	push	{lr}
1a000662:	b083      	sub	sp, #12
	   // ---------- CONFIGURACIONES ------------------------------
	   // Inicializar y configurar la plataforma
	   boardConfig();
1a000664:	f003 fc94 	bl	1a003f90 <boardInit>

	   // Inicializar UART_USB para conectar a la PC
	   uartDriverInit(UART_USB);
1a000668:	2003      	movs	r0, #3
1a00066a:	f7ff fea1 	bl	1a0003b0 <uartDriverInit>

       // Inicializacion de LEDS de Debug
	   gpioInit( LED_ROJO, GPIO_OUTPUT );
1a00066e:	2101      	movs	r1, #1
1a000670:	202c      	movs	r0, #44	; 0x2c
1a000672:	f003 fb35 	bl	1a003ce0 <gpioInit>
	   gpioInit( LED_AMARILLO, GPIO_OUTPUT );
1a000676:	2101      	movs	r1, #1
1a000678:	202b      	movs	r0, #43	; 0x2b
1a00067a:	f003 fb31 	bl	1a003ce0 <gpioInit>
	   gpioInit( LED_VERDE, GPIO_OUTPUT );
1a00067e:	2101      	movs	r1, #1
1a000680:	202d      	movs	r0, #45	; 0x2d
1a000682:	f003 fb2d 	bl	1a003ce0 <gpioInit>


	   // Creacion del timer "Timeout"
	   TimerTimeout = xTimerCreate ("Timeout in", TIMEOUT_VALIDATION / portTICK_RATE_MS , pdFALSE, (void *) 0 , TimeoutCallback);
1a000686:	4b2e      	ldr	r3, [pc, #184]	; (1a000740 <main+0xe0>)
1a000688:	9300      	str	r3, [sp, #0]
1a00068a:	2300      	movs	r3, #0
1a00068c:	461a      	mov	r2, r3
1a00068e:	2132      	movs	r1, #50	; 0x32
1a000690:	482c      	ldr	r0, [pc, #176]	; (1a000744 <main+0xe4>)
1a000692:	f001 fee1 	bl	1a002458 <xTimerCreate>
1a000696:	4b2c      	ldr	r3, [pc, #176]	; (1a000748 <main+0xe8>)
1a000698:	6018      	str	r0, [r3, #0]

	   // Creacion del timer "TimeToExit"
	   TimeToExit = xTimerCreate ("Time To Exit", TIMEOUT_VALIDATION / portTICK_RATE_MS , pdFALSE, (void *) 1 , TimeToExitCallback);
1a00069a:	4b2c      	ldr	r3, [pc, #176]	; (1a00074c <main+0xec>)
1a00069c:	9300      	str	r3, [sp, #0]
1a00069e:	2301      	movs	r3, #1
1a0006a0:	2200      	movs	r2, #0
1a0006a2:	2132      	movs	r1, #50	; 0x32
1a0006a4:	482a      	ldr	r0, [pc, #168]	; (1a000750 <main+0xf0>)
1a0006a6:	f001 fed7 	bl	1a002458 <xTimerCreate>
1a0006aa:	4b2a      	ldr	r3, [pc, #168]	; (1a000754 <main+0xf4>)
1a0006ac:	6018      	str	r0, [r3, #0]

	   // Creacion del timer "heartbeat"
	   TimerHeartbeat = xTimerCreate ("Timer Heartbeat", 500 / portTICK_RATE_MS , pdTRUE, (void *) 2 , HeartbeatCallback);
1a0006ae:	4b2a      	ldr	r3, [pc, #168]	; (1a000758 <main+0xf8>)
1a0006b0:	9300      	str	r3, [sp, #0]
1a0006b2:	2302      	movs	r3, #2
1a0006b4:	2201      	movs	r2, #1
1a0006b6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
1a0006ba:	4828      	ldr	r0, [pc, #160]	; (1a00075c <main+0xfc>)
1a0006bc:	f001 fecc 	bl	1a002458 <xTimerCreate>
1a0006c0:	4605      	mov	r5, r0
1a0006c2:	4b27      	ldr	r3, [pc, #156]	; (1a000760 <main+0x100>)
1a0006c4:	6018      	str	r0, [r3, #0]
	   xTimerStart( TimerHeartbeat , 0 );
1a0006c6:	f001 fb5d 	bl	1a001d84 <xTaskGetTickCount>
1a0006ca:	2400      	movs	r4, #0
1a0006cc:	9400      	str	r4, [sp, #0]
1a0006ce:	4623      	mov	r3, r4
1a0006d0:	4602      	mov	r2, r0
1a0006d2:	2101      	movs	r1, #1
1a0006d4:	4628      	mov	r0, r5
1a0006d6:	f001 fedb 	bl	1a002490 <xTimerGenericCommand>


	   // Creacion de las colas
	   xQueueEnvia = xQueueCreate( 100,  sizeof( char ) );
1a0006da:	4622      	mov	r2, r4
1a0006dc:	2101      	movs	r1, #1
1a0006de:	2064      	movs	r0, #100	; 0x64
1a0006e0:	f000 fd79 	bl	1a0011d6 <xQueueGenericCreate>
1a0006e4:	4b1f      	ldr	r3, [pc, #124]	; (1a000764 <main+0x104>)
1a0006e6:	6018      	str	r0, [r3, #0]

	   // Error en la creacion de la Queue
	   if( xQueueEnvia == NULL ){
1a0006e8:	b920      	cbnz	r0, 1a0006f4 <main+0x94>
	     /* Error fatal */
	     while(1){
	    	 gpioWrite(LEDR, ON);  // Indica una falla en el sistema
1a0006ea:	2101      	movs	r1, #1
1a0006ec:	2028      	movs	r0, #40	; 0x28
1a0006ee:	f003 fbcd 	bl	1a003e8c <gpioWrite>
1a0006f2:	e7fa      	b.n	1a0006ea <main+0x8a>
		 }

	   }

	  xQueueRecibe = xQueueCreate( 100,  sizeof( char ) );
1a0006f4:	2200      	movs	r2, #0
1a0006f6:	2101      	movs	r1, #1
1a0006f8:	2064      	movs	r0, #100	; 0x64
1a0006fa:	f000 fd6c 	bl	1a0011d6 <xQueueGenericCreate>
1a0006fe:	4b1a      	ldr	r3, [pc, #104]	; (1a000768 <main+0x108>)
1a000700:	6018      	str	r0, [r3, #0]

	   // Error en la creacion de la Queue
	   if( xQueueRecibe == NULL )
1a000702:	b1c0      	cbz	r0, 1a000736 <main+0xd6>

	   /*
	    *  Inicializacion de variables del sistema
	    */

	 fsmUARTRXState = StandBy;    // inicia la maquina de estados con la recepcion en standby
1a000704:	2400      	movs	r4, #0
1a000706:	4b19      	ldr	r3, [pc, #100]	; (1a00076c <main+0x10c>)
1a000708:	701c      	strb	r4, [r3, #0]

   // Create a task in freeRTOS with dynamic memory

   xTaskCreate(
1a00070a:	9401      	str	r4, [sp, #4]
1a00070c:	2501      	movs	r5, #1
1a00070e:	9500      	str	r5, [sp, #0]
1a000710:	4623      	mov	r3, r4
1a000712:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
1a000716:	4916      	ldr	r1, [pc, #88]	; (1a000770 <main+0x110>)
1a000718:	4816      	ldr	r0, [pc, #88]	; (1a000774 <main+0x114>)
1a00071a:	f001 fa3e 	bl	1a001b9a <xTaskCreate>
      0                           // Puntero a la tarea creada en el sistema
   );

   // Create a task in freeRTOS with dynamic memory

    xTaskCreate(
1a00071e:	9401      	str	r4, [sp, #4]
1a000720:	9500      	str	r5, [sp, #0]
1a000722:	4623      	mov	r3, r4
1a000724:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
1a000728:	4913      	ldr	r1, [pc, #76]	; (1a000778 <main+0x118>)
1a00072a:	4814      	ldr	r0, [pc, #80]	; (1a00077c <main+0x11c>)
1a00072c:	f001 fa35 	bl	1a001b9a <xTaskCreate>

   /*
    *  Inicializacion del scheduler
    */

   vTaskStartScheduler();
1a000730:	f001 fad6 	bl	1a001ce0 <vTaskStartScheduler>
1a000734:	e7fe      	b.n	1a000734 <main+0xd4>
			 gpioWrite(LEDR, ON);   // Indica una falla en el sistema
1a000736:	2101      	movs	r1, #1
1a000738:	2028      	movs	r0, #40	; 0x28
1a00073a:	f003 fba7 	bl	1a003e8c <gpioWrite>
1a00073e:	e7fa      	b.n	1a000736 <main+0xd6>
1a000740:	1a000981 	.word	0x1a000981
1a000744:	1a005300 	.word	0x1a005300
1a000748:	10002de8 	.word	0x10002de8
1a00074c:	1a00078d 	.word	0x1a00078d
1a000750:	1a00530c 	.word	0x1a00530c
1a000754:	10002d5c 	.word	0x10002d5c
1a000758:	1a000781 	.word	0x1a000781
1a00075c:	1a00531c 	.word	0x1a00531c
1a000760:	10002dd8 	.word	0x10002dd8
1a000764:	10002ddc 	.word	0x10002ddc
1a000768:	10002de0 	.word	0x10002de0
1a00076c:	10002db0 	.word	0x10002db0
1a000770:	1a00532c 	.word	0x1a00532c
1a000774:	1a000319 	.word	0x1a000319
1a000778:	1a005334 	.word	0x1a005334
1a00077c:	1a00044d 	.word	0x1a00044d

1a000780 <HeartbeatCallback>:
 * @param[in] TimerHandle_t
 *
 * @return  void
 */

void HeartbeatCallback(TimerHandle_t xTimer){
1a000780:	b508      	push	{r3, lr}
	gpioToggle(LEDB);
1a000782:	202a      	movs	r0, #42	; 0x2a
1a000784:	f003 fbeb 	bl	1a003f5e <gpioToggle>
}
1a000788:	bd08      	pop	{r3, pc}
1a00078a:	Address 0x000000001a00078a is out of bounds.


1a00078c <TimeToExitCallback>:
 * @param[in] TimerHandle_t
 *
 * @return  void
 */

void TimeToExitCallback(TimerHandle_t xTimer){
1a00078c:	b530      	push	{r4, r5, lr}
1a00078e:	b083      	sub	sp, #12
    if(xTimer == TimeToExit){
1a000790:	4b0c      	ldr	r3, [pc, #48]	; (1a0007c4 <TimeToExitCallback+0x38>)
1a000792:	681c      	ldr	r4, [r3, #0]
1a000794:	4284      	cmp	r4, r0
1a000796:	d001      	beq.n	1a00079c <TimeToExitCallback+0x10>
	    xTimerStop( TimeToExit , 0 ); // detiene el timer
	    xTimerReset( TimeToExit , 0 );
    }
}
1a000798:	b003      	add	sp, #12
1a00079a:	bd30      	pop	{r4, r5, pc}
	    xTimerStop( TimeToExit , 0 ); // detiene el timer
1a00079c:	2500      	movs	r5, #0
1a00079e:	9500      	str	r5, [sp, #0]
1a0007a0:	462b      	mov	r3, r5
1a0007a2:	462a      	mov	r2, r5
1a0007a4:	2103      	movs	r1, #3
1a0007a6:	4620      	mov	r0, r4
1a0007a8:	f001 fe72 	bl	1a002490 <xTimerGenericCommand>
	    xTimerReset( TimeToExit , 0 );
1a0007ac:	4b05      	ldr	r3, [pc, #20]	; (1a0007c4 <TimeToExitCallback+0x38>)
1a0007ae:	681c      	ldr	r4, [r3, #0]
1a0007b0:	f001 fae8 	bl	1a001d84 <xTaskGetTickCount>
1a0007b4:	9500      	str	r5, [sp, #0]
1a0007b6:	462b      	mov	r3, r5
1a0007b8:	4602      	mov	r2, r0
1a0007ba:	2102      	movs	r1, #2
1a0007bc:	4620      	mov	r0, r4
1a0007be:	f001 fe67 	bl	1a002490 <xTimerGenericCommand>
}
1a0007c2:	e7e9      	b.n	1a000798 <TimeToExitCallback+0xc>
1a0007c4:	10002d5c 	.word	0x10002d5c

1a0007c8 <EliminaBloqueMemoriaDinamica>:
 * @param[in] void
 *
 * @return  void
 */

void EliminaBloqueMemoriaDinamica(){
1a0007c8:	b510      	push	{r4, lr}

	struct node *temp;
	// borro la memoria dinamica
	// Problema resuelto : se borro el bloque de memoria para no dejar basura en la proxima
	// transaccion
	uartCallbackSet(UART_USB, UART_TRANSMITER_FREE, uartUsbSendCallback, NULL);
1a0007ca:	2300      	movs	r3, #0
1a0007cc:	4a08      	ldr	r2, [pc, #32]	; (1a0007f0 <EliminaBloqueMemoriaDinamica+0x28>)
1a0007ce:	2101      	movs	r1, #1
1a0007d0:	2003      	movs	r0, #3
1a0007d2:	f003 f909 	bl	1a0039e8 <uartCallbackSet>


	memset(&front->datos[0], 0, sizeof(front->datos));                     // clear the array
1a0007d6:	4c07      	ldr	r4, [pc, #28]	; (1a0007f4 <EliminaBloqueMemoriaDinamica+0x2c>)
1a0007d8:	224b      	movs	r2, #75	; 0x4b
1a0007da:	2100      	movs	r1, #0
1a0007dc:	6820      	ldr	r0, [r4, #0]
1a0007de:	f003 ffb0 	bl	1a004742 <memset>
	temp = front;
1a0007e2:	6820      	ldr	r0, [r4, #0]
	front = front->link;
1a0007e4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a0007e6:	6023      	str	r3, [r4, #0]
	vPortFree(temp);
1a0007e8:	f000 fb82 	bl	1a000ef0 <vPortFree>
	vPortFree(tempInstMayus);*/




}
1a0007ec:	bd10      	pop	{r4, pc}
1a0007ee:	bf00      	nop
1a0007f0:	1a000b1d 	.word	0x1a000b1d
1a0007f4:	10002dac 	.word	0x10002dac

1a0007f8 <VerificaColaLlena>:
bool_t VerificaColaLlena(){

	 struct node *temporal;
	 int cnt;
	 // Verificar el tamaño de la cola que no sea mas grande que el maximo permitido : ELEMENTOS_MEMORIA
	 temporal = front;
1a0007f8:	4b06      	ldr	r3, [pc, #24]	; (1a000814 <VerificaColaLlena+0x1c>)
1a0007fa:	681b      	ldr	r3, [r3, #0]

	 cnt = 0;
1a0007fc:	2200      	movs	r2, #0

	 while (temporal){
1a0007fe:	e001      	b.n	1a000804 <VerificaColaLlena+0xc>
		temporal = temporal->link;
1a000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
		cnt++;
1a000802:	3201      	adds	r2, #1
	 while (temporal){
1a000804:	2b00      	cmp	r3, #0
1a000806:	d1fb      	bne.n	1a000800 <VerificaColaLlena+0x8>
	 }

	 if(cnt == ELEMENTOS_MEMORIA){
1a000808:	2a04      	cmp	r2, #4
1a00080a:	d001      	beq.n	1a000810 <VerificaColaLlena+0x18>
         return TRUE;
	  }

	  return FALSE;
1a00080c:	2000      	movs	r0, #0
}
1a00080e:	4770      	bx	lr
         return TRUE;
1a000810:	2001      	movs	r0, #1
1a000812:	4770      	bx	lr
1a000814:	10002dac 	.word	0x10002dac

1a000818 <BorrarBufferIn>:
 * @param[in] void
 *
 * @return  void
 */

void BorrarBufferIn(){
1a000818:	b508      	push	{r3, lr}
	memset(&memDinIn[0], 0, sizeof(memDinIn));
1a00081a:	224b      	movs	r2, #75	; 0x4b
1a00081c:	2100      	movs	r1, #0
1a00081e:	4802      	ldr	r0, [pc, #8]	; (1a000828 <BorrarBufferIn+0x10>)
1a000820:	f003 ff8f 	bl	1a004742 <memset>
}
1a000824:	bd08      	pop	{r3, pc}
1a000826:	bf00      	nop
1a000828:	10002d60 	.word	0x10002d60

1a00082c <EnvioErrorUartLim>:
 * @param[in] void
 *
 * @return  void
 */

void EnvioErrorUartLim(){
1a00082c:	b530      	push	{r4, r5, lr}
1a00082e:	b087      	sub	sp, #28

	BaseType_t xStatusTX;    // Variable de status de la queue
	char Error[] = "ERROR "; // Mensaje de error para el envio por la queue
1a000830:	4b18      	ldr	r3, [pc, #96]	; (1a000894 <EnvioErrorUartLim+0x68>)
1a000832:	e893 0003 	ldmia.w	r3, {r0, r1}
1a000836:	9004      	str	r0, [sp, #16]
1a000838:	f8ad 1014 	strh.w	r1, [sp, #20]
1a00083c:	0c09      	lsrs	r1, r1, #16
1a00083e:	f88d 1016 	strb.w	r1, [sp, #22]
	char caracter_out;

	Error[5] = '\0';
1a000842:	2400      	movs	r4, #0
1a000844:	f88d 4015 	strb.w	r4, [sp, #21]
	for(int j = 0 ; j < 6; j++){
1a000848:	e00d      	b.n	1a000866 <EnvioErrorUartLim+0x3a>
	   	  caracter_out = Error[j];
1a00084a:	ab06      	add	r3, sp, #24
1a00084c:	4423      	add	r3, r4
1a00084e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
1a000852:	a906      	add	r1, sp, #24
1a000854:	f801 3d09 	strb.w	r3, [r1, #-9]!
	   	  xStatusTX = xQueueSend( xQueueRecibe, &caracter_out, 0 );
1a000858:	2300      	movs	r3, #0
1a00085a:	461a      	mov	r2, r3
1a00085c:	480e      	ldr	r0, [pc, #56]	; (1a000898 <EnvioErrorUartLim+0x6c>)
1a00085e:	6800      	ldr	r0, [r0, #0]
1a000860:	f000 fce0 	bl	1a001224 <xQueueGenericSend>
	for(int j = 0 ; j < 6; j++){
1a000864:	3401      	adds	r4, #1
1a000866:	2c05      	cmp	r4, #5
1a000868:	ddef      	ble.n	1a00084a <EnvioErrorUartLim+0x1e>
	}
	// Inicia el timer de salida
	xTimerStart( TimeToExit , 0 );
1a00086a:	4b0c      	ldr	r3, [pc, #48]	; (1a00089c <EnvioErrorUartLim+0x70>)
1a00086c:	681d      	ldr	r5, [r3, #0]
1a00086e:	f001 fa89 	bl	1a001d84 <xTaskGetTickCount>
1a000872:	2400      	movs	r4, #0
1a000874:	9400      	str	r4, [sp, #0]
1a000876:	4623      	mov	r3, r4
1a000878:	4602      	mov	r2, r0
1a00087a:	2101      	movs	r1, #1
1a00087c:	4628      	mov	r0, r5
1a00087e:	f001 fe07 	bl	1a002490 <xTimerGenericCommand>
	uartCallbackSet(UART_USB, UART_TRANSMITER_FREE, uartUsbSendCallback, NULL);
1a000882:	4623      	mov	r3, r4
1a000884:	4a06      	ldr	r2, [pc, #24]	; (1a0008a0 <EnvioErrorUartLim+0x74>)
1a000886:	2101      	movs	r1, #1
1a000888:	2003      	movs	r0, #3
1a00088a:	f003 f8ad 	bl	1a0039e8 <uartCallbackSet>
}
1a00088e:	b007      	add	sp, #28
1a000890:	bd30      	pop	{r4, r5, pc}
1a000892:	bf00      	nop
1a000894:	1a00533c 	.word	0x1a00533c
1a000898:	10002de0 	.word	0x10002de0
1a00089c:	10002d5c 	.word	0x10002d5c
1a0008a0:	1a000b1d 	.word	0x1a000b1d

1a0008a4 <EnvioErrorUart>:
 * @param[in] void
 *
 * @return  void
 */

void EnvioErrorUart(){
1a0008a4:	b510      	push	{r4, lr}
1a0008a6:	b086      	sub	sp, #24

	BaseType_t xStatusTX;    // Variable de status de la queue
	char Error[] = "ERROR "; // Mensaje de error para el envio por la queue
1a0008a8:	4b15      	ldr	r3, [pc, #84]	; (1a000900 <EnvioErrorUart+0x5c>)
1a0008aa:	e893 0003 	ldmia.w	r3, {r0, r1}
1a0008ae:	9004      	str	r0, [sp, #16]
1a0008b0:	f8ad 1014 	strh.w	r1, [sp, #20]
1a0008b4:	0c09      	lsrs	r1, r1, #16
1a0008b6:	f88d 1016 	strb.w	r1, [sp, #22]
	char caracter_out;

	Error[5] = '\0';
1a0008ba:	2400      	movs	r4, #0
1a0008bc:	f88d 4015 	strb.w	r4, [sp, #21]
	for(int j = 0 ; j < 6; j++){
1a0008c0:	e00d      	b.n	1a0008de <EnvioErrorUart+0x3a>
	   	  caracter_out = Error[j];
1a0008c2:	ab06      	add	r3, sp, #24
1a0008c4:	4423      	add	r3, r4
1a0008c6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
1a0008ca:	a906      	add	r1, sp, #24
1a0008cc:	f801 3d09 	strb.w	r3, [r1, #-9]!
	   	  xStatusTX = xQueueSend( xQueueRecibe, &caracter_out, 0 );
1a0008d0:	2300      	movs	r3, #0
1a0008d2:	461a      	mov	r2, r3
1a0008d4:	480b      	ldr	r0, [pc, #44]	; (1a000904 <EnvioErrorUart+0x60>)
1a0008d6:	6800      	ldr	r0, [r0, #0]
1a0008d8:	f000 fca4 	bl	1a001224 <xQueueGenericSend>
	for(int j = 0 ; j < 6; j++){
1a0008dc:	3401      	adds	r4, #1
1a0008de:	2c05      	cmp	r4, #5
1a0008e0:	ddef      	ble.n	1a0008c2 <EnvioErrorUart+0x1e>
	}
	// Inicia el timer de salida
	xTimerStart( TimeToExit , 0 );
1a0008e2:	4b09      	ldr	r3, [pc, #36]	; (1a000908 <EnvioErrorUart+0x64>)
1a0008e4:	681c      	ldr	r4, [r3, #0]
1a0008e6:	f001 fa4d 	bl	1a001d84 <xTaskGetTickCount>
1a0008ea:	2300      	movs	r3, #0
1a0008ec:	9300      	str	r3, [sp, #0]
1a0008ee:	4602      	mov	r2, r0
1a0008f0:	2101      	movs	r1, #1
1a0008f2:	4620      	mov	r0, r4
1a0008f4:	f001 fdcc 	bl	1a002490 <xTimerGenericCommand>
	EliminaBloqueMemoriaDinamica();
1a0008f8:	f7ff ff66 	bl	1a0007c8 <EliminaBloqueMemoriaDinamica>
}
1a0008fc:	b006      	add	sp, #24
1a0008fe:	bd10      	pop	{r4, pc}
1a000900:	1a00533c 	.word	0x1a00533c
1a000904:	10002de0 	.word	0x10002de0
1a000908:	10002d5c 	.word	0x10002d5c

1a00090c <EnvioErrorUartdDelim>:
 * @param[in] void
 *
 * @return  void
 */

void EnvioErrorUartdDelim(){
1a00090c:	b530      	push	{r4, r5, lr}
1a00090e:	b087      	sub	sp, #28

	BaseType_t xStatusTX;    // Variable de status de la queue
	char Error[] = "ERROR LIM "; // Mensaje de error para el envio por la queue
1a000910:	4a17      	ldr	r2, [pc, #92]	; (1a000970 <EnvioErrorUartdDelim+0x64>)
1a000912:	ab03      	add	r3, sp, #12
1a000914:	ca07      	ldmia	r2, {r0, r1, r2}
1a000916:	c303      	stmia	r3!, {r0, r1}
1a000918:	f823 2b02 	strh.w	r2, [r3], #2
1a00091c:	0c12      	lsrs	r2, r2, #16
1a00091e:	701a      	strb	r2, [r3, #0]
	char caracter_out;

	Error[9] = '\0';
1a000920:	2400      	movs	r4, #0
1a000922:	f88d 4015 	strb.w	r4, [sp, #21]
	for(int j = 0 ; j < 10; j++){
1a000926:	e00d      	b.n	1a000944 <EnvioErrorUartdDelim+0x38>
	   	  caracter_out = Error[j];
1a000928:	ab06      	add	r3, sp, #24
1a00092a:	4423      	add	r3, r4
1a00092c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
1a000930:	a906      	add	r1, sp, #24
1a000932:	f801 3d0d 	strb.w	r3, [r1, #-13]!
	   	  xStatusTX = xQueueSend( xQueueRecibe, &caracter_out, 0 );
1a000936:	2300      	movs	r3, #0
1a000938:	461a      	mov	r2, r3
1a00093a:	480e      	ldr	r0, [pc, #56]	; (1a000974 <EnvioErrorUartdDelim+0x68>)
1a00093c:	6800      	ldr	r0, [r0, #0]
1a00093e:	f000 fc71 	bl	1a001224 <xQueueGenericSend>
	for(int j = 0 ; j < 10; j++){
1a000942:	3401      	adds	r4, #1
1a000944:	2c09      	cmp	r4, #9
1a000946:	ddef      	ble.n	1a000928 <EnvioErrorUartdDelim+0x1c>
	}
	// Inicia el timer de salida
	xTimerStart( TimeToExit , 0 );
1a000948:	4b0b      	ldr	r3, [pc, #44]	; (1a000978 <EnvioErrorUartdDelim+0x6c>)
1a00094a:	681d      	ldr	r5, [r3, #0]
1a00094c:	f001 fa1a 	bl	1a001d84 <xTaskGetTickCount>
1a000950:	2400      	movs	r4, #0
1a000952:	9400      	str	r4, [sp, #0]
1a000954:	4623      	mov	r3, r4
1a000956:	4602      	mov	r2, r0
1a000958:	2101      	movs	r1, #1
1a00095a:	4628      	mov	r0, r5
1a00095c:	f001 fd98 	bl	1a002490 <xTimerGenericCommand>
	uartCallbackSet(UART_USB, UART_TRANSMITER_FREE, uartUsbSendCallback, NULL);
1a000960:	4623      	mov	r3, r4
1a000962:	4a06      	ldr	r2, [pc, #24]	; (1a00097c <EnvioErrorUartdDelim+0x70>)
1a000964:	2101      	movs	r1, #1
1a000966:	2003      	movs	r0, #3
1a000968:	f003 f83e 	bl	1a0039e8 <uartCallbackSet>
}
1a00096c:	b007      	add	sp, #28
1a00096e:	bd30      	pop	{r4, r5, pc}
1a000970:	1a005344 	.word	0x1a005344
1a000974:	10002de0 	.word	0x10002de0
1a000978:	10002d5c 	.word	0x10002d5c
1a00097c:	1a000b1d 	.word	0x1a000b1d

1a000980 <TimeoutCallback>:
void TimeoutCallback(TimerHandle_t xTimer){
1a000980:	b530      	push	{r4, r5, lr}
1a000982:	b083      	sub	sp, #12
  if(xTimer == TimerTimeout){
1a000984:	4b31      	ldr	r3, [pc, #196]	; (1a000a4c <TimeoutCallback+0xcc>)
1a000986:	681c      	ldr	r4, [r3, #0]
1a000988:	4284      	cmp	r4, r0
1a00098a:	d001      	beq.n	1a000990 <TimeoutCallback+0x10>
}
1a00098c:	b003      	add	sp, #12
1a00098e:	bd30      	pop	{r4, r5, pc}
	 if( xTimerStop( TimerTimeout, 0) != pdPASS )
1a000990:	2200      	movs	r2, #0
1a000992:	9200      	str	r2, [sp, #0]
1a000994:	4613      	mov	r3, r2
1a000996:	2103      	movs	r1, #3
1a000998:	4620      	mov	r0, r4
1a00099a:	f001 fd79 	bl	1a002490 <xTimerGenericCommand>
1a00099e:	2801      	cmp	r0, #1
1a0009a0:	d11b      	bne.n	1a0009da <TimeoutCallback+0x5a>
	 if(fsmUARTRXState==ErrorLimite){
1a0009a2:	4b2b      	ldr	r3, [pc, #172]	; (1a000a50 <TimeoutCallback+0xd0>)
1a0009a4:	781b      	ldrb	r3, [r3, #0]
1a0009a6:	2b02      	cmp	r3, #2
1a0009a8:	d01b      	beq.n	1a0009e2 <TimeoutCallback+0x62>
	 fsmUARTRXState = StandBy;
1a0009aa:	4b29      	ldr	r3, [pc, #164]	; (1a000a50 <TimeoutCallback+0xd0>)
1a0009ac:	2200      	movs	r2, #0
1a0009ae:	701a      	strb	r2, [r3, #0]
	 ColaLlena=VerificaColaLlena();
1a0009b0:	f7ff ff22 	bl	1a0007f8 <VerificaColaLlena>
     if(ColaLlena==TRUE){
1a0009b4:	2801      	cmp	r0, #1
1a0009b6:	d01c      	beq.n	1a0009f2 <TimeoutCallback+0x72>
     indice = strlen(memDinIn);
1a0009b8:	4c26      	ldr	r4, [pc, #152]	; (1a000a54 <TimeoutCallback+0xd4>)
1a0009ba:	4620      	mov	r0, r4
1a0009bc:	f004 f831 	bl	1a004a22 <strlen>
     if(memDinIn[0]=='[' && (memDinIn[1]=='1' || memDinIn[1]=='2') && memDinIn[indice-1]==']'){
1a0009c0:	7823      	ldrb	r3, [r4, #0]
1a0009c2:	2b5b      	cmp	r3, #91	; 0x5b
1a0009c4:	d104      	bne.n	1a0009d0 <TimeoutCallback+0x50>
1a0009c6:	7863      	ldrb	r3, [r4, #1]
1a0009c8:	3b31      	subs	r3, #49	; 0x31
1a0009ca:	b2db      	uxtb	r3, r3
1a0009cc:	2b01      	cmp	r3, #1
1a0009ce:	d915      	bls.n	1a0009fc <TimeoutCallback+0x7c>
    	 EnvioErrorUartdDelim();
1a0009d0:	f7ff ff9c 	bl	1a00090c <EnvioErrorUartdDelim>
	     BorrarBufferIn();           // clear the array bufferin
1a0009d4:	f7ff ff20 	bl	1a000818 <BorrarBufferIn>
	     return;                     // Sale del callback del timer
1a0009d8:	e7d8      	b.n	1a00098c <TimeoutCallback+0xc>
		 gpioToggle(LED2);
1a0009da:	202c      	movs	r0, #44	; 0x2c
1a0009dc:	f003 fabf 	bl	1a003f5e <gpioToggle>
1a0009e0:	e7df      	b.n	1a0009a2 <TimeoutCallback+0x22>
		 EnvioErrorUartLim();
1a0009e2:	f7ff ff23 	bl	1a00082c <EnvioErrorUartLim>
		 BorrarBufferIn();
1a0009e6:	f7ff ff17 	bl	1a000818 <BorrarBufferIn>
		 fsmUARTRXState = StandBy;
1a0009ea:	4b19      	ldr	r3, [pc, #100]	; (1a000a50 <TimeoutCallback+0xd0>)
1a0009ec:	2200      	movs	r2, #0
1a0009ee:	701a      	strb	r2, [r3, #0]
		 return;// Sale del callback del timer
1a0009f0:	e7cc      	b.n	1a00098c <TimeoutCallback+0xc>
       EnvioErrorUartLim();
1a0009f2:	f7ff ff1b 	bl	1a00082c <EnvioErrorUartLim>
	   BorrarBufferIn();                                 // clear the array bufferin
1a0009f6:	f7ff ff0f 	bl	1a000818 <BorrarBufferIn>
       return;// Sale del callback del timer
1a0009fa:	e7c7      	b.n	1a00098c <TimeoutCallback+0xc>
     if(memDinIn[0]=='[' && (memDinIn[1]=='1' || memDinIn[1]=='2') && memDinIn[indice-1]==']'){
1a0009fc:	b2c0      	uxtb	r0, r0
1a0009fe:	3801      	subs	r0, #1
1a000a00:	5c23      	ldrb	r3, [r4, r0]
1a000a02:	2b5d      	cmp	r3, #93	; 0x5d
1a000a04:	d1e4      	bne.n	1a0009d0 <TimeoutCallback+0x50>
	 temp = (struct node*)pvPortMalloc(sizeof(struct node));
1a000a06:	2050      	movs	r0, #80	; 0x50
1a000a08:	f000 f9e4 	bl	1a000dd4 <pvPortMalloc>
1a000a0c:	4605      	mov	r5, r0
	 for(int i = 0 ; i < strlen(memDinIn) - 1; i++){
1a000a0e:	2400      	movs	r4, #0
1a000a10:	e004      	b.n	1a000a1c <TimeoutCallback+0x9c>
		 temp->datos[i] = memDinIn[i+1]; // copia el contenido del buffer entrante en ultimo elemento de la cola dinamica
1a000a12:	1c63      	adds	r3, r4, #1
1a000a14:	4a0f      	ldr	r2, [pc, #60]	; (1a000a54 <TimeoutCallback+0xd4>)
1a000a16:	5cd2      	ldrb	r2, [r2, r3]
1a000a18:	552a      	strb	r2, [r5, r4]
	 for(int i = 0 ; i < strlen(memDinIn) - 1; i++){
1a000a1a:	461c      	mov	r4, r3
1a000a1c:	480d      	ldr	r0, [pc, #52]	; (1a000a54 <TimeoutCallback+0xd4>)
1a000a1e:	f004 f800 	bl	1a004a22 <strlen>
1a000a22:	3801      	subs	r0, #1
1a000a24:	42a0      	cmp	r0, r4
1a000a26:	d8f4      	bhi.n	1a000a12 <TimeoutCallback+0x92>
	 BorrarBufferIn();
1a000a28:	f7ff fef6 	bl	1a000818 <BorrarBufferIn>
	 temp->link = NULL;
1a000a2c:	2300      	movs	r3, #0
1a000a2e:	64eb      	str	r3, [r5, #76]	; 0x4c
	 if(front == NULL){
1a000a30:	4b09      	ldr	r3, [pc, #36]	; (1a000a58 <TimeoutCallback+0xd8>)
1a000a32:	681b      	ldr	r3, [r3, #0]
1a000a34:	b123      	cbz	r3, 1a000a40 <TimeoutCallback+0xc0>
	  	 rear->link = temp;
1a000a36:	4b09      	ldr	r3, [pc, #36]	; (1a000a5c <TimeoutCallback+0xdc>)
1a000a38:	681a      	ldr	r2, [r3, #0]
1a000a3a:	64d5      	str	r5, [r2, #76]	; 0x4c
	  	 rear = temp;
1a000a3c:	601d      	str	r5, [r3, #0]
1a000a3e:	e7a5      	b.n	1a00098c <TimeoutCallback+0xc>
	  	 front = rear = temp;
1a000a40:	4b06      	ldr	r3, [pc, #24]	; (1a000a5c <TimeoutCallback+0xdc>)
1a000a42:	601d      	str	r5, [r3, #0]
1a000a44:	4b04      	ldr	r3, [pc, #16]	; (1a000a58 <TimeoutCallback+0xd8>)
1a000a46:	601d      	str	r5, [r3, #0]
1a000a48:	e7a0      	b.n	1a00098c <TimeoutCallback+0xc>
1a000a4a:	bf00      	nop
1a000a4c:	10002de8 	.word	0x10002de8
1a000a50:	10002db0 	.word	0x10002db0
1a000a54:	10002d60 	.word	0x10002d60
1a000a58:	10002dac 	.word	0x10002dac
1a000a5c:	10002d58 	.word	0x10002d58

1a000a60 <uartUsbReceiveCallback>:
 *
 * @return  void
 */

void uartUsbReceiveCallback( void *unused )
{
1a000a60:	b530      	push	{r4, r5, lr}
1a000a62:	b085      	sub	sp, #20
	static uint8_t indicerx;
	BaseType_t xHigherPriorityTaskWoken = pdTRUE;
1a000a64:	2301      	movs	r3, #1
1a000a66:	9303      	str	r3, [sp, #12]
	char Caracter;

	// FSM Recepcion de Uart
	switch( fsmUARTRXState ){
1a000a68:	4b28      	ldr	r3, [pc, #160]	; (1a000b0c <uartUsbReceiveCallback+0xac>)
1a000a6a:	781b      	ldrb	r3, [r3, #0]
1a000a6c:	2b01      	cmp	r3, #1
1a000a6e:	d01b      	beq.n	1a000aa8 <uartUsbReceiveCallback+0x48>
1a000a70:	b11b      	cbz	r3, 1a000a7a <uartUsbReceiveCallback+0x1a>
1a000a72:	2b02      	cmp	r3, #2
1a000a74:	d037      	beq.n	1a000ae6 <uartUsbReceiveCallback+0x86>
	        	 xTimerResetFromISR( TimerTimeout , &xHigherPriorityTaskWoken );
	        	 indicerx=0; // inicializa con el primer caracter
	        	 Caracter = uartRxRead(UART_USB);
	         break;
 	}
}
1a000a76:	b005      	add	sp, #20
1a000a78:	bd30      	pop	{r4, r5, pc}
	        	 indicerx=0;
1a000a7a:	2400      	movs	r4, #0
1a000a7c:	4b24      	ldr	r3, [pc, #144]	; (1a000b10 <uartUsbReceiveCallback+0xb0>)
1a000a7e:	701c      	strb	r4, [r3, #0]
	        	 memDinIn[indicerx] = uartRxRead(UART_USB);
1a000a80:	2003      	movs	r0, #3
1a000a82:	f003 f817 	bl	1a003ab4 <uartRxRead>
1a000a86:	4b23      	ldr	r3, [pc, #140]	; (1a000b14 <uartUsbReceiveCallback+0xb4>)
1a000a88:	7018      	strb	r0, [r3, #0]
	             xTimerStartFromISR( TimerTimeout , &xHigherPriorityTaskWoken );
1a000a8a:	4b23      	ldr	r3, [pc, #140]	; (1a000b18 <uartUsbReceiveCallback+0xb8>)
1a000a8c:	681d      	ldr	r5, [r3, #0]
1a000a8e:	f001 f97f 	bl	1a001d90 <xTaskGetTickCountFromISR>
1a000a92:	9400      	str	r4, [sp, #0]
1a000a94:	ab03      	add	r3, sp, #12
1a000a96:	4602      	mov	r2, r0
1a000a98:	2106      	movs	r1, #6
1a000a9a:	4628      	mov	r0, r5
1a000a9c:	f001 fcf8 	bl	1a002490 <xTimerGenericCommand>
	             fsmUARTRXState = Recibiendo;
1a000aa0:	4b1a      	ldr	r3, [pc, #104]	; (1a000b0c <uartUsbReceiveCallback+0xac>)
1a000aa2:	2201      	movs	r2, #1
1a000aa4:	701a      	strb	r2, [r3, #0]
	         break;
1a000aa6:	e7e6      	b.n	1a000a76 <uartUsbReceiveCallback+0x16>
	        	 if(indicerx > (MEMORIADINAMICA-1)){
1a000aa8:	4b19      	ldr	r3, [pc, #100]	; (1a000b10 <uartUsbReceiveCallback+0xb0>)
1a000aaa:	781b      	ldrb	r3, [r3, #0]
1a000aac:	2b4a      	cmp	r3, #74	; 0x4a
1a000aae:	d903      	bls.n	1a000ab8 <uartUsbReceiveCallback+0x58>
	        		fsmUARTRXState = ErrorLimite;
1a000ab0:	4b16      	ldr	r3, [pc, #88]	; (1a000b0c <uartUsbReceiveCallback+0xac>)
1a000ab2:	2202      	movs	r2, #2
1a000ab4:	701a      	strb	r2, [r3, #0]
1a000ab6:	e7de      	b.n	1a000a76 <uartUsbReceiveCallback+0x16>
	        		 xTimerResetFromISR( TimerTimeout , &xHigherPriorityTaskWoken );
1a000ab8:	4b17      	ldr	r3, [pc, #92]	; (1a000b18 <uartUsbReceiveCallback+0xb8>)
1a000aba:	681c      	ldr	r4, [r3, #0]
1a000abc:	f001 f968 	bl	1a001d90 <xTaskGetTickCountFromISR>
1a000ac0:	2300      	movs	r3, #0
1a000ac2:	9300      	str	r3, [sp, #0]
1a000ac4:	ab03      	add	r3, sp, #12
1a000ac6:	4602      	mov	r2, r0
1a000ac8:	2107      	movs	r1, #7
1a000aca:	4620      	mov	r0, r4
1a000acc:	f001 fce0 	bl	1a002490 <xTimerGenericCommand>
	        		 indicerx++;
1a000ad0:	4b0f      	ldr	r3, [pc, #60]	; (1a000b10 <uartUsbReceiveCallback+0xb0>)
1a000ad2:	781c      	ldrb	r4, [r3, #0]
1a000ad4:	3401      	adds	r4, #1
1a000ad6:	b2e4      	uxtb	r4, r4
1a000ad8:	701c      	strb	r4, [r3, #0]
	        		 memDinIn[indicerx] = uartRxRead(UART_USB);
1a000ada:	2003      	movs	r0, #3
1a000adc:	f002 ffea 	bl	1a003ab4 <uartRxRead>
1a000ae0:	4b0c      	ldr	r3, [pc, #48]	; (1a000b14 <uartUsbReceiveCallback+0xb4>)
1a000ae2:	5518      	strb	r0, [r3, r4]
1a000ae4:	e7c7      	b.n	1a000a76 <uartUsbReceiveCallback+0x16>
	        	 xTimerResetFromISR( TimerTimeout , &xHigherPriorityTaskWoken );
1a000ae6:	4b0c      	ldr	r3, [pc, #48]	; (1a000b18 <uartUsbReceiveCallback+0xb8>)
1a000ae8:	681d      	ldr	r5, [r3, #0]
1a000aea:	f001 f951 	bl	1a001d90 <xTaskGetTickCountFromISR>
1a000aee:	2400      	movs	r4, #0
1a000af0:	9400      	str	r4, [sp, #0]
1a000af2:	ab03      	add	r3, sp, #12
1a000af4:	4602      	mov	r2, r0
1a000af6:	2107      	movs	r1, #7
1a000af8:	4628      	mov	r0, r5
1a000afa:	f001 fcc9 	bl	1a002490 <xTimerGenericCommand>
	        	 indicerx=0; // inicializa con el primer caracter
1a000afe:	4b04      	ldr	r3, [pc, #16]	; (1a000b10 <uartUsbReceiveCallback+0xb0>)
1a000b00:	701c      	strb	r4, [r3, #0]
	        	 Caracter = uartRxRead(UART_USB);
1a000b02:	2003      	movs	r0, #3
1a000b04:	f002 ffd6 	bl	1a003ab4 <uartRxRead>
}
1a000b08:	e7b5      	b.n	1a000a76 <uartUsbReceiveCallback+0x16>
1a000b0a:	bf00      	nop
1a000b0c:	10002db0 	.word	0x10002db0
1a000b10:	1000029b 	.word	0x1000029b
1a000b14:	10002d60 	.word	0x10002d60
1a000b18:	10002de8 	.word	0x10002de8

1a000b1c <uartUsbSendCallback>:
 *
 * @return  void
 */

void uartUsbSendCallback( void *unused )
{
1a000b1c:	b510      	push	{r4, lr}
1a000b1e:	b086      	sub	sp, #24
	char caracter_in;
	static char lReceivedValue[MEMORIADINAMICA];
	static uint8_t indice = 0;
	BaseType_t xTaskWokenByReceive = pdFALSE;
1a000b20:	2300      	movs	r3, #0
1a000b22:	9304      	str	r3, [sp, #16]
	BaseType_t xHigherPriorityTaskWoken = pdTRUE;
1a000b24:	2301      	movs	r3, #1
1a000b26:	9303      	str	r3, [sp, #12]

	 // Recepcion de los datos de la queue
	 /* Se recibe un caracter y se almacena */
	 if(xQueueReceiveFromISR( xQueueRecibe, &caracter_in, &xTaskWokenByReceive ) == pdTRUE){
1a000b28:	aa04      	add	r2, sp, #16
1a000b2a:	f10d 0117 	add.w	r1, sp, #23
1a000b2e:	4b21      	ldr	r3, [pc, #132]	; (1a000bb4 <uartUsbSendCallback+0x98>)
1a000b30:	6818      	ldr	r0, [r3, #0]
1a000b32:	f000 fd47 	bl	1a0015c4 <xQueueReceiveFromISR>
1a000b36:	2801      	cmp	r0, #1
1a000b38:	d001      	beq.n	1a000b3e <uartUsbSendCallback+0x22>
			 uartCallbackClr( UART_USB, UART_TRANSMITER_FREE);
		  }


	 }
}
1a000b3a:	b006      	add	sp, #24
1a000b3c:	bd10      	pop	{r4, pc}
		 xTimerResetFromISR( TimeToExit , &xHigherPriorityTaskWoken );
1a000b3e:	4b1e      	ldr	r3, [pc, #120]	; (1a000bb8 <uartUsbSendCallback+0x9c>)
1a000b40:	681c      	ldr	r4, [r3, #0]
1a000b42:	f001 f925 	bl	1a001d90 <xTaskGetTickCountFromISR>
1a000b46:	2300      	movs	r3, #0
1a000b48:	9300      	str	r3, [sp, #0]
1a000b4a:	ab03      	add	r3, sp, #12
1a000b4c:	4602      	mov	r2, r0
1a000b4e:	2107      	movs	r1, #7
1a000b50:	4620      	mov	r0, r4
1a000b52:	f001 fc9d 	bl	1a002490 <xTimerGenericCommand>
		 lReceivedValue[indice] = caracter_in;
1a000b56:	4b19      	ldr	r3, [pc, #100]	; (1a000bbc <uartUsbSendCallback+0xa0>)
1a000b58:	781a      	ldrb	r2, [r3, #0]
1a000b5a:	f89d 3017 	ldrb.w	r3, [sp, #23]
1a000b5e:	4918      	ldr	r1, [pc, #96]	; (1a000bc0 <uartUsbSendCallback+0xa4>)
1a000b60:	548b      	strb	r3, [r1, r2]
		  if(lReceivedValue[indice] != '\0'){
1a000b62:	b17b      	cbz	r3, 1a000b84 <uartUsbSendCallback+0x68>
			 if(indice==0){
1a000b64:	b14a      	cbz	r2, 1a000b7a <uartUsbSendCallback+0x5e>
			 uartWriteByte(UART_USB, caracter_in );
1a000b66:	f89d 1017 	ldrb.w	r1, [sp, #23]
1a000b6a:	2003      	movs	r0, #3
1a000b6c:	f002 fff4 	bl	1a003b58 <uartWriteByte>
			 indice++;
1a000b70:	4a12      	ldr	r2, [pc, #72]	; (1a000bbc <uartUsbSendCallback+0xa0>)
1a000b72:	7813      	ldrb	r3, [r2, #0]
1a000b74:	3301      	adds	r3, #1
1a000b76:	7013      	strb	r3, [r2, #0]
1a000b78:	e7df      	b.n	1a000b3a <uartUsbSendCallback+0x1e>
			 	uartWriteByte(UART_USB, '[' );
1a000b7a:	215b      	movs	r1, #91	; 0x5b
1a000b7c:	2003      	movs	r0, #3
1a000b7e:	f002 ffeb 	bl	1a003b58 <uartWriteByte>
1a000b82:	e7f0      	b.n	1a000b66 <uartUsbSendCallback+0x4a>
			 indice = 0;
1a000b84:	2100      	movs	r1, #0
1a000b86:	4b0d      	ldr	r3, [pc, #52]	; (1a000bbc <uartUsbSendCallback+0xa0>)
1a000b88:	7019      	strb	r1, [r3, #0]
			 memset(&lReceivedValue[0], 0, sizeof(lReceivedValue)); // clear the array
1a000b8a:	224b      	movs	r2, #75	; 0x4b
1a000b8c:	480c      	ldr	r0, [pc, #48]	; (1a000bc0 <uartUsbSendCallback+0xa4>)
1a000b8e:	f003 fdd8 	bl	1a004742 <memset>
			 uartWriteByte(UART_USB, ']' );
1a000b92:	215d      	movs	r1, #93	; 0x5d
1a000b94:	2003      	movs	r0, #3
1a000b96:	f002 ffdf 	bl	1a003b58 <uartWriteByte>
			 uartWriteByte(UART_USB, '\r' );
1a000b9a:	210d      	movs	r1, #13
1a000b9c:	2003      	movs	r0, #3
1a000b9e:	f002 ffdb 	bl	1a003b58 <uartWriteByte>
			 uartWriteByte(UART_USB, '\n' );
1a000ba2:	210a      	movs	r1, #10
1a000ba4:	2003      	movs	r0, #3
1a000ba6:	f002 ffd7 	bl	1a003b58 <uartWriteByte>
			 uartCallbackClr( UART_USB, UART_TRANSMITER_FREE);
1a000baa:	2101      	movs	r1, #1
1a000bac:	2003      	movs	r0, #3
1a000bae:	f002 ff61 	bl	1a003a74 <uartCallbackClr>
}
1a000bb2:	e7c2      	b.n	1a000b3a <uartUsbSendCallback+0x1e>
1a000bb4:	10002de0 	.word	0x10002de0
1a000bb8:	10002d5c 	.word	0x10002d5c
1a000bbc:	1000029a 	.word	0x1000029a
1a000bc0:	1000029c 	.word	0x1000029c

1a000bc4 <Reset_Handler>:
void Reset_Handler(void) {
1a000bc4:	b510      	push	{r4, lr}
    __asm__ __volatile__("cpsid i");
1a000bc6:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000bc8:	4b19      	ldr	r3, [pc, #100]	; (1a000c30 <Reset_Handler+0x6c>)
1a000bca:	4a1a      	ldr	r2, [pc, #104]	; (1a000c34 <Reset_Handler+0x70>)
1a000bcc:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000bce:	3304      	adds	r3, #4
1a000bd0:	4a19      	ldr	r2, [pc, #100]	; (1a000c38 <Reset_Handler+0x74>)
1a000bd2:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000bd4:	2300      	movs	r3, #0
1a000bd6:	e005      	b.n	1a000be4 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000bd8:	4a18      	ldr	r2, [pc, #96]	; (1a000c3c <Reset_Handler+0x78>)
1a000bda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000bde:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000be2:	3301      	adds	r3, #1
1a000be4:	2b07      	cmp	r3, #7
1a000be6:	d9f7      	bls.n	1a000bd8 <Reset_Handler+0x14>
    SectionTableAddr = &__data_section_table;
1a000be8:	4b15      	ldr	r3, [pc, #84]	; (1a000c40 <Reset_Handler+0x7c>)
1a000bea:	e007      	b.n	1a000bfc <Reset_Handler+0x38>
        SectionLen = *SectionTableAddr++;
1a000bec:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000bf0:	689a      	ldr	r2, [r3, #8]
1a000bf2:	6859      	ldr	r1, [r3, #4]
1a000bf4:	6818      	ldr	r0, [r3, #0]
1a000bf6:	f7ff fac8 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000bfa:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000bfc:	4a11      	ldr	r2, [pc, #68]	; (1a000c44 <Reset_Handler+0x80>)
1a000bfe:	4293      	cmp	r3, r2
1a000c00:	d3f4      	bcc.n	1a000bec <Reset_Handler+0x28>
1a000c02:	e006      	b.n	1a000c12 <Reset_Handler+0x4e>
        ExeAddr = *SectionTableAddr++;
1a000c04:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000c06:	6859      	ldr	r1, [r3, #4]
1a000c08:	f854 0b08 	ldr.w	r0, [r4], #8
1a000c0c:	f7ff facc 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000c10:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000c12:	4a0d      	ldr	r2, [pc, #52]	; (1a000c48 <Reset_Handler+0x84>)
1a000c14:	4293      	cmp	r3, r2
1a000c16:	d3f5      	bcc.n	1a000c04 <Reset_Handler+0x40>
    SystemInit();
1a000c18:	f002 fe22 	bl	1a003860 <SystemInit>
    __libc_init_array();
1a000c1c:	f003 fd42 	bl	1a0046a4 <__libc_init_array>
    main();
1a000c20:	f7ff fd1e 	bl	1a000660 <main>
    __libc_fini_array();
1a000c24:	f003 fd0c 	bl	1a004640 <__libc_fini_array>
    __asm__ __volatile__("bkpt 0");
1a000c28:	be00      	bkpt	0x0000
        __asm__ __volatile__("wfi");
1a000c2a:	bf30      	wfi
1a000c2c:	e7fd      	b.n	1a000c2a <Reset_Handler+0x66>
1a000c2e:	bf00      	nop
1a000c30:	40053100 	.word	0x40053100
1a000c34:	10df1000 	.word	0x10df1000
1a000c38:	01dff7ff 	.word	0x01dff7ff
1a000c3c:	e000e280 	.word	0xe000e280
1a000c40:	1a000114 	.word	0x1a000114
1a000c44:	1a000150 	.word	0x1a000150
1a000c48:	1a000178 	.word	0x1a000178

1a000c4c <_fini>:
void _fini(void) {}
1a000c4c:	4770      	bx	lr

1a000c4e <_init>:
void _init(void) {}
1a000c4e:	4770      	bx	lr

1a000c50 <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000c50:	2309      	movs	r3, #9
1a000c52:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c58:	4770      	bx	lr

1a000c5a <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a000c5a:	2358      	movs	r3, #88	; 0x58
1a000c5c:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000c5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c62:	4770      	bx	lr

1a000c64 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000c64:	2902      	cmp	r1, #2
1a000c66:	d801      	bhi.n	1a000c6c <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a000c68:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a000c6a:	4770      	bx	lr
       SET_ERR(EBADF);
1a000c6c:	2309      	movs	r3, #9
1a000c6e:	6003      	str	r3, [r0, #0]
       return -1;
1a000c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c74:	4770      	bx	lr

1a000c76 <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a000c76:	2358      	movs	r3, #88	; 0x58
1a000c78:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000c7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c7e:	4770      	bx	lr

1a000c80 <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a000c80:	2902      	cmp	r1, #2
1a000c82:	d81f      	bhi.n	1a000cc4 <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000c88:	461d      	mov	r5, r3
1a000c8a:	4617      	mov	r7, r2
1a000c8c:	4606      	mov	r6, r0
  size_t i = 0;
1a000c8e:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000c90:	42ac      	cmp	r4, r5
1a000c92:	d211      	bcs.n	1a000cb8 <_read_r+0x38>
         int c = __stdio_getchar();
1a000c94:	f002 f835 	bl	1a002d02 <__stdio_getchar>
         if( c != -1 ){
1a000c98:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000c9c:	d0f8      	beq.n	1a000c90 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a000c9e:	f104 0801 	add.w	r8, r4, #1
1a000ca2:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000ca4:	280d      	cmp	r0, #13
1a000ca6:	d003      	beq.n	1a000cb0 <_read_r+0x30>
1a000ca8:	280a      	cmp	r0, #10
1a000caa:	d001      	beq.n	1a000cb0 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000cac:	4644      	mov	r4, r8
1a000cae:	e7ef      	b.n	1a000c90 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000cb0:	f002 f827 	bl	1a002d02 <__stdio_getchar>
               return i;
1a000cb4:	4640      	mov	r0, r8
1a000cb6:	e003      	b.n	1a000cc0 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a000cb8:	2313      	movs	r3, #19
1a000cba:	6033      	str	r3, [r6, #0]
      return -1;
1a000cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a000cc4:	2313      	movs	r3, #19
1a000cc6:	6003      	str	r3, [r0, #0]
      return -1;
1a000cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000ccc:	4770      	bx	lr

1a000cce <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000cce:	2902      	cmp	r1, #2
1a000cd0:	d80c      	bhi.n	1a000cec <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000cd2:	b570      	push	{r4, r5, r6, lr}
1a000cd4:	461d      	mov	r5, r3
1a000cd6:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000cd8:	2400      	movs	r4, #0
1a000cda:	e003      	b.n	1a000ce4 <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a000cdc:	5d30      	ldrb	r0, [r6, r4]
1a000cde:	f002 f80b 	bl	1a002cf8 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a000ce2:	3401      	adds	r4, #1
1a000ce4:	42ac      	cmp	r4, r5
1a000ce6:	d3f9      	bcc.n	1a000cdc <_write_r+0xe>
       return n;
1a000ce8:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a000cea:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000cec:	2313      	movs	r3, #19
1a000cee:	6003      	str	r3, [r0, #0]
       return -1;
1a000cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000cf4:	4770      	bx	lr
1a000cf6:	Address 0x000000001a000cf6 is out of bounds.


1a000cf8 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000cf8:	4b05      	ldr	r3, [pc, #20]	; (1a000d10 <_sbrk_r+0x18>)
1a000cfa:	681b      	ldr	r3, [r3, #0]
1a000cfc:	b123      	cbz	r3, 1a000d08 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a000cfe:	4b04      	ldr	r3, [pc, #16]	; (1a000d10 <_sbrk_r+0x18>)
1a000d00:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000d02:	4401      	add	r1, r0
1a000d04:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000d06:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000d08:	4b01      	ldr	r3, [pc, #4]	; (1a000d10 <_sbrk_r+0x18>)
1a000d0a:	4a02      	ldr	r2, [pc, #8]	; (1a000d14 <_sbrk_r+0x1c>)
1a000d0c:	601a      	str	r2, [r3, #0]
1a000d0e:	e7f6      	b.n	1a000cfe <_sbrk_r+0x6>
1a000d10:	100002e8 	.word	0x100002e8
1a000d14:	10002e34 	.word	0x10002e34

1a000d18 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
1a000d18:	4a12      	ldr	r2, [pc, #72]	; (1a000d64 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
1a000d1a:	f012 0f07 	tst.w	r2, #7
1a000d1e:	d01e      	beq.n	1a000d5e <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
1a000d20:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000d22:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
1a000d26:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
1a000d2a:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000d2c:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a000d2e:	480e      	ldr	r0, [pc, #56]	; (1a000d68 <prvHeapInit+0x50>)
1a000d30:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
1a000d32:	2100      	movs	r1, #0
1a000d34:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
1a000d36:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
1a000d38:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000d3a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
1a000d3e:	480b      	ldr	r0, [pc, #44]	; (1a000d6c <prvHeapInit+0x54>)
1a000d40:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
1a000d42:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
1a000d44:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
1a000d46:	1a99      	subs	r1, r3, r2
1a000d48:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
1a000d4a:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a000d4c:	4b08      	ldr	r3, [pc, #32]	; (1a000d70 <prvHeapInit+0x58>)
1a000d4e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a000d50:	4b08      	ldr	r3, [pc, #32]	; (1a000d74 <prvHeapInit+0x5c>)
1a000d52:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a000d54:	4b08      	ldr	r3, [pc, #32]	; (1a000d78 <prvHeapInit+0x60>)
1a000d56:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
1a000d5a:	601a      	str	r2, [r3, #0]
}
1a000d5c:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
1a000d5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
1a000d62:	e7e4      	b.n	1a000d2e <prvHeapInit+0x16>
1a000d64:	100002f0 	.word	0x100002f0
1a000d68:	100022fc 	.word	0x100022fc
1a000d6c:	100002ec 	.word	0x100002ec
1a000d70:	100022f8 	.word	0x100022f8
1a000d74:	100022f4 	.word	0x100022f4
1a000d78:	100022f0 	.word	0x100022f0

1a000d7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
1a000d7c:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a000d7e:	4b13      	ldr	r3, [pc, #76]	; (1a000dcc <prvInsertBlockIntoFreeList+0x50>)
1a000d80:	681a      	ldr	r2, [r3, #0]
1a000d82:	4282      	cmp	r2, r0
1a000d84:	d31b      	bcc.n	1a000dbe <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1a000d86:	6859      	ldr	r1, [r3, #4]
1a000d88:	185c      	adds	r4, r3, r1
1a000d8a:	4284      	cmp	r4, r0
1a000d8c:	d103      	bne.n	1a000d96 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a000d8e:	6840      	ldr	r0, [r0, #4]
1a000d90:	4401      	add	r1, r0
1a000d92:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
1a000d94:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a000d96:	6841      	ldr	r1, [r0, #4]
1a000d98:	1844      	adds	r4, r0, r1
1a000d9a:	42a2      	cmp	r2, r4
1a000d9c:	d113      	bne.n	1a000dc6 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
1a000d9e:	4c0c      	ldr	r4, [pc, #48]	; (1a000dd0 <prvInsertBlockIntoFreeList+0x54>)
1a000da0:	6824      	ldr	r4, [r4, #0]
1a000da2:	42a2      	cmp	r2, r4
1a000da4:	d00d      	beq.n	1a000dc2 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a000da6:	6852      	ldr	r2, [r2, #4]
1a000da8:	4411      	add	r1, r2
1a000daa:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a000dac:	681a      	ldr	r2, [r3, #0]
1a000dae:	6812      	ldr	r2, [r2, #0]
1a000db0:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
1a000db2:	4298      	cmp	r0, r3
1a000db4:	d000      	beq.n	1a000db8 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a000db6:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a000db8:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000dbc:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a000dbe:	4613      	mov	r3, r2
1a000dc0:	e7de      	b.n	1a000d80 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
1a000dc2:	6004      	str	r4, [r0, #0]
1a000dc4:	e7f5      	b.n	1a000db2 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
1a000dc6:	6002      	str	r2, [r0, #0]
1a000dc8:	e7f3      	b.n	1a000db2 <prvInsertBlockIntoFreeList+0x36>
1a000dca:	bf00      	nop
1a000dcc:	100022fc 	.word	0x100022fc
1a000dd0:	100002ec 	.word	0x100002ec

1a000dd4 <pvPortMalloc>:
{
1a000dd4:	b570      	push	{r4, r5, r6, lr}
1a000dd6:	4604      	mov	r4, r0
	vTaskSuspendAll();
1a000dd8:	f000 ffcc 	bl	1a001d74 <vTaskSuspendAll>
		if( pxEnd == NULL )
1a000ddc:	4b3f      	ldr	r3, [pc, #252]	; (1a000edc <pvPortMalloc+0x108>)
1a000dde:	681b      	ldr	r3, [r3, #0]
1a000de0:	b1a3      	cbz	r3, 1a000e0c <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
1a000de2:	4b3f      	ldr	r3, [pc, #252]	; (1a000ee0 <pvPortMalloc+0x10c>)
1a000de4:	681b      	ldr	r3, [r3, #0]
1a000de6:	421c      	tst	r4, r3
1a000de8:	d013      	beq.n	1a000e12 <pvPortMalloc+0x3e>
	( void ) xTaskResumeAll();
1a000dea:	f001 f865 	bl	1a001eb8 <xTaskResumeAll>
void *pvReturn = NULL;
1a000dee:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
1a000df0:	f000 fcf2 	bl	1a0017d8 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
1a000df4:	f016 0f07 	tst.w	r6, #7
1a000df8:	d06e      	beq.n	1a000ed8 <pvPortMalloc+0x104>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a000dfa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000dfe:	f383 8811 	msr	BASEPRI, r3
1a000e02:	f3bf 8f6f 	isb	sy
1a000e06:	f3bf 8f4f 	dsb	sy
1a000e0a:	e7fe      	b.n	1a000e0a <pvPortMalloc+0x36>
			prvHeapInit();
1a000e0c:	f7ff ff84 	bl	1a000d18 <prvHeapInit>
1a000e10:	e7e7      	b.n	1a000de2 <pvPortMalloc+0xe>
			if( xWantedSize > 0 )
1a000e12:	b194      	cbz	r4, 1a000e3a <pvPortMalloc+0x66>
				xWantedSize += xHeapStructSize;
1a000e14:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
1a000e16:	f014 0f07 	tst.w	r4, #7
1a000e1a:	d00e      	beq.n	1a000e3a <pvPortMalloc+0x66>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a000e1c:	f024 0407 	bic.w	r4, r4, #7
1a000e20:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
1a000e22:	f004 0307 	and.w	r3, r4, #7
1a000e26:	b143      	cbz	r3, 1a000e3a <pvPortMalloc+0x66>
1a000e28:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e2c:	f383 8811 	msr	BASEPRI, r3
1a000e30:	f3bf 8f6f 	isb	sy
1a000e34:	f3bf 8f4f 	dsb	sy
1a000e38:	e7fe      	b.n	1a000e38 <pvPortMalloc+0x64>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
1a000e3a:	b134      	cbz	r4, 1a000e4a <pvPortMalloc+0x76>
1a000e3c:	4b29      	ldr	r3, [pc, #164]	; (1a000ee4 <pvPortMalloc+0x110>)
1a000e3e:	681b      	ldr	r3, [r3, #0]
1a000e40:	42a3      	cmp	r3, r4
1a000e42:	d306      	bcc.n	1a000e52 <pvPortMalloc+0x7e>
				pxBlock = xStart.pxNextFreeBlock;
1a000e44:	4b28      	ldr	r3, [pc, #160]	; (1a000ee8 <pvPortMalloc+0x114>)
1a000e46:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a000e48:	e009      	b.n	1a000e5e <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
1a000e4a:	f001 f835 	bl	1a001eb8 <xTaskResumeAll>
void *pvReturn = NULL;
1a000e4e:	2600      	movs	r6, #0
1a000e50:	e7ce      	b.n	1a000df0 <pvPortMalloc+0x1c>
	( void ) xTaskResumeAll();
1a000e52:	f001 f831 	bl	1a001eb8 <xTaskResumeAll>
void *pvReturn = NULL;
1a000e56:	2600      	movs	r6, #0
1a000e58:	e7ca      	b.n	1a000df0 <pvPortMalloc+0x1c>
					pxPreviousBlock = pxBlock;
1a000e5a:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
1a000e5c:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a000e5e:	686a      	ldr	r2, [r5, #4]
1a000e60:	42a2      	cmp	r2, r4
1a000e62:	d202      	bcs.n	1a000e6a <pvPortMalloc+0x96>
1a000e64:	682a      	ldr	r2, [r5, #0]
1a000e66:	2a00      	cmp	r2, #0
1a000e68:	d1f7      	bne.n	1a000e5a <pvPortMalloc+0x86>
				if( pxBlock != pxEnd )
1a000e6a:	4a1c      	ldr	r2, [pc, #112]	; (1a000edc <pvPortMalloc+0x108>)
1a000e6c:	6812      	ldr	r2, [r2, #0]
1a000e6e:	42aa      	cmp	r2, r5
1a000e70:	d014      	beq.n	1a000e9c <pvPortMalloc+0xc8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
1a000e72:	681e      	ldr	r6, [r3, #0]
1a000e74:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a000e76:	682a      	ldr	r2, [r5, #0]
1a000e78:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a000e7a:	686b      	ldr	r3, [r5, #4]
1a000e7c:	1b1b      	subs	r3, r3, r4
1a000e7e:	2b10      	cmp	r3, #16
1a000e80:	d914      	bls.n	1a000eac <pvPortMalloc+0xd8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a000e82:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
1a000e84:	f010 0f07 	tst.w	r0, #7
1a000e88:	d00c      	beq.n	1a000ea4 <pvPortMalloc+0xd0>
1a000e8a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e8e:	f383 8811 	msr	BASEPRI, r3
1a000e92:	f3bf 8f6f 	isb	sy
1a000e96:	f3bf 8f4f 	dsb	sy
1a000e9a:	e7fe      	b.n	1a000e9a <pvPortMalloc+0xc6>
	( void ) xTaskResumeAll();
1a000e9c:	f001 f80c 	bl	1a001eb8 <xTaskResumeAll>
void *pvReturn = NULL;
1a000ea0:	2600      	movs	r6, #0
1a000ea2:	e7a5      	b.n	1a000df0 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a000ea4:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
1a000ea6:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
1a000ea8:	f7ff ff68 	bl	1a000d7c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
1a000eac:	686a      	ldr	r2, [r5, #4]
1a000eae:	490d      	ldr	r1, [pc, #52]	; (1a000ee4 <pvPortMalloc+0x110>)
1a000eb0:	680b      	ldr	r3, [r1, #0]
1a000eb2:	1a9b      	subs	r3, r3, r2
1a000eb4:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1a000eb6:	490d      	ldr	r1, [pc, #52]	; (1a000eec <pvPortMalloc+0x118>)
1a000eb8:	6809      	ldr	r1, [r1, #0]
1a000eba:	428b      	cmp	r3, r1
1a000ebc:	d201      	bcs.n	1a000ec2 <pvPortMalloc+0xee>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
1a000ebe:	490b      	ldr	r1, [pc, #44]	; (1a000eec <pvPortMalloc+0x118>)
1a000ec0:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
1a000ec2:	4b07      	ldr	r3, [pc, #28]	; (1a000ee0 <pvPortMalloc+0x10c>)
1a000ec4:	681b      	ldr	r3, [r3, #0]
1a000ec6:	4313      	orrs	r3, r2
1a000ec8:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
1a000eca:	2300      	movs	r3, #0
1a000ecc:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
1a000ece:	f000 fff3 	bl	1a001eb8 <xTaskResumeAll>
		if( pvReturn == NULL )
1a000ed2:	2e00      	cmp	r6, #0
1a000ed4:	d18e      	bne.n	1a000df4 <pvPortMalloc+0x20>
1a000ed6:	e78b      	b.n	1a000df0 <pvPortMalloc+0x1c>
}
1a000ed8:	4630      	mov	r0, r6
1a000eda:	bd70      	pop	{r4, r5, r6, pc}
1a000edc:	100002ec 	.word	0x100002ec
1a000ee0:	100022f0 	.word	0x100022f0
1a000ee4:	100022f4 	.word	0x100022f4
1a000ee8:	100022fc 	.word	0x100022fc
1a000eec:	100022f8 	.word	0x100022f8

1a000ef0 <vPortFree>:
	if( pv != NULL )
1a000ef0:	b380      	cbz	r0, 1a000f54 <vPortFree+0x64>
{
1a000ef2:	b538      	push	{r3, r4, r5, lr}
1a000ef4:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
1a000ef6:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a000efa:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a000efe:	4916      	ldr	r1, [pc, #88]	; (1a000f58 <vPortFree+0x68>)
1a000f00:	6809      	ldr	r1, [r1, #0]
1a000f02:	420a      	tst	r2, r1
1a000f04:	d108      	bne.n	1a000f18 <vPortFree+0x28>
1a000f06:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f0a:	f383 8811 	msr	BASEPRI, r3
1a000f0e:	f3bf 8f6f 	isb	sy
1a000f12:	f3bf 8f4f 	dsb	sy
1a000f16:	e7fe      	b.n	1a000f16 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
1a000f18:	f850 0c08 	ldr.w	r0, [r0, #-8]
1a000f1c:	b140      	cbz	r0, 1a000f30 <vPortFree+0x40>
1a000f1e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f22:	f383 8811 	msr	BASEPRI, r3
1a000f26:	f3bf 8f6f 	isb	sy
1a000f2a:	f3bf 8f4f 	dsb	sy
1a000f2e:	e7fe      	b.n	1a000f2e <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a000f30:	ea22 0201 	bic.w	r2, r2, r1
1a000f34:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
1a000f38:	f000 ff1c 	bl	1a001d74 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
1a000f3c:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a000f40:	4a06      	ldr	r2, [pc, #24]	; (1a000f5c <vPortFree+0x6c>)
1a000f42:	6813      	ldr	r3, [r2, #0]
1a000f44:	440b      	add	r3, r1
1a000f46:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a000f48:	4628      	mov	r0, r5
1a000f4a:	f7ff ff17 	bl	1a000d7c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
1a000f4e:	f000 ffb3 	bl	1a001eb8 <xTaskResumeAll>
}
1a000f52:	bd38      	pop	{r3, r4, r5, pc}
1a000f54:	4770      	bx	lr
1a000f56:	bf00      	nop
1a000f58:	100022f0 	.word	0x100022f0
1a000f5c:	100022f4 	.word	0x100022f4

1a000f60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a000f60:	b510      	push	{r4, lr}
1a000f62:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000f64:	f001 fc76 	bl	1a002854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a000f68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000f6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000f6c:	429a      	cmp	r2, r3
1a000f6e:	d004      	beq.n	1a000f7a <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a000f70:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000f72:	f001 fc91 	bl	1a002898 <vPortExitCritical>

	return xReturn;
}
1a000f76:	4620      	mov	r0, r4
1a000f78:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000f7a:	2401      	movs	r4, #1
1a000f7c:	e7f9      	b.n	1a000f72 <prvIsQueueFull+0x12>

1a000f7e <prvIsQueueEmpty>:
{
1a000f7e:	b510      	push	{r4, lr}
1a000f80:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000f82:	f001 fc67 	bl	1a002854 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a000f86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000f88:	b123      	cbz	r3, 1a000f94 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a000f8a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a000f8c:	f001 fc84 	bl	1a002898 <vPortExitCritical>
}
1a000f90:	4620      	mov	r0, r4
1a000f92:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000f94:	2401      	movs	r4, #1
1a000f96:	e7f9      	b.n	1a000f8c <prvIsQueueEmpty+0xe>

1a000f98 <prvCopyDataToQueue>:
{
1a000f98:	b570      	push	{r4, r5, r6, lr}
1a000f9a:	4604      	mov	r4, r0
1a000f9c:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000f9e:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a000fa0:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000fa2:	b95a      	cbnz	r2, 1a000fbc <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000fa4:	6803      	ldr	r3, [r0, #0]
1a000fa6:	b11b      	cbz	r3, 1a000fb0 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a000fa8:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a000faa:	3501      	adds	r5, #1
1a000fac:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a000fae:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a000fb0:	6840      	ldr	r0, [r0, #4]
1a000fb2:	f001 f93b 	bl	1a00222c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a000fb6:	2300      	movs	r3, #0
1a000fb8:	6063      	str	r3, [r4, #4]
1a000fba:	e7f6      	b.n	1a000faa <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a000fbc:	b96e      	cbnz	r6, 1a000fda <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a000fbe:	6880      	ldr	r0, [r0, #8]
1a000fc0:	f003 fbb4 	bl	1a00472c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a000fc4:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000fc6:	68a3      	ldr	r3, [r4, #8]
1a000fc8:	4413      	add	r3, r2
1a000fca:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000fcc:	6862      	ldr	r2, [r4, #4]
1a000fce:	4293      	cmp	r3, r2
1a000fd0:	d319      	bcc.n	1a001006 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a000fd2:	6823      	ldr	r3, [r4, #0]
1a000fd4:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a000fd6:	2000      	movs	r0, #0
1a000fd8:	e7e7      	b.n	1a000faa <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000fda:	68c0      	ldr	r0, [r0, #12]
1a000fdc:	f003 fba6 	bl	1a00472c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a000fe0:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000fe2:	4252      	negs	r2, r2
1a000fe4:	68e3      	ldr	r3, [r4, #12]
1a000fe6:	4413      	add	r3, r2
1a000fe8:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000fea:	6821      	ldr	r1, [r4, #0]
1a000fec:	428b      	cmp	r3, r1
1a000fee:	d202      	bcs.n	1a000ff6 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a000ff0:	6863      	ldr	r3, [r4, #4]
1a000ff2:	441a      	add	r2, r3
1a000ff4:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a000ff6:	2e02      	cmp	r6, #2
1a000ff8:	d001      	beq.n	1a000ffe <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a000ffa:	2000      	movs	r0, #0
1a000ffc:	e7d5      	b.n	1a000faa <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000ffe:	b125      	cbz	r5, 1a00100a <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a001000:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a001002:	2000      	movs	r0, #0
1a001004:	e7d1      	b.n	1a000faa <prvCopyDataToQueue+0x12>
1a001006:	2000      	movs	r0, #0
1a001008:	e7cf      	b.n	1a000faa <prvCopyDataToQueue+0x12>
1a00100a:	2000      	movs	r0, #0
1a00100c:	e7cd      	b.n	1a000faa <prvCopyDataToQueue+0x12>

1a00100e <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a00100e:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a001010:	b172      	cbz	r2, 1a001030 <prvCopyDataFromQueue+0x22>
{
1a001012:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a001014:	68c3      	ldr	r3, [r0, #12]
1a001016:	4413      	add	r3, r2
1a001018:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a00101a:	6844      	ldr	r4, [r0, #4]
1a00101c:	42a3      	cmp	r3, r4
1a00101e:	d301      	bcc.n	1a001024 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a001020:	6803      	ldr	r3, [r0, #0]
1a001022:	60c3      	str	r3, [r0, #12]
1a001024:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a001026:	68c1      	ldr	r1, [r0, #12]
1a001028:	4620      	mov	r0, r4
1a00102a:	f003 fb7f 	bl	1a00472c <memcpy>
}
1a00102e:	bd10      	pop	{r4, pc}
1a001030:	4770      	bx	lr

1a001032 <prvUnlockQueue>:
{
1a001032:	b538      	push	{r3, r4, r5, lr}
1a001034:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a001036:	f001 fc0d 	bl	1a002854 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a00103a:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a00103e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a001040:	e003      	b.n	1a00104a <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a001042:	f001 f8dd 	bl	1a002200 <vTaskMissedYield>
			--cTxLock;
1a001046:	3c01      	subs	r4, #1
1a001048:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a00104a:	2c00      	cmp	r4, #0
1a00104c:	dd08      	ble.n	1a001060 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a00104e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a001050:	b133      	cbz	r3, 1a001060 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001052:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a001056:	f001 f841 	bl	1a0020dc <xTaskRemoveFromEventList>
1a00105a:	2800      	cmp	r0, #0
1a00105c:	d0f3      	beq.n	1a001046 <prvUnlockQueue+0x14>
1a00105e:	e7f0      	b.n	1a001042 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a001060:	23ff      	movs	r3, #255	; 0xff
1a001062:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a001066:	f001 fc17 	bl	1a002898 <vPortExitCritical>
	taskENTER_CRITICAL();
1a00106a:	f001 fbf3 	bl	1a002854 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a00106e:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a001072:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a001074:	e003      	b.n	1a00107e <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a001076:	f001 f8c3 	bl	1a002200 <vTaskMissedYield>
				--cRxLock;
1a00107a:	3c01      	subs	r4, #1
1a00107c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a00107e:	2c00      	cmp	r4, #0
1a001080:	dd08      	ble.n	1a001094 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001082:	692b      	ldr	r3, [r5, #16]
1a001084:	b133      	cbz	r3, 1a001094 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001086:	f105 0010 	add.w	r0, r5, #16
1a00108a:	f001 f827 	bl	1a0020dc <xTaskRemoveFromEventList>
1a00108e:	2800      	cmp	r0, #0
1a001090:	d0f3      	beq.n	1a00107a <prvUnlockQueue+0x48>
1a001092:	e7f0      	b.n	1a001076 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a001094:	23ff      	movs	r3, #255	; 0xff
1a001096:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a00109a:	f001 fbfd 	bl	1a002898 <vPortExitCritical>
}
1a00109e:	bd38      	pop	{r3, r4, r5, pc}

1a0010a0 <xQueueGenericReset>:
{
1a0010a0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a0010a2:	b940      	cbnz	r0, 1a0010b6 <xQueueGenericReset+0x16>
1a0010a4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010a8:	f383 8811 	msr	BASEPRI, r3
1a0010ac:	f3bf 8f6f 	isb	sy
1a0010b0:	f3bf 8f4f 	dsb	sy
1a0010b4:	e7fe      	b.n	1a0010b4 <xQueueGenericReset+0x14>
1a0010b6:	4604      	mov	r4, r0
1a0010b8:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a0010ba:	f001 fbcb 	bl	1a002854 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a0010be:	6821      	ldr	r1, [r4, #0]
1a0010c0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0010c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0010c4:	fb03 1002 	mla	r0, r3, r2, r1
1a0010c8:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a0010ca:	2000      	movs	r0, #0
1a0010cc:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a0010ce:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a0010d0:	3a01      	subs	r2, #1
1a0010d2:	fb02 1303 	mla	r3, r2, r3, r1
1a0010d6:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a0010d8:	23ff      	movs	r3, #255	; 0xff
1a0010da:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a0010de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a0010e2:	b9a5      	cbnz	r5, 1a00110e <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0010e4:	6923      	ldr	r3, [r4, #16]
1a0010e6:	b91b      	cbnz	r3, 1a0010f0 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a0010e8:	f001 fbd6 	bl	1a002898 <vPortExitCritical>
}
1a0010ec:	2001      	movs	r0, #1
1a0010ee:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0010f0:	f104 0010 	add.w	r0, r4, #16
1a0010f4:	f000 fff2 	bl	1a0020dc <xTaskRemoveFromEventList>
1a0010f8:	2800      	cmp	r0, #0
1a0010fa:	d0f5      	beq.n	1a0010e8 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a0010fc:	4b08      	ldr	r3, [pc, #32]	; (1a001120 <xQueueGenericReset+0x80>)
1a0010fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001102:	601a      	str	r2, [r3, #0]
1a001104:	f3bf 8f4f 	dsb	sy
1a001108:	f3bf 8f6f 	isb	sy
1a00110c:	e7ec      	b.n	1a0010e8 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a00110e:	f104 0010 	add.w	r0, r4, #16
1a001112:	f000 faea 	bl	1a0016ea <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a001116:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00111a:	f000 fae6 	bl	1a0016ea <vListInitialise>
1a00111e:	e7e3      	b.n	1a0010e8 <xQueueGenericReset+0x48>
1a001120:	e000ed04 	.word	0xe000ed04

1a001124 <prvInitialiseNewQueue>:
{
1a001124:	b538      	push	{r3, r4, r5, lr}
1a001126:	461d      	mov	r5, r3
1a001128:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a00112a:	460b      	mov	r3, r1
1a00112c:	b149      	cbz	r1, 1a001142 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a00112e:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a001130:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a001132:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a001134:	2101      	movs	r1, #1
1a001136:	4620      	mov	r0, r4
1a001138:	f7ff ffb2 	bl	1a0010a0 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a00113c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a001140:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a001142:	6024      	str	r4, [r4, #0]
1a001144:	e7f4      	b.n	1a001130 <prvInitialiseNewQueue+0xc>

1a001146 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a001146:	b940      	cbnz	r0, 1a00115a <xQueueGenericCreateStatic+0x14>
1a001148:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00114c:	f383 8811 	msr	BASEPRI, r3
1a001150:	f3bf 8f6f 	isb	sy
1a001154:	f3bf 8f4f 	dsb	sy
1a001158:	e7fe      	b.n	1a001158 <xQueueGenericCreateStatic+0x12>
	{
1a00115a:	b510      	push	{r4, lr}
1a00115c:	b084      	sub	sp, #16
1a00115e:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a001160:	b153      	cbz	r3, 1a001178 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a001162:	b192      	cbz	r2, 1a00118a <xQueueGenericCreateStatic+0x44>
1a001164:	b989      	cbnz	r1, 1a00118a <xQueueGenericCreateStatic+0x44>
1a001166:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00116a:	f383 8811 	msr	BASEPRI, r3
1a00116e:	f3bf 8f6f 	isb	sy
1a001172:	f3bf 8f4f 	dsb	sy
1a001176:	e7fe      	b.n	1a001176 <xQueueGenericCreateStatic+0x30>
1a001178:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00117c:	f383 8811 	msr	BASEPRI, r3
1a001180:	f3bf 8f6f 	isb	sy
1a001184:	f3bf 8f4f 	dsb	sy
1a001188:	e7fe      	b.n	1a001188 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a00118a:	b94a      	cbnz	r2, 1a0011a0 <xQueueGenericCreateStatic+0x5a>
1a00118c:	b141      	cbz	r1, 1a0011a0 <xQueueGenericCreateStatic+0x5a>
1a00118e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001192:	f383 8811 	msr	BASEPRI, r3
1a001196:	f3bf 8f6f 	isb	sy
1a00119a:	f3bf 8f4f 	dsb	sy
1a00119e:	e7fe      	b.n	1a00119e <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a0011a0:	2050      	movs	r0, #80	; 0x50
1a0011a2:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a0011a4:	9803      	ldr	r0, [sp, #12]
1a0011a6:	2850      	cmp	r0, #80	; 0x50
1a0011a8:	d008      	beq.n	1a0011bc <xQueueGenericCreateStatic+0x76>
1a0011aa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0011ae:	f383 8811 	msr	BASEPRI, r3
1a0011b2:	f3bf 8f6f 	isb	sy
1a0011b6:	f3bf 8f4f 	dsb	sy
1a0011ba:	e7fe      	b.n	1a0011ba <xQueueGenericCreateStatic+0x74>
1a0011bc:	4620      	mov	r0, r4
1a0011be:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a0011c0:	2301      	movs	r3, #1
1a0011c2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a0011c6:	9400      	str	r4, [sp, #0]
1a0011c8:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a0011cc:	f7ff ffaa 	bl	1a001124 <prvInitialiseNewQueue>
	}
1a0011d0:	4620      	mov	r0, r4
1a0011d2:	b004      	add	sp, #16
1a0011d4:	bd10      	pop	{r4, pc}

1a0011d6 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a0011d6:	b940      	cbnz	r0, 1a0011ea <xQueueGenericCreate+0x14>
1a0011d8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0011dc:	f383 8811 	msr	BASEPRI, r3
1a0011e0:	f3bf 8f6f 	isb	sy
1a0011e4:	f3bf 8f4f 	dsb	sy
1a0011e8:	e7fe      	b.n	1a0011e8 <xQueueGenericCreate+0x12>
	{
1a0011ea:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0011ec:	b083      	sub	sp, #12
1a0011ee:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a0011f0:	b111      	cbz	r1, 1a0011f8 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0011f2:	fb01 f000 	mul.w	r0, r1, r0
1a0011f6:	e000      	b.n	1a0011fa <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a0011f8:	2000      	movs	r0, #0
1a0011fa:	4617      	mov	r7, r2
1a0011fc:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a0011fe:	3050      	adds	r0, #80	; 0x50
1a001200:	f7ff fde8 	bl	1a000dd4 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a001204:	4605      	mov	r5, r0
1a001206:	b150      	cbz	r0, 1a00121e <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a001208:	2300      	movs	r3, #0
1a00120a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a00120e:	9000      	str	r0, [sp, #0]
1a001210:	463b      	mov	r3, r7
1a001212:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a001216:	4621      	mov	r1, r4
1a001218:	4630      	mov	r0, r6
1a00121a:	f7ff ff83 	bl	1a001124 <prvInitialiseNewQueue>
	}
1a00121e:	4628      	mov	r0, r5
1a001220:	b003      	add	sp, #12
1a001222:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a001224 <xQueueGenericSend>:
{
1a001224:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001226:	b085      	sub	sp, #20
1a001228:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a00122a:	b160      	cbz	r0, 1a001246 <xQueueGenericSend+0x22>
1a00122c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00122e:	b999      	cbnz	r1, 1a001258 <xQueueGenericSend+0x34>
1a001230:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a001232:	b18a      	cbz	r2, 1a001258 <xQueueGenericSend+0x34>
1a001234:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001238:	f383 8811 	msr	BASEPRI, r3
1a00123c:	f3bf 8f6f 	isb	sy
1a001240:	f3bf 8f4f 	dsb	sy
1a001244:	e7fe      	b.n	1a001244 <xQueueGenericSend+0x20>
1a001246:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00124a:	f383 8811 	msr	BASEPRI, r3
1a00124e:	f3bf 8f6f 	isb	sy
1a001252:	f3bf 8f4f 	dsb	sy
1a001256:	e7fe      	b.n	1a001256 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a001258:	2b02      	cmp	r3, #2
1a00125a:	d10b      	bne.n	1a001274 <xQueueGenericSend+0x50>
1a00125c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a00125e:	2a01      	cmp	r2, #1
1a001260:	d008      	beq.n	1a001274 <xQueueGenericSend+0x50>
1a001262:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001266:	f383 8811 	msr	BASEPRI, r3
1a00126a:	f3bf 8f6f 	isb	sy
1a00126e:	f3bf 8f4f 	dsb	sy
1a001272:	e7fe      	b.n	1a001272 <xQueueGenericSend+0x4e>
1a001274:	461e      	mov	r6, r3
1a001276:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001278:	f000 ffc8 	bl	1a00220c <xTaskGetSchedulerState>
1a00127c:	b950      	cbnz	r0, 1a001294 <xQueueGenericSend+0x70>
1a00127e:	9b01      	ldr	r3, [sp, #4]
1a001280:	b153      	cbz	r3, 1a001298 <xQueueGenericSend+0x74>
1a001282:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001286:	f383 8811 	msr	BASEPRI, r3
1a00128a:	f3bf 8f6f 	isb	sy
1a00128e:	f3bf 8f4f 	dsb	sy
1a001292:	e7fe      	b.n	1a001292 <xQueueGenericSend+0x6e>
1a001294:	2500      	movs	r5, #0
1a001296:	e03a      	b.n	1a00130e <xQueueGenericSend+0xea>
1a001298:	2500      	movs	r5, #0
1a00129a:	e038      	b.n	1a00130e <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a00129c:	4632      	mov	r2, r6
1a00129e:	4639      	mov	r1, r7
1a0012a0:	4620      	mov	r0, r4
1a0012a2:	f7ff fe79 	bl	1a000f98 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0012a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0012a8:	b94b      	cbnz	r3, 1a0012be <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a0012aa:	b1a8      	cbz	r0, 1a0012d8 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a0012ac:	4b3b      	ldr	r3, [pc, #236]	; (1a00139c <xQueueGenericSend+0x178>)
1a0012ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0012b2:	601a      	str	r2, [r3, #0]
1a0012b4:	f3bf 8f4f 	dsb	sy
1a0012b8:	f3bf 8f6f 	isb	sy
1a0012bc:	e00c      	b.n	1a0012d8 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0012be:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0012c2:	f000 ff0b 	bl	1a0020dc <xTaskRemoveFromEventList>
1a0012c6:	b138      	cbz	r0, 1a0012d8 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a0012c8:	4b34      	ldr	r3, [pc, #208]	; (1a00139c <xQueueGenericSend+0x178>)
1a0012ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0012ce:	601a      	str	r2, [r3, #0]
1a0012d0:	f3bf 8f4f 	dsb	sy
1a0012d4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a0012d8:	f001 fade 	bl	1a002898 <vPortExitCritical>
				return pdPASS;
1a0012dc:	2001      	movs	r0, #1
}
1a0012de:	b005      	add	sp, #20
1a0012e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a0012e2:	f001 fad9 	bl	1a002898 <vPortExitCritical>
					return errQUEUE_FULL;
1a0012e6:	2000      	movs	r0, #0
1a0012e8:	e7f9      	b.n	1a0012de <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a0012ea:	a802      	add	r0, sp, #8
1a0012ec:	f000 ff3c 	bl	1a002168 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a0012f0:	2501      	movs	r5, #1
1a0012f2:	e019      	b.n	1a001328 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a0012f4:	2300      	movs	r3, #0
1a0012f6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0012fa:	e021      	b.n	1a001340 <xQueueGenericSend+0x11c>
1a0012fc:	2300      	movs	r3, #0
1a0012fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001302:	e023      	b.n	1a00134c <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a001304:	4620      	mov	r0, r4
1a001306:	f7ff fe94 	bl	1a001032 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a00130a:	f000 fdd5 	bl	1a001eb8 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a00130e:	f001 faa1 	bl	1a002854 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a001312:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001314:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001316:	429a      	cmp	r2, r3
1a001318:	d3c0      	bcc.n	1a00129c <xQueueGenericSend+0x78>
1a00131a:	2e02      	cmp	r6, #2
1a00131c:	d0be      	beq.n	1a00129c <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a00131e:	9b01      	ldr	r3, [sp, #4]
1a001320:	2b00      	cmp	r3, #0
1a001322:	d0de      	beq.n	1a0012e2 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a001324:	2d00      	cmp	r5, #0
1a001326:	d0e0      	beq.n	1a0012ea <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a001328:	f001 fab6 	bl	1a002898 <vPortExitCritical>
		vTaskSuspendAll();
1a00132c:	f000 fd22 	bl	1a001d74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001330:	f001 fa90 	bl	1a002854 <vPortEnterCritical>
1a001334:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001338:	b25b      	sxtb	r3, r3
1a00133a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00133e:	d0d9      	beq.n	1a0012f4 <xQueueGenericSend+0xd0>
1a001340:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001344:	b25b      	sxtb	r3, r3
1a001346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00134a:	d0d7      	beq.n	1a0012fc <xQueueGenericSend+0xd8>
1a00134c:	f001 faa4 	bl	1a002898 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001350:	a901      	add	r1, sp, #4
1a001352:	a802      	add	r0, sp, #8
1a001354:	f000 ff14 	bl	1a002180 <xTaskCheckForTimeOut>
1a001358:	b9c8      	cbnz	r0, 1a00138e <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a00135a:	4620      	mov	r0, r4
1a00135c:	f7ff fe00 	bl	1a000f60 <prvIsQueueFull>
1a001360:	2800      	cmp	r0, #0
1a001362:	d0cf      	beq.n	1a001304 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a001364:	9901      	ldr	r1, [sp, #4]
1a001366:	f104 0010 	add.w	r0, r4, #16
1a00136a:	f000 fe83 	bl	1a002074 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a00136e:	4620      	mov	r0, r4
1a001370:	f7ff fe5f 	bl	1a001032 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001374:	f000 fda0 	bl	1a001eb8 <xTaskResumeAll>
1a001378:	2800      	cmp	r0, #0
1a00137a:	d1c8      	bne.n	1a00130e <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a00137c:	4b07      	ldr	r3, [pc, #28]	; (1a00139c <xQueueGenericSend+0x178>)
1a00137e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001382:	601a      	str	r2, [r3, #0]
1a001384:	f3bf 8f4f 	dsb	sy
1a001388:	f3bf 8f6f 	isb	sy
1a00138c:	e7bf      	b.n	1a00130e <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a00138e:	4620      	mov	r0, r4
1a001390:	f7ff fe4f 	bl	1a001032 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001394:	f000 fd90 	bl	1a001eb8 <xTaskResumeAll>
			return errQUEUE_FULL;
1a001398:	2000      	movs	r0, #0
1a00139a:	e7a0      	b.n	1a0012de <xQueueGenericSend+0xba>
1a00139c:	e000ed04 	.word	0xe000ed04

1a0013a0 <xQueueGenericSendFromISR>:
{
1a0013a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a0013a4:	b160      	cbz	r0, 1a0013c0 <xQueueGenericSendFromISR+0x20>
1a0013a6:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0013a8:	b999      	cbnz	r1, 1a0013d2 <xQueueGenericSendFromISR+0x32>
1a0013aa:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a0013ac:	b188      	cbz	r0, 1a0013d2 <xQueueGenericSendFromISR+0x32>
1a0013ae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013b2:	f383 8811 	msr	BASEPRI, r3
1a0013b6:	f3bf 8f6f 	isb	sy
1a0013ba:	f3bf 8f4f 	dsb	sy
1a0013be:	e7fe      	b.n	1a0013be <xQueueGenericSendFromISR+0x1e>
1a0013c0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013c4:	f383 8811 	msr	BASEPRI, r3
1a0013c8:	f3bf 8f6f 	isb	sy
1a0013cc:	f3bf 8f4f 	dsb	sy
1a0013d0:	e7fe      	b.n	1a0013d0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a0013d2:	2b02      	cmp	r3, #2
1a0013d4:	d10b      	bne.n	1a0013ee <xQueueGenericSendFromISR+0x4e>
1a0013d6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a0013d8:	2801      	cmp	r0, #1
1a0013da:	d008      	beq.n	1a0013ee <xQueueGenericSendFromISR+0x4e>
1a0013dc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013e0:	f383 8811 	msr	BASEPRI, r3
1a0013e4:	f3bf 8f6f 	isb	sy
1a0013e8:	f3bf 8f4f 	dsb	sy
1a0013ec:	e7fe      	b.n	1a0013ec <xQueueGenericSendFromISR+0x4c>
1a0013ee:	461f      	mov	r7, r3
1a0013f0:	4690      	mov	r8, r2
1a0013f2:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a0013f4:	f001 fb58 	bl	1a002aa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a0013f8:	f3ef 8611 	mrs	r6, BASEPRI
1a0013fc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001400:	f383 8811 	msr	BASEPRI, r3
1a001404:	f3bf 8f6f 	isb	sy
1a001408:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a00140c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a00140e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001410:	429a      	cmp	r2, r3
1a001412:	d303      	bcc.n	1a00141c <xQueueGenericSendFromISR+0x7c>
1a001414:	2f02      	cmp	r7, #2
1a001416:	d001      	beq.n	1a00141c <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a001418:	2000      	movs	r0, #0
1a00141a:	e00f      	b.n	1a00143c <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a00141c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a001420:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a001422:	463a      	mov	r2, r7
1a001424:	4649      	mov	r1, r9
1a001426:	4620      	mov	r0, r4
1a001428:	f7ff fdb6 	bl	1a000f98 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a00142c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001430:	d008      	beq.n	1a001444 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a001432:	1c6b      	adds	r3, r5, #1
1a001434:	b25b      	sxtb	r3, r3
1a001436:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a00143a:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a00143c:	f386 8811 	msr	BASEPRI, r6
}
1a001440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001444:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001446:	b15b      	cbz	r3, 1a001460 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001448:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00144c:	f000 fe46 	bl	1a0020dc <xTaskRemoveFromEventList>
1a001450:	b140      	cbz	r0, 1a001464 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a001452:	f1b8 0f00 	cmp.w	r8, #0
1a001456:	d007      	beq.n	1a001468 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a001458:	2001      	movs	r0, #1
1a00145a:	f8c8 0000 	str.w	r0, [r8]
1a00145e:	e7ed      	b.n	1a00143c <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a001460:	2001      	movs	r0, #1
1a001462:	e7eb      	b.n	1a00143c <xQueueGenericSendFromISR+0x9c>
1a001464:	2001      	movs	r0, #1
1a001466:	e7e9      	b.n	1a00143c <xQueueGenericSendFromISR+0x9c>
1a001468:	2001      	movs	r0, #1
1a00146a:	e7e7      	b.n	1a00143c <xQueueGenericSendFromISR+0x9c>

1a00146c <xQueueReceive>:
{
1a00146c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00146e:	b085      	sub	sp, #20
1a001470:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a001472:	b160      	cbz	r0, 1a00148e <xQueueReceive+0x22>
1a001474:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001476:	b999      	cbnz	r1, 1a0014a0 <xQueueReceive+0x34>
1a001478:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a00147a:	b18b      	cbz	r3, 1a0014a0 <xQueueReceive+0x34>
	__asm volatile
1a00147c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001480:	f383 8811 	msr	BASEPRI, r3
1a001484:	f3bf 8f6f 	isb	sy
1a001488:	f3bf 8f4f 	dsb	sy
1a00148c:	e7fe      	b.n	1a00148c <xQueueReceive+0x20>
1a00148e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001492:	f383 8811 	msr	BASEPRI, r3
1a001496:	f3bf 8f6f 	isb	sy
1a00149a:	f3bf 8f4f 	dsb	sy
1a00149e:	e7fe      	b.n	1a00149e <xQueueReceive+0x32>
1a0014a0:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a0014a2:	f000 feb3 	bl	1a00220c <xTaskGetSchedulerState>
1a0014a6:	b950      	cbnz	r0, 1a0014be <xQueueReceive+0x52>
1a0014a8:	9b01      	ldr	r3, [sp, #4]
1a0014aa:	b153      	cbz	r3, 1a0014c2 <xQueueReceive+0x56>
1a0014ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014b0:	f383 8811 	msr	BASEPRI, r3
1a0014b4:	f3bf 8f6f 	isb	sy
1a0014b8:	f3bf 8f4f 	dsb	sy
1a0014bc:	e7fe      	b.n	1a0014bc <xQueueReceive+0x50>
1a0014be:	2600      	movs	r6, #0
1a0014c0:	e03e      	b.n	1a001540 <xQueueReceive+0xd4>
1a0014c2:	2600      	movs	r6, #0
1a0014c4:	e03c      	b.n	1a001540 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a0014c6:	4639      	mov	r1, r7
1a0014c8:	4620      	mov	r0, r4
1a0014ca:	f7ff fda0 	bl	1a00100e <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a0014ce:	3d01      	subs	r5, #1
1a0014d0:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0014d2:	6923      	ldr	r3, [r4, #16]
1a0014d4:	b923      	cbnz	r3, 1a0014e0 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a0014d6:	f001 f9df 	bl	1a002898 <vPortExitCritical>
				return pdPASS;
1a0014da:	2001      	movs	r0, #1
}
1a0014dc:	b005      	add	sp, #20
1a0014de:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0014e0:	f104 0010 	add.w	r0, r4, #16
1a0014e4:	f000 fdfa 	bl	1a0020dc <xTaskRemoveFromEventList>
1a0014e8:	2800      	cmp	r0, #0
1a0014ea:	d0f4      	beq.n	1a0014d6 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a0014ec:	4b34      	ldr	r3, [pc, #208]	; (1a0015c0 <xQueueReceive+0x154>)
1a0014ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0014f2:	601a      	str	r2, [r3, #0]
1a0014f4:	f3bf 8f4f 	dsb	sy
1a0014f8:	f3bf 8f6f 	isb	sy
1a0014fc:	e7eb      	b.n	1a0014d6 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a0014fe:	f001 f9cb 	bl	1a002898 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a001502:	2000      	movs	r0, #0
1a001504:	e7ea      	b.n	1a0014dc <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001506:	a802      	add	r0, sp, #8
1a001508:	f000 fe2e 	bl	1a002168 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a00150c:	2601      	movs	r6, #1
1a00150e:	e021      	b.n	1a001554 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a001510:	2300      	movs	r3, #0
1a001512:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001516:	e029      	b.n	1a00156c <xQueueReceive+0x100>
1a001518:	2300      	movs	r3, #0
1a00151a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a00151e:	e02b      	b.n	1a001578 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a001520:	4620      	mov	r0, r4
1a001522:	f7ff fd86 	bl	1a001032 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001526:	f000 fcc7 	bl	1a001eb8 <xTaskResumeAll>
1a00152a:	e009      	b.n	1a001540 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a00152c:	4620      	mov	r0, r4
1a00152e:	f7ff fd80 	bl	1a001032 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001532:	f000 fcc1 	bl	1a001eb8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001536:	4620      	mov	r0, r4
1a001538:	f7ff fd21 	bl	1a000f7e <prvIsQueueEmpty>
1a00153c:	2800      	cmp	r0, #0
1a00153e:	d13d      	bne.n	1a0015bc <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a001540:	f001 f988 	bl	1a002854 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001544:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001546:	2d00      	cmp	r5, #0
1a001548:	d1bd      	bne.n	1a0014c6 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a00154a:	9b01      	ldr	r3, [sp, #4]
1a00154c:	2b00      	cmp	r3, #0
1a00154e:	d0d6      	beq.n	1a0014fe <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a001550:	2e00      	cmp	r6, #0
1a001552:	d0d8      	beq.n	1a001506 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a001554:	f001 f9a0 	bl	1a002898 <vPortExitCritical>
		vTaskSuspendAll();
1a001558:	f000 fc0c 	bl	1a001d74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a00155c:	f001 f97a 	bl	1a002854 <vPortEnterCritical>
1a001560:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001564:	b25b      	sxtb	r3, r3
1a001566:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00156a:	d0d1      	beq.n	1a001510 <xQueueReceive+0xa4>
1a00156c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001570:	b25b      	sxtb	r3, r3
1a001572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001576:	d0cf      	beq.n	1a001518 <xQueueReceive+0xac>
1a001578:	f001 f98e 	bl	1a002898 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a00157c:	a901      	add	r1, sp, #4
1a00157e:	a802      	add	r0, sp, #8
1a001580:	f000 fdfe 	bl	1a002180 <xTaskCheckForTimeOut>
1a001584:	2800      	cmp	r0, #0
1a001586:	d1d1      	bne.n	1a00152c <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001588:	4620      	mov	r0, r4
1a00158a:	f7ff fcf8 	bl	1a000f7e <prvIsQueueEmpty>
1a00158e:	2800      	cmp	r0, #0
1a001590:	d0c6      	beq.n	1a001520 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a001592:	9901      	ldr	r1, [sp, #4]
1a001594:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001598:	f000 fd6c 	bl	1a002074 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a00159c:	4620      	mov	r0, r4
1a00159e:	f7ff fd48 	bl	1a001032 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a0015a2:	f000 fc89 	bl	1a001eb8 <xTaskResumeAll>
1a0015a6:	2800      	cmp	r0, #0
1a0015a8:	d1ca      	bne.n	1a001540 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a0015aa:	4b05      	ldr	r3, [pc, #20]	; (1a0015c0 <xQueueReceive+0x154>)
1a0015ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0015b0:	601a      	str	r2, [r3, #0]
1a0015b2:	f3bf 8f4f 	dsb	sy
1a0015b6:	f3bf 8f6f 	isb	sy
1a0015ba:	e7c1      	b.n	1a001540 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a0015bc:	2000      	movs	r0, #0
1a0015be:	e78d      	b.n	1a0014dc <xQueueReceive+0x70>
1a0015c0:	e000ed04 	.word	0xe000ed04

1a0015c4 <xQueueReceiveFromISR>:
{
1a0015c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a0015c8:	b160      	cbz	r0, 1a0015e4 <xQueueReceiveFromISR+0x20>
1a0015ca:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0015cc:	b999      	cbnz	r1, 1a0015f6 <xQueueReceiveFromISR+0x32>
1a0015ce:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a0015d0:	b18b      	cbz	r3, 1a0015f6 <xQueueReceiveFromISR+0x32>
1a0015d2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015d6:	f383 8811 	msr	BASEPRI, r3
1a0015da:	f3bf 8f6f 	isb	sy
1a0015de:	f3bf 8f4f 	dsb	sy
1a0015e2:	e7fe      	b.n	1a0015e2 <xQueueReceiveFromISR+0x1e>
1a0015e4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015e8:	f383 8811 	msr	BASEPRI, r3
1a0015ec:	f3bf 8f6f 	isb	sy
1a0015f0:	f3bf 8f4f 	dsb	sy
1a0015f4:	e7fe      	b.n	1a0015f4 <xQueueReceiveFromISR+0x30>
1a0015f6:	4617      	mov	r7, r2
1a0015f8:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a0015fa:	f001 fa55 	bl	1a002aa8 <vPortValidateInterruptPriority>
	__asm volatile
1a0015fe:	f3ef 8611 	mrs	r6, BASEPRI
1a001602:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001606:	f383 8811 	msr	BASEPRI, r3
1a00160a:	f3bf 8f6f 	isb	sy
1a00160e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001612:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001616:	f1b8 0f00 	cmp.w	r8, #0
1a00161a:	d01d      	beq.n	1a001658 <xQueueReceiveFromISR+0x94>
			const int8_t cRxLock = pxQueue->cRxLock;
1a00161c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
1a001620:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
1a001622:	4649      	mov	r1, r9
1a001624:	4620      	mov	r0, r4
1a001626:	f7ff fcf2 	bl	1a00100e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a00162a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a00162e:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
1a001630:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001634:	d005      	beq.n	1a001642 <xQueueReceiveFromISR+0x7e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1a001636:	1c6b      	adds	r3, r5, #1
1a001638:	b25b      	sxtb	r3, r3
1a00163a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
1a00163e:	2001      	movs	r0, #1
1a001640:	e00b      	b.n	1a00165a <xQueueReceiveFromISR+0x96>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001642:	6923      	ldr	r3, [r4, #16]
1a001644:	b16b      	cbz	r3, 1a001662 <xQueueReceiveFromISR+0x9e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001646:	f104 0010 	add.w	r0, r4, #16
1a00164a:	f000 fd47 	bl	1a0020dc <xTaskRemoveFromEventList>
1a00164e:	b150      	cbz	r0, 1a001666 <xQueueReceiveFromISR+0xa2>
						if( pxHigherPriorityTaskWoken != NULL )
1a001650:	b15f      	cbz	r7, 1a00166a <xQueueReceiveFromISR+0xa6>
							*pxHigherPriorityTaskWoken = pdTRUE;
1a001652:	2001      	movs	r0, #1
1a001654:	6038      	str	r0, [r7, #0]
1a001656:	e000      	b.n	1a00165a <xQueueReceiveFromISR+0x96>
			xReturn = pdFAIL;
1a001658:	2000      	movs	r0, #0
	__asm volatile
1a00165a:	f386 8811 	msr	BASEPRI, r6
}
1a00165e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			xReturn = pdPASS;
1a001662:	2001      	movs	r0, #1
1a001664:	e7f9      	b.n	1a00165a <xQueueReceiveFromISR+0x96>
1a001666:	2001      	movs	r0, #1
1a001668:	e7f7      	b.n	1a00165a <xQueueReceiveFromISR+0x96>
1a00166a:	2001      	movs	r0, #1
1a00166c:	e7f5      	b.n	1a00165a <xQueueReceiveFromISR+0x96>
1a00166e:	Address 0x000000001a00166e is out of bounds.


1a001670 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001670:	2300      	movs	r3, #0
1a001672:	2b07      	cmp	r3, #7
1a001674:	d80c      	bhi.n	1a001690 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a001676:	4a07      	ldr	r2, [pc, #28]	; (1a001694 <vQueueAddToRegistry+0x24>)
1a001678:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a00167c:	b10a      	cbz	r2, 1a001682 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a00167e:	3301      	adds	r3, #1
1a001680:	e7f7      	b.n	1a001672 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a001682:	4a04      	ldr	r2, [pc, #16]	; (1a001694 <vQueueAddToRegistry+0x24>)
1a001684:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a001688:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a00168c:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a00168e:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a001690:	4770      	bx	lr
1a001692:	bf00      	nop
1a001694:	10002dec 	.word	0x10002dec

1a001698 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a001698:	b570      	push	{r4, r5, r6, lr}
1a00169a:	4604      	mov	r4, r0
1a00169c:	460d      	mov	r5, r1
1a00169e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a0016a0:	f001 f8d8 	bl	1a002854 <vPortEnterCritical>
1a0016a4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0016a8:	b25b      	sxtb	r3, r3
1a0016aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0016ae:	d00d      	beq.n	1a0016cc <vQueueWaitForMessageRestricted+0x34>
1a0016b0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0016b4:	b25b      	sxtb	r3, r3
1a0016b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0016ba:	d00b      	beq.n	1a0016d4 <vQueueWaitForMessageRestricted+0x3c>
1a0016bc:	f001 f8ec 	bl	1a002898 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a0016c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a0016c2:	b15b      	cbz	r3, 1a0016dc <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a0016c4:	4620      	mov	r0, r4
1a0016c6:	f7ff fcb4 	bl	1a001032 <prvUnlockQueue>
	}
1a0016ca:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a0016cc:	2300      	movs	r3, #0
1a0016ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0016d2:	e7ed      	b.n	1a0016b0 <vQueueWaitForMessageRestricted+0x18>
1a0016d4:	2300      	movs	r3, #0
1a0016d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0016da:	e7ef      	b.n	1a0016bc <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a0016dc:	4632      	mov	r2, r6
1a0016de:	4629      	mov	r1, r5
1a0016e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0016e4:	f000 fcde 	bl	1a0020a4 <vTaskPlaceOnEventListRestricted>
1a0016e8:	e7ec      	b.n	1a0016c4 <vQueueWaitForMessageRestricted+0x2c>

1a0016ea <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0016ea:	f100 0308 	add.w	r3, r0, #8
1a0016ee:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a0016f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0016f4:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0016f6:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0016f8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a0016fa:	2300      	movs	r3, #0
1a0016fc:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a0016fe:	4770      	bx	lr

1a001700 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a001700:	2300      	movs	r3, #0
1a001702:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a001704:	4770      	bx	lr

1a001706 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a001706:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a001708:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a00170a:	689a      	ldr	r2, [r3, #8]
1a00170c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a00170e:	689a      	ldr	r2, [r3, #8]
1a001710:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a001712:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001714:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001716:	6803      	ldr	r3, [r0, #0]
1a001718:	3301      	adds	r3, #1
1a00171a:	6003      	str	r3, [r0, #0]
}
1a00171c:	4770      	bx	lr

1a00171e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a00171e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a001720:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a001722:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001726:	d002      	beq.n	1a00172e <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001728:	f100 0208 	add.w	r2, r0, #8
1a00172c:	e002      	b.n	1a001734 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a00172e:	6902      	ldr	r2, [r0, #16]
1a001730:	e004      	b.n	1a00173c <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001732:	461a      	mov	r2, r3
1a001734:	6853      	ldr	r3, [r2, #4]
1a001736:	681c      	ldr	r4, [r3, #0]
1a001738:	42ac      	cmp	r4, r5
1a00173a:	d9fa      	bls.n	1a001732 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a00173c:	6853      	ldr	r3, [r2, #4]
1a00173e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a001740:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a001742:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a001744:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001746:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001748:	6803      	ldr	r3, [r0, #0]
1a00174a:	3301      	adds	r3, #1
1a00174c:	6003      	str	r3, [r0, #0]
}
1a00174e:	bc30      	pop	{r4, r5}
1a001750:	4770      	bx	lr

1a001752 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a001752:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a001754:	6842      	ldr	r2, [r0, #4]
1a001756:	6881      	ldr	r1, [r0, #8]
1a001758:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a00175a:	6882      	ldr	r2, [r0, #8]
1a00175c:	6841      	ldr	r1, [r0, #4]
1a00175e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a001760:	685a      	ldr	r2, [r3, #4]
1a001762:	4282      	cmp	r2, r0
1a001764:	d006      	beq.n	1a001774 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a001766:	2200      	movs	r2, #0
1a001768:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a00176a:	681a      	ldr	r2, [r3, #0]
1a00176c:	3a01      	subs	r2, #1
1a00176e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a001770:	6818      	ldr	r0, [r3, #0]
}
1a001772:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a001774:	6882      	ldr	r2, [r0, #8]
1a001776:	605a      	str	r2, [r3, #4]
1a001778:	e7f5      	b.n	1a001766 <uxListRemove+0x14>
1a00177a:	Address 0x000000001a00177a is out of bounds.


1a00177c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a00177c:	4b03      	ldr	r3, [pc, #12]	; (1a00178c <vApplicationGetIdleTaskMemory+0x10>)
1a00177e:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a001780:	4b03      	ldr	r3, [pc, #12]	; (1a001790 <vApplicationGetIdleTaskMemory+0x14>)
1a001782:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a001784:	235a      	movs	r3, #90	; 0x5a
1a001786:	6013      	str	r3, [r2, #0]
}
1a001788:	4770      	bx	lr
1a00178a:	bf00      	nop
1a00178c:	10002a0c 	.word	0x10002a0c
1a001790:	10002304 	.word	0x10002304

1a001794 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a001794:	4b03      	ldr	r3, [pc, #12]	; (1a0017a4 <vApplicationGetTimerTaskMemory+0x10>)
1a001796:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a001798:	4b03      	ldr	r3, [pc, #12]	; (1a0017a8 <vApplicationGetTimerTaskMemory+0x14>)
1a00179a:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a00179c:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a0017a0:	6013      	str	r3, [r2, #0]
1a0017a2:	4770      	bx	lr
1a0017a4:	10002a6c 	.word	0x10002a6c
1a0017a8:	1000246c 	.word	0x1000246c

1a0017ac <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a0017ac:	b510      	push	{r4, lr}
1a0017ae:	b082      	sub	sp, #8
1a0017b0:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a0017b2:	9001      	str	r0, [sp, #4]
1a0017b4:	2300      	movs	r3, #0
1a0017b6:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a0017b8:	f001 f84c 	bl	1a002854 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a0017bc:	9901      	ldr	r1, [sp, #4]
1a0017be:	4622      	mov	r2, r4
1a0017c0:	4804      	ldr	r0, [pc, #16]	; (1a0017d4 <vAssertCalled+0x28>)
1a0017c2:	f003 f86f 	bl	1a0048a4 <iprintf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a0017c6:	9b00      	ldr	r3, [sp, #0]
1a0017c8:	2b00      	cmp	r3, #0
1a0017ca:	d0fc      	beq.n	1a0017c6 <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a0017cc:	f001 f864 	bl	1a002898 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a0017d0:	b002      	add	sp, #8
1a0017d2:	bd10      	pop	{r4, pc}
1a0017d4:	1a0053c4 	.word	0x1a0053c4

1a0017d8 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a0017d8:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a0017da:	4804      	ldr	r0, [pc, #16]	; (1a0017ec <vApplicationMallocFailedHook+0x14>)
1a0017dc:	f003 f8d6 	bl	1a00498c <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a0017e0:	4903      	ldr	r1, [pc, #12]	; (1a0017f0 <vApplicationMallocFailedHook+0x18>)
1a0017e2:	202c      	movs	r0, #44	; 0x2c
1a0017e4:	f7ff ffe2 	bl	1a0017ac <vAssertCalled>
}
1a0017e8:	bd08      	pop	{r3, pc}
1a0017ea:	bf00      	nop
1a0017ec:	1a005350 	.word	0x1a005350
1a0017f0:	1a005374 	.word	0x1a005374

1a0017f4 <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a0017f4:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a0017f6:	4804      	ldr	r0, [pc, #16]	; (1a001808 <vApplicationStackOverflowHook+0x14>)
1a0017f8:	f003 f854 	bl	1a0048a4 <iprintf>
   vAssertCalled( __LINE__, __FILE__ );
1a0017fc:	4903      	ldr	r1, [pc, #12]	; (1a00180c <vApplicationStackOverflowHook+0x18>)
1a0017fe:	2050      	movs	r0, #80	; 0x50
1a001800:	f7ff ffd4 	bl	1a0017ac <vAssertCalled>
}
1a001804:	bd08      	pop	{r3, pc}
1a001806:	bf00      	nop
1a001808:	1a005394 	.word	0x1a005394
1a00180c:	1a005374 	.word	0x1a005374

1a001810 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001810:	4b08      	ldr	r3, [pc, #32]	; (1a001834 <prvResetNextTaskUnblockTime+0x24>)
1a001812:	681b      	ldr	r3, [r3, #0]
1a001814:	681b      	ldr	r3, [r3, #0]
1a001816:	b13b      	cbz	r3, 1a001828 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001818:	4b06      	ldr	r3, [pc, #24]	; (1a001834 <prvResetNextTaskUnblockTime+0x24>)
1a00181a:	681b      	ldr	r3, [r3, #0]
1a00181c:	68db      	ldr	r3, [r3, #12]
1a00181e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a001820:	685a      	ldr	r2, [r3, #4]
1a001822:	4b05      	ldr	r3, [pc, #20]	; (1a001838 <prvResetNextTaskUnblockTime+0x28>)
1a001824:	601a      	str	r2, [r3, #0]
	}
}
1a001826:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a001828:	4b03      	ldr	r3, [pc, #12]	; (1a001838 <prvResetNextTaskUnblockTime+0x28>)
1a00182a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00182e:	601a      	str	r2, [r3, #0]
1a001830:	4770      	bx	lr
1a001832:	bf00      	nop
1a001834:	10002ad0 	.word	0x10002ad0
1a001838:	10002ba4 	.word	0x10002ba4

1a00183c <prvInitialiseNewTask>:
{
1a00183c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001840:	4681      	mov	r9, r0
1a001842:	460d      	mov	r5, r1
1a001844:	4617      	mov	r7, r2
1a001846:	469a      	mov	sl, r3
1a001848:	9e08      	ldr	r6, [sp, #32]
1a00184a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a00184e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a001850:	0092      	lsls	r2, r2, #2
1a001852:	21a5      	movs	r1, #165	; 0xa5
1a001854:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a001856:	f002 ff74 	bl	1a004742 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a00185a:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a00185c:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a001860:	3a01      	subs	r2, #1
1a001862:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a001866:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a00186a:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a00186c:	2300      	movs	r3, #0
1a00186e:	2b0f      	cmp	r3, #15
1a001870:	d807      	bhi.n	1a001882 <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a001872:	5ce9      	ldrb	r1, [r5, r3]
1a001874:	18e2      	adds	r2, r4, r3
1a001876:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a00187a:	5cea      	ldrb	r2, [r5, r3]
1a00187c:	b10a      	cbz	r2, 1a001882 <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a00187e:	3301      	adds	r3, #1
1a001880:	e7f5      	b.n	1a00186e <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a001882:	2300      	movs	r3, #0
1a001884:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a001888:	2e06      	cmp	r6, #6
1a00188a:	d900      	bls.n	1a00188e <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a00188c:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a00188e:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a001890:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a001892:	2500      	movs	r5, #0
1a001894:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a001896:	1d20      	adds	r0, r4, #4
1a001898:	f7ff ff32 	bl	1a001700 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a00189c:	f104 0018 	add.w	r0, r4, #24
1a0018a0:	f7ff ff2e 	bl	1a001700 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a0018a4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0018a6:	f1c6 0607 	rsb	r6, r6, #7
1a0018aa:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a0018ac:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a0018ae:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a0018b0:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a0018b4:	4652      	mov	r2, sl
1a0018b6:	4649      	mov	r1, r9
1a0018b8:	4638      	mov	r0, r7
1a0018ba:	f000 ffa3 	bl	1a002804 <pxPortInitialiseStack>
1a0018be:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a0018c0:	f1b8 0f00 	cmp.w	r8, #0
1a0018c4:	d001      	beq.n	1a0018ca <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a0018c6:	f8c8 4000 	str.w	r4, [r8]
}
1a0018ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0018ce:	Address 0x000000001a0018ce is out of bounds.


1a0018d0 <prvInitialiseTaskLists>:
{
1a0018d0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a0018d2:	2400      	movs	r4, #0
1a0018d4:	e007      	b.n	1a0018e6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a0018d6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a0018da:	0093      	lsls	r3, r2, #2
1a0018dc:	480e      	ldr	r0, [pc, #56]	; (1a001918 <prvInitialiseTaskLists+0x48>)
1a0018de:	4418      	add	r0, r3
1a0018e0:	f7ff ff03 	bl	1a0016ea <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a0018e4:	3401      	adds	r4, #1
1a0018e6:	2c06      	cmp	r4, #6
1a0018e8:	d9f5      	bls.n	1a0018d6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a0018ea:	4d0c      	ldr	r5, [pc, #48]	; (1a00191c <prvInitialiseTaskLists+0x4c>)
1a0018ec:	4628      	mov	r0, r5
1a0018ee:	f7ff fefc 	bl	1a0016ea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a0018f2:	4c0b      	ldr	r4, [pc, #44]	; (1a001920 <prvInitialiseTaskLists+0x50>)
1a0018f4:	4620      	mov	r0, r4
1a0018f6:	f7ff fef8 	bl	1a0016ea <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a0018fa:	480a      	ldr	r0, [pc, #40]	; (1a001924 <prvInitialiseTaskLists+0x54>)
1a0018fc:	f7ff fef5 	bl	1a0016ea <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a001900:	4809      	ldr	r0, [pc, #36]	; (1a001928 <prvInitialiseTaskLists+0x58>)
1a001902:	f7ff fef2 	bl	1a0016ea <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a001906:	4809      	ldr	r0, [pc, #36]	; (1a00192c <prvInitialiseTaskLists+0x5c>)
1a001908:	f7ff feef 	bl	1a0016ea <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a00190c:	4b08      	ldr	r3, [pc, #32]	; (1a001930 <prvInitialiseTaskLists+0x60>)
1a00190e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a001910:	4b08      	ldr	r3, [pc, #32]	; (1a001934 <prvInitialiseTaskLists+0x64>)
1a001912:	601c      	str	r4, [r3, #0]
}
1a001914:	bd38      	pop	{r3, r4, r5, pc}
1a001916:	bf00      	nop
1a001918:	10002ad8 	.word	0x10002ad8
1a00191c:	10002b7c 	.word	0x10002b7c
1a001920:	10002b90 	.word	0x10002b90
1a001924:	10002bac 	.word	0x10002bac
1a001928:	10002bd8 	.word	0x10002bd8
1a00192c:	10002bc4 	.word	0x10002bc4
1a001930:	10002ad0 	.word	0x10002ad0
1a001934:	10002ad4 	.word	0x10002ad4

1a001938 <prvAddNewTaskToReadyList>:
{
1a001938:	b510      	push	{r4, lr}
1a00193a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a00193c:	f000 ff8a 	bl	1a002854 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a001940:	4a21      	ldr	r2, [pc, #132]	; (1a0019c8 <prvAddNewTaskToReadyList+0x90>)
1a001942:	6813      	ldr	r3, [r2, #0]
1a001944:	3301      	adds	r3, #1
1a001946:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a001948:	4b20      	ldr	r3, [pc, #128]	; (1a0019cc <prvAddNewTaskToReadyList+0x94>)
1a00194a:	681b      	ldr	r3, [r3, #0]
1a00194c:	b15b      	cbz	r3, 1a001966 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a00194e:	4b20      	ldr	r3, [pc, #128]	; (1a0019d0 <prvAddNewTaskToReadyList+0x98>)
1a001950:	681b      	ldr	r3, [r3, #0]
1a001952:	b96b      	cbnz	r3, 1a001970 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a001954:	4b1d      	ldr	r3, [pc, #116]	; (1a0019cc <prvAddNewTaskToReadyList+0x94>)
1a001956:	681b      	ldr	r3, [r3, #0]
1a001958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00195a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00195c:	429a      	cmp	r2, r3
1a00195e:	d807      	bhi.n	1a001970 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a001960:	4b1a      	ldr	r3, [pc, #104]	; (1a0019cc <prvAddNewTaskToReadyList+0x94>)
1a001962:	601c      	str	r4, [r3, #0]
1a001964:	e004      	b.n	1a001970 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a001966:	4b19      	ldr	r3, [pc, #100]	; (1a0019cc <prvAddNewTaskToReadyList+0x94>)
1a001968:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a00196a:	6813      	ldr	r3, [r2, #0]
1a00196c:	2b01      	cmp	r3, #1
1a00196e:	d027      	beq.n	1a0019c0 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a001970:	4a18      	ldr	r2, [pc, #96]	; (1a0019d4 <prvAddNewTaskToReadyList+0x9c>)
1a001972:	6813      	ldr	r3, [r2, #0]
1a001974:	3301      	adds	r3, #1
1a001976:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a001978:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a00197a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00197c:	2201      	movs	r2, #1
1a00197e:	409a      	lsls	r2, r3
1a001980:	4915      	ldr	r1, [pc, #84]	; (1a0019d8 <prvAddNewTaskToReadyList+0xa0>)
1a001982:	6808      	ldr	r0, [r1, #0]
1a001984:	4302      	orrs	r2, r0
1a001986:	600a      	str	r2, [r1, #0]
1a001988:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00198c:	009a      	lsls	r2, r3, #2
1a00198e:	1d21      	adds	r1, r4, #4
1a001990:	4812      	ldr	r0, [pc, #72]	; (1a0019dc <prvAddNewTaskToReadyList+0xa4>)
1a001992:	4410      	add	r0, r2
1a001994:	f7ff feb7 	bl	1a001706 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a001998:	f000 ff7e 	bl	1a002898 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a00199c:	4b0c      	ldr	r3, [pc, #48]	; (1a0019d0 <prvAddNewTaskToReadyList+0x98>)
1a00199e:	681b      	ldr	r3, [r3, #0]
1a0019a0:	b16b      	cbz	r3, 1a0019be <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a0019a2:	4b0a      	ldr	r3, [pc, #40]	; (1a0019cc <prvAddNewTaskToReadyList+0x94>)
1a0019a4:	681b      	ldr	r3, [r3, #0]
1a0019a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0019a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0019aa:	429a      	cmp	r2, r3
1a0019ac:	d207      	bcs.n	1a0019be <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a0019ae:	4b0c      	ldr	r3, [pc, #48]	; (1a0019e0 <prvAddNewTaskToReadyList+0xa8>)
1a0019b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0019b4:	601a      	str	r2, [r3, #0]
1a0019b6:	f3bf 8f4f 	dsb	sy
1a0019ba:	f3bf 8f6f 	isb	sy
}
1a0019be:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a0019c0:	f7ff ff86 	bl	1a0018d0 <prvInitialiseTaskLists>
1a0019c4:	e7d4      	b.n	1a001970 <prvAddNewTaskToReadyList+0x38>
1a0019c6:	bf00      	nop
1a0019c8:	10002b64 	.word	0x10002b64
1a0019cc:	10002acc 	.word	0x10002acc
1a0019d0:	10002bc0 	.word	0x10002bc0
1a0019d4:	10002b74 	.word	0x10002b74
1a0019d8:	10002b78 	.word	0x10002b78
1a0019dc:	10002ad8 	.word	0x10002ad8
1a0019e0:	e000ed04 	.word	0xe000ed04

1a0019e4 <prvDeleteTCB>:
	{
1a0019e4:	b510      	push	{r4, lr}
1a0019e6:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a0019e8:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a0019ec:	b933      	cbnz	r3, 1a0019fc <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a0019ee:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a0019f0:	f7ff fa7e 	bl	1a000ef0 <vPortFree>
				vPortFree( pxTCB );
1a0019f4:	4620      	mov	r0, r4
1a0019f6:	f7ff fa7b 	bl	1a000ef0 <vPortFree>
	}
1a0019fa:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a0019fc:	2b01      	cmp	r3, #1
1a0019fe:	d00a      	beq.n	1a001a16 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a001a00:	2b02      	cmp	r3, #2
1a001a02:	d0fa      	beq.n	1a0019fa <prvDeleteTCB+0x16>
	__asm volatile
1a001a04:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a08:	f383 8811 	msr	BASEPRI, r3
1a001a0c:	f3bf 8f6f 	isb	sy
1a001a10:	f3bf 8f4f 	dsb	sy
1a001a14:	e7fe      	b.n	1a001a14 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a001a16:	f7ff fa6b 	bl	1a000ef0 <vPortFree>
1a001a1a:	e7ee      	b.n	1a0019fa <prvDeleteTCB+0x16>

1a001a1c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001a1c:	4b0f      	ldr	r3, [pc, #60]	; (1a001a5c <prvCheckTasksWaitingTermination+0x40>)
1a001a1e:	681b      	ldr	r3, [r3, #0]
1a001a20:	b1d3      	cbz	r3, 1a001a58 <prvCheckTasksWaitingTermination+0x3c>
{
1a001a22:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a001a24:	f000 ff16 	bl	1a002854 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a001a28:	4b0d      	ldr	r3, [pc, #52]	; (1a001a60 <prvCheckTasksWaitingTermination+0x44>)
1a001a2a:	68db      	ldr	r3, [r3, #12]
1a001a2c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001a2e:	1d20      	adds	r0, r4, #4
1a001a30:	f7ff fe8f 	bl	1a001752 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a001a34:	4a0b      	ldr	r2, [pc, #44]	; (1a001a64 <prvCheckTasksWaitingTermination+0x48>)
1a001a36:	6813      	ldr	r3, [r2, #0]
1a001a38:	3b01      	subs	r3, #1
1a001a3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a001a3c:	4a07      	ldr	r2, [pc, #28]	; (1a001a5c <prvCheckTasksWaitingTermination+0x40>)
1a001a3e:	6813      	ldr	r3, [r2, #0]
1a001a40:	3b01      	subs	r3, #1
1a001a42:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a001a44:	f000 ff28 	bl	1a002898 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a001a48:	4620      	mov	r0, r4
1a001a4a:	f7ff ffcb 	bl	1a0019e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001a4e:	4b03      	ldr	r3, [pc, #12]	; (1a001a5c <prvCheckTasksWaitingTermination+0x40>)
1a001a50:	681b      	ldr	r3, [r3, #0]
1a001a52:	2b00      	cmp	r3, #0
1a001a54:	d1e6      	bne.n	1a001a24 <prvCheckTasksWaitingTermination+0x8>
}
1a001a56:	bd10      	pop	{r4, pc}
1a001a58:	4770      	bx	lr
1a001a5a:	bf00      	nop
1a001a5c:	10002b68 	.word	0x10002b68
1a001a60:	10002bd8 	.word	0x10002bd8
1a001a64:	10002b64 	.word	0x10002b64

1a001a68 <prvIdleTask>:
{
1a001a68:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a001a6a:	f7ff ffd7 	bl	1a001a1c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a001a6e:	4b06      	ldr	r3, [pc, #24]	; (1a001a88 <prvIdleTask+0x20>)
1a001a70:	681b      	ldr	r3, [r3, #0]
1a001a72:	2b01      	cmp	r3, #1
1a001a74:	d9f9      	bls.n	1a001a6a <prvIdleTask+0x2>
				taskYIELD();
1a001a76:	4b05      	ldr	r3, [pc, #20]	; (1a001a8c <prvIdleTask+0x24>)
1a001a78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001a7c:	601a      	str	r2, [r3, #0]
1a001a7e:	f3bf 8f4f 	dsb	sy
1a001a82:	f3bf 8f6f 	isb	sy
1a001a86:	e7f0      	b.n	1a001a6a <prvIdleTask+0x2>
1a001a88:	10002ad8 	.word	0x10002ad8
1a001a8c:	e000ed04 	.word	0xe000ed04

1a001a90 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a001a90:	b570      	push	{r4, r5, r6, lr}
1a001a92:	4604      	mov	r4, r0
1a001a94:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a001a96:	4b1d      	ldr	r3, [pc, #116]	; (1a001b0c <prvAddCurrentTaskToDelayedList+0x7c>)
1a001a98:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001a9a:	4b1d      	ldr	r3, [pc, #116]	; (1a001b10 <prvAddCurrentTaskToDelayedList+0x80>)
1a001a9c:	6818      	ldr	r0, [r3, #0]
1a001a9e:	3004      	adds	r0, #4
1a001aa0:	f7ff fe57 	bl	1a001752 <uxListRemove>
1a001aa4:	b950      	cbnz	r0, 1a001abc <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a001aa6:	4b1a      	ldr	r3, [pc, #104]	; (1a001b10 <prvAddCurrentTaskToDelayedList+0x80>)
1a001aa8:	681b      	ldr	r3, [r3, #0]
1a001aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001aac:	2301      	movs	r3, #1
1a001aae:	fa03 f202 	lsl.w	r2, r3, r2
1a001ab2:	4918      	ldr	r1, [pc, #96]	; (1a001b14 <prvAddCurrentTaskToDelayedList+0x84>)
1a001ab4:	680b      	ldr	r3, [r1, #0]
1a001ab6:	ea23 0302 	bic.w	r3, r3, r2
1a001aba:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001abc:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a001ac0:	d013      	beq.n	1a001aea <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a001ac2:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a001ac4:	4b12      	ldr	r3, [pc, #72]	; (1a001b10 <prvAddCurrentTaskToDelayedList+0x80>)
1a001ac6:	681b      	ldr	r3, [r3, #0]
1a001ac8:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a001aca:	42a5      	cmp	r5, r4
1a001acc:	d816      	bhi.n	1a001afc <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001ace:	4b12      	ldr	r3, [pc, #72]	; (1a001b18 <prvAddCurrentTaskToDelayedList+0x88>)
1a001ad0:	6818      	ldr	r0, [r3, #0]
1a001ad2:	4b0f      	ldr	r3, [pc, #60]	; (1a001b10 <prvAddCurrentTaskToDelayedList+0x80>)
1a001ad4:	6819      	ldr	r1, [r3, #0]
1a001ad6:	3104      	adds	r1, #4
1a001ad8:	f7ff fe21 	bl	1a00171e <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a001adc:	4b0f      	ldr	r3, [pc, #60]	; (1a001b1c <prvAddCurrentTaskToDelayedList+0x8c>)
1a001ade:	681b      	ldr	r3, [r3, #0]
1a001ae0:	42a3      	cmp	r3, r4
1a001ae2:	d912      	bls.n	1a001b0a <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a001ae4:	4b0d      	ldr	r3, [pc, #52]	; (1a001b1c <prvAddCurrentTaskToDelayedList+0x8c>)
1a001ae6:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a001ae8:	e00f      	b.n	1a001b0a <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001aea:	2e00      	cmp	r6, #0
1a001aec:	d0e9      	beq.n	1a001ac2 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001aee:	4b08      	ldr	r3, [pc, #32]	; (1a001b10 <prvAddCurrentTaskToDelayedList+0x80>)
1a001af0:	6819      	ldr	r1, [r3, #0]
1a001af2:	3104      	adds	r1, #4
1a001af4:	480a      	ldr	r0, [pc, #40]	; (1a001b20 <prvAddCurrentTaskToDelayedList+0x90>)
1a001af6:	f7ff fe06 	bl	1a001706 <vListInsertEnd>
1a001afa:	e006      	b.n	1a001b0a <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001afc:	4b09      	ldr	r3, [pc, #36]	; (1a001b24 <prvAddCurrentTaskToDelayedList+0x94>)
1a001afe:	6818      	ldr	r0, [r3, #0]
1a001b00:	4b03      	ldr	r3, [pc, #12]	; (1a001b10 <prvAddCurrentTaskToDelayedList+0x80>)
1a001b02:	6819      	ldr	r1, [r3, #0]
1a001b04:	3104      	adds	r1, #4
1a001b06:	f7ff fe0a 	bl	1a00171e <vListInsert>
}
1a001b0a:	bd70      	pop	{r4, r5, r6, pc}
1a001b0c:	10002bec 	.word	0x10002bec
1a001b10:	10002acc 	.word	0x10002acc
1a001b14:	10002b78 	.word	0x10002b78
1a001b18:	10002ad0 	.word	0x10002ad0
1a001b1c:	10002ba4 	.word	0x10002ba4
1a001b20:	10002bc4 	.word	0x10002bc4
1a001b24:	10002ad4 	.word	0x10002ad4

1a001b28 <xTaskCreateStatic>:
	{
1a001b28:	b570      	push	{r4, r5, r6, lr}
1a001b2a:	b086      	sub	sp, #24
1a001b2c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a001b2e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a001b30:	b945      	cbnz	r5, 1a001b44 <xTaskCreateStatic+0x1c>
1a001b32:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b36:	f383 8811 	msr	BASEPRI, r3
1a001b3a:	f3bf 8f6f 	isb	sy
1a001b3e:	f3bf 8f4f 	dsb	sy
1a001b42:	e7fe      	b.n	1a001b42 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a001b44:	b944      	cbnz	r4, 1a001b58 <xTaskCreateStatic+0x30>
1a001b46:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b4a:	f383 8811 	msr	BASEPRI, r3
1a001b4e:	f3bf 8f6f 	isb	sy
1a001b52:	f3bf 8f4f 	dsb	sy
1a001b56:	e7fe      	b.n	1a001b56 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a001b58:	2660      	movs	r6, #96	; 0x60
1a001b5a:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a001b5c:	9e04      	ldr	r6, [sp, #16]
1a001b5e:	2e60      	cmp	r6, #96	; 0x60
1a001b60:	d008      	beq.n	1a001b74 <xTaskCreateStatic+0x4c>
1a001b62:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b66:	f383 8811 	msr	BASEPRI, r3
1a001b6a:	f3bf 8f6f 	isb	sy
1a001b6e:	f3bf 8f4f 	dsb	sy
1a001b72:	e7fe      	b.n	1a001b72 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a001b74:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a001b76:	2502      	movs	r5, #2
1a001b78:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a001b7c:	2500      	movs	r5, #0
1a001b7e:	9503      	str	r5, [sp, #12]
1a001b80:	9402      	str	r4, [sp, #8]
1a001b82:	ad05      	add	r5, sp, #20
1a001b84:	9501      	str	r5, [sp, #4]
1a001b86:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a001b88:	9500      	str	r5, [sp, #0]
1a001b8a:	f7ff fe57 	bl	1a00183c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001b8e:	4620      	mov	r0, r4
1a001b90:	f7ff fed2 	bl	1a001938 <prvAddNewTaskToReadyList>
	}
1a001b94:	9805      	ldr	r0, [sp, #20]
1a001b96:	b006      	add	sp, #24
1a001b98:	bd70      	pop	{r4, r5, r6, pc}

1a001b9a <xTaskCreate>:
	{
1a001b9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001b9e:	b085      	sub	sp, #20
1a001ba0:	4607      	mov	r7, r0
1a001ba2:	4688      	mov	r8, r1
1a001ba4:	4615      	mov	r5, r2
1a001ba6:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001ba8:	0090      	lsls	r0, r2, #2
1a001baa:	f7ff f913 	bl	1a000dd4 <pvPortMalloc>
			if( pxStack != NULL )
1a001bae:	b308      	cbz	r0, 1a001bf4 <xTaskCreate+0x5a>
1a001bb0:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a001bb2:	2060      	movs	r0, #96	; 0x60
1a001bb4:	f7ff f90e 	bl	1a000dd4 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a001bb8:	4604      	mov	r4, r0
1a001bba:	b1b8      	cbz	r0, 1a001bec <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a001bbc:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a001bbe:	b1e4      	cbz	r4, 1a001bfa <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a001bc0:	2300      	movs	r3, #0
1a001bc2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a001bc6:	9303      	str	r3, [sp, #12]
1a001bc8:	9402      	str	r4, [sp, #8]
1a001bca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a001bcc:	9301      	str	r3, [sp, #4]
1a001bce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a001bd0:	9300      	str	r3, [sp, #0]
1a001bd2:	464b      	mov	r3, r9
1a001bd4:	462a      	mov	r2, r5
1a001bd6:	4641      	mov	r1, r8
1a001bd8:	4638      	mov	r0, r7
1a001bda:	f7ff fe2f 	bl	1a00183c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001bde:	4620      	mov	r0, r4
1a001be0:	f7ff feaa 	bl	1a001938 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a001be4:	2001      	movs	r0, #1
	}
1a001be6:	b005      	add	sp, #20
1a001be8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a001bec:	4630      	mov	r0, r6
1a001bee:	f7ff f97f 	bl	1a000ef0 <vPortFree>
1a001bf2:	e7e4      	b.n	1a001bbe <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001bf8:	e7f5      	b.n	1a001be6 <xTaskCreate+0x4c>
1a001bfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a001bfe:	e7f2      	b.n	1a001be6 <xTaskCreate+0x4c>

1a001c00 <vTaskDelete>:
	{
1a001c00:	b538      	push	{r3, r4, r5, lr}
1a001c02:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
1a001c04:	f000 fe26 	bl	1a002854 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1a001c08:	2c00      	cmp	r4, #0
1a001c0a:	d034      	beq.n	1a001c76 <vTaskDelete+0x76>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001c0c:	1d25      	adds	r5, r4, #4
1a001c0e:	4628      	mov	r0, r5
1a001c10:	f7ff fd9f 	bl	1a001752 <uxListRemove>
1a001c14:	b970      	cbnz	r0, 1a001c34 <vTaskDelete+0x34>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001c16:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001c18:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a001c1c:	008b      	lsls	r3, r1, #2
1a001c1e:	4926      	ldr	r1, [pc, #152]	; (1a001cb8 <vTaskDelete+0xb8>)
1a001c20:	58cb      	ldr	r3, [r1, r3]
1a001c22:	b93b      	cbnz	r3, 1a001c34 <vTaskDelete+0x34>
1a001c24:	2301      	movs	r3, #1
1a001c26:	fa03 f202 	lsl.w	r2, r3, r2
1a001c2a:	4924      	ldr	r1, [pc, #144]	; (1a001cbc <vTaskDelete+0xbc>)
1a001c2c:	680b      	ldr	r3, [r1, #0]
1a001c2e:	ea23 0302 	bic.w	r3, r3, r2
1a001c32:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001c34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1a001c36:	b11b      	cbz	r3, 1a001c40 <vTaskDelete+0x40>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001c38:	f104 0018 	add.w	r0, r4, #24
1a001c3c:	f7ff fd89 	bl	1a001752 <uxListRemove>
			uxTaskNumber++;
1a001c40:	4a1f      	ldr	r2, [pc, #124]	; (1a001cc0 <vTaskDelete+0xc0>)
1a001c42:	6813      	ldr	r3, [r2, #0]
1a001c44:	3301      	adds	r3, #1
1a001c46:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
1a001c48:	4b1e      	ldr	r3, [pc, #120]	; (1a001cc4 <vTaskDelete+0xc4>)
1a001c4a:	681b      	ldr	r3, [r3, #0]
1a001c4c:	42a3      	cmp	r3, r4
1a001c4e:	d015      	beq.n	1a001c7c <vTaskDelete+0x7c>
				--uxCurrentNumberOfTasks;
1a001c50:	4a1d      	ldr	r2, [pc, #116]	; (1a001cc8 <vTaskDelete+0xc8>)
1a001c52:	6813      	ldr	r3, [r2, #0]
1a001c54:	3b01      	subs	r3, #1
1a001c56:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
1a001c58:	4620      	mov	r0, r4
1a001c5a:	f7ff fec3 	bl	1a0019e4 <prvDeleteTCB>
				prvResetNextTaskUnblockTime();
1a001c5e:	f7ff fdd7 	bl	1a001810 <prvResetNextTaskUnblockTime>
		taskEXIT_CRITICAL();
1a001c62:	f000 fe19 	bl	1a002898 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
1a001c66:	4b19      	ldr	r3, [pc, #100]	; (1a001ccc <vTaskDelete+0xcc>)
1a001c68:	681b      	ldr	r3, [r3, #0]
1a001c6a:	b11b      	cbz	r3, 1a001c74 <vTaskDelete+0x74>
			if( pxTCB == pxCurrentTCB )
1a001c6c:	4b15      	ldr	r3, [pc, #84]	; (1a001cc4 <vTaskDelete+0xc4>)
1a001c6e:	681b      	ldr	r3, [r3, #0]
1a001c70:	42a3      	cmp	r3, r4
1a001c72:	d00c      	beq.n	1a001c8e <vTaskDelete+0x8e>
	}
1a001c74:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1a001c76:	4b13      	ldr	r3, [pc, #76]	; (1a001cc4 <vTaskDelete+0xc4>)
1a001c78:	681c      	ldr	r4, [r3, #0]
1a001c7a:	e7c7      	b.n	1a001c0c <vTaskDelete+0xc>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1a001c7c:	4629      	mov	r1, r5
1a001c7e:	4814      	ldr	r0, [pc, #80]	; (1a001cd0 <vTaskDelete+0xd0>)
1a001c80:	f7ff fd41 	bl	1a001706 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
1a001c84:	4a13      	ldr	r2, [pc, #76]	; (1a001cd4 <vTaskDelete+0xd4>)
1a001c86:	6813      	ldr	r3, [r2, #0]
1a001c88:	3301      	adds	r3, #1
1a001c8a:	6013      	str	r3, [r2, #0]
1a001c8c:	e7e9      	b.n	1a001c62 <vTaskDelete+0x62>
				configASSERT( uxSchedulerSuspended == 0 );
1a001c8e:	4b12      	ldr	r3, [pc, #72]	; (1a001cd8 <vTaskDelete+0xd8>)
1a001c90:	681b      	ldr	r3, [r3, #0]
1a001c92:	b143      	cbz	r3, 1a001ca6 <vTaskDelete+0xa6>
1a001c94:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c98:	f383 8811 	msr	BASEPRI, r3
1a001c9c:	f3bf 8f6f 	isb	sy
1a001ca0:	f3bf 8f4f 	dsb	sy
1a001ca4:	e7fe      	b.n	1a001ca4 <vTaskDelete+0xa4>
				portYIELD_WITHIN_API();
1a001ca6:	4b0d      	ldr	r3, [pc, #52]	; (1a001cdc <vTaskDelete+0xdc>)
1a001ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001cac:	601a      	str	r2, [r3, #0]
1a001cae:	f3bf 8f4f 	dsb	sy
1a001cb2:	f3bf 8f6f 	isb	sy
	}
1a001cb6:	e7dd      	b.n	1a001c74 <vTaskDelete+0x74>
1a001cb8:	10002ad8 	.word	0x10002ad8
1a001cbc:	10002b78 	.word	0x10002b78
1a001cc0:	10002b74 	.word	0x10002b74
1a001cc4:	10002acc 	.word	0x10002acc
1a001cc8:	10002b64 	.word	0x10002b64
1a001ccc:	10002bc0 	.word	0x10002bc0
1a001cd0:	10002bd8 	.word	0x10002bd8
1a001cd4:	10002b68 	.word	0x10002b68
1a001cd8:	10002b70 	.word	0x10002b70
1a001cdc:	e000ed04 	.word	0xe000ed04

1a001ce0 <vTaskStartScheduler>:
{
1a001ce0:	b510      	push	{r4, lr}
1a001ce2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a001ce4:	2400      	movs	r4, #0
1a001ce6:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a001ce8:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a001cea:	aa07      	add	r2, sp, #28
1a001cec:	a906      	add	r1, sp, #24
1a001cee:	a805      	add	r0, sp, #20
1a001cf0:	f7ff fd44 	bl	1a00177c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a001cf4:	9b05      	ldr	r3, [sp, #20]
1a001cf6:	9302      	str	r3, [sp, #8]
1a001cf8:	9b06      	ldr	r3, [sp, #24]
1a001cfa:	9301      	str	r3, [sp, #4]
1a001cfc:	9400      	str	r4, [sp, #0]
1a001cfe:	4623      	mov	r3, r4
1a001d00:	9a07      	ldr	r2, [sp, #28]
1a001d02:	4917      	ldr	r1, [pc, #92]	; (1a001d60 <vTaskStartScheduler+0x80>)
1a001d04:	4817      	ldr	r0, [pc, #92]	; (1a001d64 <vTaskStartScheduler+0x84>)
1a001d06:	f7ff ff0f 	bl	1a001b28 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a001d0a:	b140      	cbz	r0, 1a001d1e <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a001d0c:	f000 fb72 	bl	1a0023f4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a001d10:	2801      	cmp	r0, #1
1a001d12:	d006      	beq.n	1a001d22 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001d14:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001d18:	d018      	beq.n	1a001d4c <vTaskStartScheduler+0x6c>
}
1a001d1a:	b008      	add	sp, #32
1a001d1c:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a001d1e:	2000      	movs	r0, #0
1a001d20:	e7f6      	b.n	1a001d10 <vTaskStartScheduler+0x30>
1a001d22:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d26:	f383 8811 	msr	BASEPRI, r3
1a001d2a:	f3bf 8f6f 	isb	sy
1a001d2e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a001d32:	4b0d      	ldr	r3, [pc, #52]	; (1a001d68 <vTaskStartScheduler+0x88>)
1a001d34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001d38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a001d3a:	4b0c      	ldr	r3, [pc, #48]	; (1a001d6c <vTaskStartScheduler+0x8c>)
1a001d3c:	2201      	movs	r2, #1
1a001d3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a001d40:	4b0b      	ldr	r3, [pc, #44]	; (1a001d70 <vTaskStartScheduler+0x90>)
1a001d42:	2200      	movs	r2, #0
1a001d44:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a001d46:	f000 fe27 	bl	1a002998 <xPortStartScheduler>
1a001d4a:	e7e6      	b.n	1a001d1a <vTaskStartScheduler+0x3a>
1a001d4c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d50:	f383 8811 	msr	BASEPRI, r3
1a001d54:	f3bf 8f6f 	isb	sy
1a001d58:	f3bf 8f4f 	dsb	sy
1a001d5c:	e7fe      	b.n	1a001d5c <vTaskStartScheduler+0x7c>
1a001d5e:	bf00      	nop
1a001d60:	1a005404 	.word	0x1a005404
1a001d64:	1a001a69 	.word	0x1a001a69
1a001d68:	10002ba4 	.word	0x10002ba4
1a001d6c:	10002bc0 	.word	0x10002bc0
1a001d70:	10002bec 	.word	0x10002bec

1a001d74 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a001d74:	4a02      	ldr	r2, [pc, #8]	; (1a001d80 <vTaskSuspendAll+0xc>)
1a001d76:	6813      	ldr	r3, [r2, #0]
1a001d78:	3301      	adds	r3, #1
1a001d7a:	6013      	str	r3, [r2, #0]
}
1a001d7c:	4770      	bx	lr
1a001d7e:	bf00      	nop
1a001d80:	10002b70 	.word	0x10002b70

1a001d84 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a001d84:	4b01      	ldr	r3, [pc, #4]	; (1a001d8c <xTaskGetTickCount+0x8>)
1a001d86:	6818      	ldr	r0, [r3, #0]
}
1a001d88:	4770      	bx	lr
1a001d8a:	bf00      	nop
1a001d8c:	10002bec 	.word	0x10002bec

1a001d90 <xTaskGetTickCountFromISR>:
{
1a001d90:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a001d92:	f000 fe89 	bl	1a002aa8 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
1a001d96:	4b01      	ldr	r3, [pc, #4]	; (1a001d9c <xTaskGetTickCountFromISR+0xc>)
1a001d98:	6818      	ldr	r0, [r3, #0]
}
1a001d9a:	bd08      	pop	{r3, pc}
1a001d9c:	10002bec 	.word	0x10002bec

1a001da0 <xTaskIncrementTick>:
{
1a001da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001da2:	4b3a      	ldr	r3, [pc, #232]	; (1a001e8c <xTaskIncrementTick+0xec>)
1a001da4:	681b      	ldr	r3, [r3, #0]
1a001da6:	2b00      	cmp	r3, #0
1a001da8:	d164      	bne.n	1a001e74 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a001daa:	4b39      	ldr	r3, [pc, #228]	; (1a001e90 <xTaskIncrementTick+0xf0>)
1a001dac:	681d      	ldr	r5, [r3, #0]
1a001dae:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a001db0:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a001db2:	b9c5      	cbnz	r5, 1a001de6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a001db4:	4b37      	ldr	r3, [pc, #220]	; (1a001e94 <xTaskIncrementTick+0xf4>)
1a001db6:	681b      	ldr	r3, [r3, #0]
1a001db8:	681b      	ldr	r3, [r3, #0]
1a001dba:	b143      	cbz	r3, 1a001dce <xTaskIncrementTick+0x2e>
1a001dbc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001dc0:	f383 8811 	msr	BASEPRI, r3
1a001dc4:	f3bf 8f6f 	isb	sy
1a001dc8:	f3bf 8f4f 	dsb	sy
1a001dcc:	e7fe      	b.n	1a001dcc <xTaskIncrementTick+0x2c>
1a001dce:	4a31      	ldr	r2, [pc, #196]	; (1a001e94 <xTaskIncrementTick+0xf4>)
1a001dd0:	6811      	ldr	r1, [r2, #0]
1a001dd2:	4b31      	ldr	r3, [pc, #196]	; (1a001e98 <xTaskIncrementTick+0xf8>)
1a001dd4:	6818      	ldr	r0, [r3, #0]
1a001dd6:	6010      	str	r0, [r2, #0]
1a001dd8:	6019      	str	r1, [r3, #0]
1a001dda:	4a30      	ldr	r2, [pc, #192]	; (1a001e9c <xTaskIncrementTick+0xfc>)
1a001ddc:	6813      	ldr	r3, [r2, #0]
1a001dde:	3301      	adds	r3, #1
1a001de0:	6013      	str	r3, [r2, #0]
1a001de2:	f7ff fd15 	bl	1a001810 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a001de6:	4b2e      	ldr	r3, [pc, #184]	; (1a001ea0 <xTaskIncrementTick+0x100>)
1a001de8:	681b      	ldr	r3, [r3, #0]
1a001dea:	42ab      	cmp	r3, r5
1a001dec:	d938      	bls.n	1a001e60 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a001dee:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001df0:	4b2c      	ldr	r3, [pc, #176]	; (1a001ea4 <xTaskIncrementTick+0x104>)
1a001df2:	681b      	ldr	r3, [r3, #0]
1a001df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001df6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001dfa:	009a      	lsls	r2, r3, #2
1a001dfc:	4b2a      	ldr	r3, [pc, #168]	; (1a001ea8 <xTaskIncrementTick+0x108>)
1a001dfe:	589b      	ldr	r3, [r3, r2]
1a001e00:	2b01      	cmp	r3, #1
1a001e02:	d93c      	bls.n	1a001e7e <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a001e04:	2401      	movs	r4, #1
1a001e06:	e03a      	b.n	1a001e7e <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a001e08:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001e0a:	4b22      	ldr	r3, [pc, #136]	; (1a001e94 <xTaskIncrementTick+0xf4>)
1a001e0c:	681b      	ldr	r3, [r3, #0]
1a001e0e:	681b      	ldr	r3, [r3, #0]
1a001e10:	b343      	cbz	r3, 1a001e64 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001e12:	4b20      	ldr	r3, [pc, #128]	; (1a001e94 <xTaskIncrementTick+0xf4>)
1a001e14:	681b      	ldr	r3, [r3, #0]
1a001e16:	68db      	ldr	r3, [r3, #12]
1a001e18:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a001e1a:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a001e1c:	429d      	cmp	r5, r3
1a001e1e:	d326      	bcc.n	1a001e6e <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001e20:	1d37      	adds	r7, r6, #4
1a001e22:	4638      	mov	r0, r7
1a001e24:	f7ff fc95 	bl	1a001752 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001e28:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a001e2a:	b11b      	cbz	r3, 1a001e34 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001e2c:	f106 0018 	add.w	r0, r6, #24
1a001e30:	f7ff fc8f 	bl	1a001752 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001e34:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a001e36:	2201      	movs	r2, #1
1a001e38:	409a      	lsls	r2, r3
1a001e3a:	491c      	ldr	r1, [pc, #112]	; (1a001eac <xTaskIncrementTick+0x10c>)
1a001e3c:	6808      	ldr	r0, [r1, #0]
1a001e3e:	4302      	orrs	r2, r0
1a001e40:	600a      	str	r2, [r1, #0]
1a001e42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001e46:	009a      	lsls	r2, r3, #2
1a001e48:	4639      	mov	r1, r7
1a001e4a:	4817      	ldr	r0, [pc, #92]	; (1a001ea8 <xTaskIncrementTick+0x108>)
1a001e4c:	4410      	add	r0, r2
1a001e4e:	f7ff fc5a 	bl	1a001706 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001e52:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001e54:	4b13      	ldr	r3, [pc, #76]	; (1a001ea4 <xTaskIncrementTick+0x104>)
1a001e56:	681b      	ldr	r3, [r3, #0]
1a001e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001e5a:	429a      	cmp	r2, r3
1a001e5c:	d2d4      	bcs.n	1a001e08 <xTaskIncrementTick+0x68>
1a001e5e:	e7d4      	b.n	1a001e0a <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a001e60:	2400      	movs	r4, #0
1a001e62:	e7d2      	b.n	1a001e0a <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001e64:	4b0e      	ldr	r3, [pc, #56]	; (1a001ea0 <xTaskIncrementTick+0x100>)
1a001e66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001e6a:	601a      	str	r2, [r3, #0]
					break;
1a001e6c:	e7c0      	b.n	1a001df0 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a001e6e:	4a0c      	ldr	r2, [pc, #48]	; (1a001ea0 <xTaskIncrementTick+0x100>)
1a001e70:	6013      	str	r3, [r2, #0]
						break;
1a001e72:	e7bd      	b.n	1a001df0 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a001e74:	4a0e      	ldr	r2, [pc, #56]	; (1a001eb0 <xTaskIncrementTick+0x110>)
1a001e76:	6813      	ldr	r3, [r2, #0]
1a001e78:	3301      	adds	r3, #1
1a001e7a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a001e7c:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a001e7e:	4b0d      	ldr	r3, [pc, #52]	; (1a001eb4 <xTaskIncrementTick+0x114>)
1a001e80:	681b      	ldr	r3, [r3, #0]
1a001e82:	b103      	cbz	r3, 1a001e86 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a001e84:	2401      	movs	r4, #1
}
1a001e86:	4620      	mov	r0, r4
1a001e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001e8a:	bf00      	nop
1a001e8c:	10002b70 	.word	0x10002b70
1a001e90:	10002bec 	.word	0x10002bec
1a001e94:	10002ad0 	.word	0x10002ad0
1a001e98:	10002ad4 	.word	0x10002ad4
1a001e9c:	10002ba8 	.word	0x10002ba8
1a001ea0:	10002ba4 	.word	0x10002ba4
1a001ea4:	10002acc 	.word	0x10002acc
1a001ea8:	10002ad8 	.word	0x10002ad8
1a001eac:	10002b78 	.word	0x10002b78
1a001eb0:	10002b6c 	.word	0x10002b6c
1a001eb4:	10002bf0 	.word	0x10002bf0

1a001eb8 <xTaskResumeAll>:
{
1a001eb8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a001eba:	4b33      	ldr	r3, [pc, #204]	; (1a001f88 <xTaskResumeAll+0xd0>)
1a001ebc:	681b      	ldr	r3, [r3, #0]
1a001ebe:	b943      	cbnz	r3, 1a001ed2 <xTaskResumeAll+0x1a>
1a001ec0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ec4:	f383 8811 	msr	BASEPRI, r3
1a001ec8:	f3bf 8f6f 	isb	sy
1a001ecc:	f3bf 8f4f 	dsb	sy
1a001ed0:	e7fe      	b.n	1a001ed0 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a001ed2:	f000 fcbf 	bl	1a002854 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a001ed6:	4b2c      	ldr	r3, [pc, #176]	; (1a001f88 <xTaskResumeAll+0xd0>)
1a001ed8:	681a      	ldr	r2, [r3, #0]
1a001eda:	3a01      	subs	r2, #1
1a001edc:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001ede:	681b      	ldr	r3, [r3, #0]
1a001ee0:	2b00      	cmp	r3, #0
1a001ee2:	d14d      	bne.n	1a001f80 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a001ee4:	4b29      	ldr	r3, [pc, #164]	; (1a001f8c <xTaskResumeAll+0xd4>)
1a001ee6:	681b      	ldr	r3, [r3, #0]
1a001ee8:	b923      	cbnz	r3, 1a001ef4 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a001eea:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001eec:	f000 fcd4 	bl	1a002898 <vPortExitCritical>
}
1a001ef0:	4620      	mov	r0, r4
1a001ef2:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a001ef4:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a001ef6:	4b26      	ldr	r3, [pc, #152]	; (1a001f90 <xTaskResumeAll+0xd8>)
1a001ef8:	681b      	ldr	r3, [r3, #0]
1a001efa:	b31b      	cbz	r3, 1a001f44 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a001efc:	4b24      	ldr	r3, [pc, #144]	; (1a001f90 <xTaskResumeAll+0xd8>)
1a001efe:	68db      	ldr	r3, [r3, #12]
1a001f00:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001f02:	f104 0018 	add.w	r0, r4, #24
1a001f06:	f7ff fc24 	bl	1a001752 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001f0a:	1d25      	adds	r5, r4, #4
1a001f0c:	4628      	mov	r0, r5
1a001f0e:	f7ff fc20 	bl	1a001752 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001f12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001f14:	2201      	movs	r2, #1
1a001f16:	409a      	lsls	r2, r3
1a001f18:	491e      	ldr	r1, [pc, #120]	; (1a001f94 <xTaskResumeAll+0xdc>)
1a001f1a:	6808      	ldr	r0, [r1, #0]
1a001f1c:	4302      	orrs	r2, r0
1a001f1e:	600a      	str	r2, [r1, #0]
1a001f20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001f24:	009a      	lsls	r2, r3, #2
1a001f26:	4629      	mov	r1, r5
1a001f28:	481b      	ldr	r0, [pc, #108]	; (1a001f98 <xTaskResumeAll+0xe0>)
1a001f2a:	4410      	add	r0, r2
1a001f2c:	f7ff fbeb 	bl	1a001706 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001f30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001f32:	4b1a      	ldr	r3, [pc, #104]	; (1a001f9c <xTaskResumeAll+0xe4>)
1a001f34:	681b      	ldr	r3, [r3, #0]
1a001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001f38:	429a      	cmp	r2, r3
1a001f3a:	d3dc      	bcc.n	1a001ef6 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a001f3c:	4b18      	ldr	r3, [pc, #96]	; (1a001fa0 <xTaskResumeAll+0xe8>)
1a001f3e:	2201      	movs	r2, #1
1a001f40:	601a      	str	r2, [r3, #0]
1a001f42:	e7d8      	b.n	1a001ef6 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a001f44:	b10c      	cbz	r4, 1a001f4a <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a001f46:	f7ff fc63 	bl	1a001810 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a001f4a:	4b16      	ldr	r3, [pc, #88]	; (1a001fa4 <xTaskResumeAll+0xec>)
1a001f4c:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a001f4e:	b154      	cbz	r4, 1a001f66 <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a001f50:	f7ff ff26 	bl	1a001da0 <xTaskIncrementTick>
1a001f54:	b110      	cbz	r0, 1a001f5c <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a001f56:	4b12      	ldr	r3, [pc, #72]	; (1a001fa0 <xTaskResumeAll+0xe8>)
1a001f58:	2201      	movs	r2, #1
1a001f5a:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a001f5c:	3c01      	subs	r4, #1
1a001f5e:	d1f7      	bne.n	1a001f50 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a001f60:	4b10      	ldr	r3, [pc, #64]	; (1a001fa4 <xTaskResumeAll+0xec>)
1a001f62:	2200      	movs	r2, #0
1a001f64:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a001f66:	4b0e      	ldr	r3, [pc, #56]	; (1a001fa0 <xTaskResumeAll+0xe8>)
1a001f68:	681b      	ldr	r3, [r3, #0]
1a001f6a:	b15b      	cbz	r3, 1a001f84 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a001f6c:	4b0e      	ldr	r3, [pc, #56]	; (1a001fa8 <xTaskResumeAll+0xf0>)
1a001f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001f72:	601a      	str	r2, [r3, #0]
1a001f74:	f3bf 8f4f 	dsb	sy
1a001f78:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a001f7c:	2401      	movs	r4, #1
1a001f7e:	e7b5      	b.n	1a001eec <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a001f80:	2400      	movs	r4, #0
1a001f82:	e7b3      	b.n	1a001eec <xTaskResumeAll+0x34>
1a001f84:	2400      	movs	r4, #0
1a001f86:	e7b1      	b.n	1a001eec <xTaskResumeAll+0x34>
1a001f88:	10002b70 	.word	0x10002b70
1a001f8c:	10002b64 	.word	0x10002b64
1a001f90:	10002bac 	.word	0x10002bac
1a001f94:	10002b78 	.word	0x10002b78
1a001f98:	10002ad8 	.word	0x10002ad8
1a001f9c:	10002acc 	.word	0x10002acc
1a001fa0:	10002bf0 	.word	0x10002bf0
1a001fa4:	10002b6c 	.word	0x10002b6c
1a001fa8:	e000ed04 	.word	0xe000ed04

1a001fac <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a001fac:	4b2c      	ldr	r3, [pc, #176]	; (1a002060 <vTaskSwitchContext+0xb4>)
1a001fae:	681b      	ldr	r3, [r3, #0]
1a001fb0:	b11b      	cbz	r3, 1a001fba <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a001fb2:	4b2c      	ldr	r3, [pc, #176]	; (1a002064 <vTaskSwitchContext+0xb8>)
1a001fb4:	2201      	movs	r2, #1
1a001fb6:	601a      	str	r2, [r3, #0]
1a001fb8:	4770      	bx	lr
{
1a001fba:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a001fbc:	4b29      	ldr	r3, [pc, #164]	; (1a002064 <vTaskSwitchContext+0xb8>)
1a001fbe:	2200      	movs	r2, #0
1a001fc0:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a001fc2:	4b29      	ldr	r3, [pc, #164]	; (1a002068 <vTaskSwitchContext+0xbc>)
1a001fc4:	681b      	ldr	r3, [r3, #0]
1a001fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001fc8:	681a      	ldr	r2, [r3, #0]
1a001fca:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001fce:	d103      	bne.n	1a001fd8 <vTaskSwitchContext+0x2c>
1a001fd0:	685a      	ldr	r2, [r3, #4]
1a001fd2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001fd6:	d01b      	beq.n	1a002010 <vTaskSwitchContext+0x64>
1a001fd8:	4b23      	ldr	r3, [pc, #140]	; (1a002068 <vTaskSwitchContext+0xbc>)
1a001fda:	6818      	ldr	r0, [r3, #0]
1a001fdc:	6819      	ldr	r1, [r3, #0]
1a001fde:	3134      	adds	r1, #52	; 0x34
1a001fe0:	f7ff fc08 	bl	1a0017f4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001fe4:	4b21      	ldr	r3, [pc, #132]	; (1a00206c <vTaskSwitchContext+0xc0>)
1a001fe6:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a001fe8:	fab3 f383 	clz	r3, r3
1a001fec:	b2db      	uxtb	r3, r3
1a001fee:	f1c3 031f 	rsb	r3, r3, #31
1a001ff2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001ff6:	008a      	lsls	r2, r1, #2
1a001ff8:	491d      	ldr	r1, [pc, #116]	; (1a002070 <vTaskSwitchContext+0xc4>)
1a001ffa:	588a      	ldr	r2, [r1, r2]
1a001ffc:	b98a      	cbnz	r2, 1a002022 <vTaskSwitchContext+0x76>
	__asm volatile
1a001ffe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002002:	f383 8811 	msr	BASEPRI, r3
1a002006:	f3bf 8f6f 	isb	sy
1a00200a:	f3bf 8f4f 	dsb	sy
1a00200e:	e7fe      	b.n	1a00200e <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a002010:	689a      	ldr	r2, [r3, #8]
1a002012:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a002016:	d1df      	bne.n	1a001fd8 <vTaskSwitchContext+0x2c>
1a002018:	68db      	ldr	r3, [r3, #12]
1a00201a:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a00201e:	d1db      	bne.n	1a001fd8 <vTaskSwitchContext+0x2c>
1a002020:	e7e0      	b.n	1a001fe4 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a002022:	4813      	ldr	r0, [pc, #76]	; (1a002070 <vTaskSwitchContext+0xc4>)
1a002024:	009a      	lsls	r2, r3, #2
1a002026:	18d4      	adds	r4, r2, r3
1a002028:	00a1      	lsls	r1, r4, #2
1a00202a:	4401      	add	r1, r0
1a00202c:	684c      	ldr	r4, [r1, #4]
1a00202e:	6864      	ldr	r4, [r4, #4]
1a002030:	604c      	str	r4, [r1, #4]
1a002032:	441a      	add	r2, r3
1a002034:	0091      	lsls	r1, r2, #2
1a002036:	3108      	adds	r1, #8
1a002038:	4408      	add	r0, r1
1a00203a:	4284      	cmp	r4, r0
1a00203c:	d009      	beq.n	1a002052 <vTaskSwitchContext+0xa6>
1a00203e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002042:	009a      	lsls	r2, r3, #2
1a002044:	4b0a      	ldr	r3, [pc, #40]	; (1a002070 <vTaskSwitchContext+0xc4>)
1a002046:	4413      	add	r3, r2
1a002048:	685b      	ldr	r3, [r3, #4]
1a00204a:	68da      	ldr	r2, [r3, #12]
1a00204c:	4b06      	ldr	r3, [pc, #24]	; (1a002068 <vTaskSwitchContext+0xbc>)
1a00204e:	601a      	str	r2, [r3, #0]
}
1a002050:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a002052:	6861      	ldr	r1, [r4, #4]
1a002054:	4806      	ldr	r0, [pc, #24]	; (1a002070 <vTaskSwitchContext+0xc4>)
1a002056:	2214      	movs	r2, #20
1a002058:	fb02 0203 	mla	r2, r2, r3, r0
1a00205c:	6051      	str	r1, [r2, #4]
1a00205e:	e7ee      	b.n	1a00203e <vTaskSwitchContext+0x92>
1a002060:	10002b70 	.word	0x10002b70
1a002064:	10002bf0 	.word	0x10002bf0
1a002068:	10002acc 	.word	0x10002acc
1a00206c:	10002b78 	.word	0x10002b78
1a002070:	10002ad8 	.word	0x10002ad8

1a002074 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a002074:	b940      	cbnz	r0, 1a002088 <vTaskPlaceOnEventList+0x14>
1a002076:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00207a:	f383 8811 	msr	BASEPRI, r3
1a00207e:	f3bf 8f6f 	isb	sy
1a002082:	f3bf 8f4f 	dsb	sy
1a002086:	e7fe      	b.n	1a002086 <vTaskPlaceOnEventList+0x12>
{
1a002088:	b510      	push	{r4, lr}
1a00208a:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a00208c:	4b04      	ldr	r3, [pc, #16]	; (1a0020a0 <vTaskPlaceOnEventList+0x2c>)
1a00208e:	6819      	ldr	r1, [r3, #0]
1a002090:	3118      	adds	r1, #24
1a002092:	f7ff fb44 	bl	1a00171e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a002096:	2101      	movs	r1, #1
1a002098:	4620      	mov	r0, r4
1a00209a:	f7ff fcf9 	bl	1a001a90 <prvAddCurrentTaskToDelayedList>
}
1a00209e:	bd10      	pop	{r4, pc}
1a0020a0:	10002acc 	.word	0x10002acc

1a0020a4 <vTaskPlaceOnEventListRestricted>:
	{
1a0020a4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a0020a6:	b940      	cbnz	r0, 1a0020ba <vTaskPlaceOnEventListRestricted+0x16>
1a0020a8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020ac:	f383 8811 	msr	BASEPRI, r3
1a0020b0:	f3bf 8f6f 	isb	sy
1a0020b4:	f3bf 8f4f 	dsb	sy
1a0020b8:	e7fe      	b.n	1a0020b8 <vTaskPlaceOnEventListRestricted+0x14>
1a0020ba:	460c      	mov	r4, r1
1a0020bc:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0020be:	4a06      	ldr	r2, [pc, #24]	; (1a0020d8 <vTaskPlaceOnEventListRestricted+0x34>)
1a0020c0:	6811      	ldr	r1, [r2, #0]
1a0020c2:	3118      	adds	r1, #24
1a0020c4:	f7ff fb1f 	bl	1a001706 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a0020c8:	b10d      	cbz	r5, 1a0020ce <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a0020ca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a0020ce:	4629      	mov	r1, r5
1a0020d0:	4620      	mov	r0, r4
1a0020d2:	f7ff fcdd 	bl	1a001a90 <prvAddCurrentTaskToDelayedList>
	}
1a0020d6:	bd38      	pop	{r3, r4, r5, pc}
1a0020d8:	10002acc 	.word	0x10002acc

1a0020dc <xTaskRemoveFromEventList>:
{
1a0020dc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a0020de:	68c3      	ldr	r3, [r0, #12]
1a0020e0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a0020e2:	b944      	cbnz	r4, 1a0020f6 <xTaskRemoveFromEventList+0x1a>
1a0020e4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020e8:	f383 8811 	msr	BASEPRI, r3
1a0020ec:	f3bf 8f6f 	isb	sy
1a0020f0:	f3bf 8f4f 	dsb	sy
1a0020f4:	e7fe      	b.n	1a0020f4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a0020f6:	f104 0518 	add.w	r5, r4, #24
1a0020fa:	4628      	mov	r0, r5
1a0020fc:	f7ff fb29 	bl	1a001752 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a002100:	4b13      	ldr	r3, [pc, #76]	; (1a002150 <xTaskRemoveFromEventList+0x74>)
1a002102:	681b      	ldr	r3, [r3, #0]
1a002104:	b9e3      	cbnz	r3, 1a002140 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a002106:	1d25      	adds	r5, r4, #4
1a002108:	4628      	mov	r0, r5
1a00210a:	f7ff fb22 	bl	1a001752 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a00210e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002110:	2201      	movs	r2, #1
1a002112:	409a      	lsls	r2, r3
1a002114:	490f      	ldr	r1, [pc, #60]	; (1a002154 <xTaskRemoveFromEventList+0x78>)
1a002116:	6808      	ldr	r0, [r1, #0]
1a002118:	4302      	orrs	r2, r0
1a00211a:	600a      	str	r2, [r1, #0]
1a00211c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002120:	009a      	lsls	r2, r3, #2
1a002122:	4629      	mov	r1, r5
1a002124:	480c      	ldr	r0, [pc, #48]	; (1a002158 <xTaskRemoveFromEventList+0x7c>)
1a002126:	4410      	add	r0, r2
1a002128:	f7ff faed 	bl	1a001706 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a00212c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00212e:	4b0b      	ldr	r3, [pc, #44]	; (1a00215c <xTaskRemoveFromEventList+0x80>)
1a002130:	681b      	ldr	r3, [r3, #0]
1a002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002134:	429a      	cmp	r2, r3
1a002136:	d908      	bls.n	1a00214a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a002138:	2001      	movs	r0, #1
1a00213a:	4b09      	ldr	r3, [pc, #36]	; (1a002160 <xTaskRemoveFromEventList+0x84>)
1a00213c:	6018      	str	r0, [r3, #0]
}
1a00213e:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a002140:	4629      	mov	r1, r5
1a002142:	4808      	ldr	r0, [pc, #32]	; (1a002164 <xTaskRemoveFromEventList+0x88>)
1a002144:	f7ff fadf 	bl	1a001706 <vListInsertEnd>
1a002148:	e7f0      	b.n	1a00212c <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a00214a:	2000      	movs	r0, #0
	return xReturn;
1a00214c:	e7f7      	b.n	1a00213e <xTaskRemoveFromEventList+0x62>
1a00214e:	bf00      	nop
1a002150:	10002b70 	.word	0x10002b70
1a002154:	10002b78 	.word	0x10002b78
1a002158:	10002ad8 	.word	0x10002ad8
1a00215c:	10002acc 	.word	0x10002acc
1a002160:	10002bf0 	.word	0x10002bf0
1a002164:	10002bac 	.word	0x10002bac

1a002168 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a002168:	4b03      	ldr	r3, [pc, #12]	; (1a002178 <vTaskInternalSetTimeOutState+0x10>)
1a00216a:	681b      	ldr	r3, [r3, #0]
1a00216c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a00216e:	4b03      	ldr	r3, [pc, #12]	; (1a00217c <vTaskInternalSetTimeOutState+0x14>)
1a002170:	681b      	ldr	r3, [r3, #0]
1a002172:	6043      	str	r3, [r0, #4]
}
1a002174:	4770      	bx	lr
1a002176:	bf00      	nop
1a002178:	10002ba8 	.word	0x10002ba8
1a00217c:	10002bec 	.word	0x10002bec

1a002180 <xTaskCheckForTimeOut>:
{
1a002180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a002182:	b150      	cbz	r0, 1a00219a <xTaskCheckForTimeOut+0x1a>
1a002184:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a002186:	b989      	cbnz	r1, 1a0021ac <xTaskCheckForTimeOut+0x2c>
1a002188:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00218c:	f383 8811 	msr	BASEPRI, r3
1a002190:	f3bf 8f6f 	isb	sy
1a002194:	f3bf 8f4f 	dsb	sy
1a002198:	e7fe      	b.n	1a002198 <xTaskCheckForTimeOut+0x18>
1a00219a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00219e:	f383 8811 	msr	BASEPRI, r3
1a0021a2:	f3bf 8f6f 	isb	sy
1a0021a6:	f3bf 8f4f 	dsb	sy
1a0021aa:	e7fe      	b.n	1a0021aa <xTaskCheckForTimeOut+0x2a>
1a0021ac:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a0021ae:	f000 fb51 	bl	1a002854 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a0021b2:	4b11      	ldr	r3, [pc, #68]	; (1a0021f8 <xTaskCheckForTimeOut+0x78>)
1a0021b4:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a0021b6:	6868      	ldr	r0, [r5, #4]
1a0021b8:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a0021ba:	6823      	ldr	r3, [r4, #0]
1a0021bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0021c0:	d016      	beq.n	1a0021f0 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a0021c2:	682f      	ldr	r7, [r5, #0]
1a0021c4:	4e0d      	ldr	r6, [pc, #52]	; (1a0021fc <xTaskCheckForTimeOut+0x7c>)
1a0021c6:	6836      	ldr	r6, [r6, #0]
1a0021c8:	42b7      	cmp	r7, r6
1a0021ca:	d001      	beq.n	1a0021d0 <xTaskCheckForTimeOut+0x50>
1a0021cc:	4288      	cmp	r0, r1
1a0021ce:	d911      	bls.n	1a0021f4 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a0021d0:	4293      	cmp	r3, r2
1a0021d2:	d803      	bhi.n	1a0021dc <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a0021d4:	2300      	movs	r3, #0
1a0021d6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a0021d8:	2401      	movs	r4, #1
1a0021da:	e005      	b.n	1a0021e8 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a0021dc:	1a9b      	subs	r3, r3, r2
1a0021de:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a0021e0:	4628      	mov	r0, r5
1a0021e2:	f7ff ffc1 	bl	1a002168 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a0021e6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0021e8:	f000 fb56 	bl	1a002898 <vPortExitCritical>
}
1a0021ec:	4620      	mov	r0, r4
1a0021ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a0021f0:	2400      	movs	r4, #0
1a0021f2:	e7f9      	b.n	1a0021e8 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a0021f4:	2401      	movs	r4, #1
1a0021f6:	e7f7      	b.n	1a0021e8 <xTaskCheckForTimeOut+0x68>
1a0021f8:	10002bec 	.word	0x10002bec
1a0021fc:	10002ba8 	.word	0x10002ba8

1a002200 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a002200:	4b01      	ldr	r3, [pc, #4]	; (1a002208 <vTaskMissedYield+0x8>)
1a002202:	2201      	movs	r2, #1
1a002204:	601a      	str	r2, [r3, #0]
}
1a002206:	4770      	bx	lr
1a002208:	10002bf0 	.word	0x10002bf0

1a00220c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a00220c:	4b05      	ldr	r3, [pc, #20]	; (1a002224 <xTaskGetSchedulerState+0x18>)
1a00220e:	681b      	ldr	r3, [r3, #0]
1a002210:	b133      	cbz	r3, 1a002220 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a002212:	4b05      	ldr	r3, [pc, #20]	; (1a002228 <xTaskGetSchedulerState+0x1c>)
1a002214:	681b      	ldr	r3, [r3, #0]
1a002216:	b10b      	cbz	r3, 1a00221c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a002218:	2000      	movs	r0, #0
	}
1a00221a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a00221c:	2002      	movs	r0, #2
1a00221e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a002220:	2001      	movs	r0, #1
1a002222:	4770      	bx	lr
1a002224:	10002bc0 	.word	0x10002bc0
1a002228:	10002b70 	.word	0x10002b70

1a00222c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a00222c:	2800      	cmp	r0, #0
1a00222e:	d049      	beq.n	1a0022c4 <xTaskPriorityDisinherit+0x98>
	{
1a002230:	b538      	push	{r3, r4, r5, lr}
1a002232:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a002234:	4a26      	ldr	r2, [pc, #152]	; (1a0022d0 <xTaskPriorityDisinherit+0xa4>)
1a002236:	6812      	ldr	r2, [r2, #0]
1a002238:	4282      	cmp	r2, r0
1a00223a:	d008      	beq.n	1a00224e <xTaskPriorityDisinherit+0x22>
1a00223c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002240:	f383 8811 	msr	BASEPRI, r3
1a002244:	f3bf 8f6f 	isb	sy
1a002248:	f3bf 8f4f 	dsb	sy
1a00224c:	e7fe      	b.n	1a00224c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a00224e:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a002250:	b942      	cbnz	r2, 1a002264 <xTaskPriorityDisinherit+0x38>
1a002252:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002256:	f383 8811 	msr	BASEPRI, r3
1a00225a:	f3bf 8f6f 	isb	sy
1a00225e:	f3bf 8f4f 	dsb	sy
1a002262:	e7fe      	b.n	1a002262 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a002264:	3a01      	subs	r2, #1
1a002266:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a002268:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a00226a:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a00226c:	4288      	cmp	r0, r1
1a00226e:	d02b      	beq.n	1a0022c8 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a002270:	bb62      	cbnz	r2, 1a0022cc <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a002272:	1d25      	adds	r5, r4, #4
1a002274:	4628      	mov	r0, r5
1a002276:	f7ff fa6c 	bl	1a001752 <uxListRemove>
1a00227a:	b970      	cbnz	r0, 1a00229a <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a00227c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00227e:	2314      	movs	r3, #20
1a002280:	fb03 f302 	mul.w	r3, r3, r2
1a002284:	4913      	ldr	r1, [pc, #76]	; (1a0022d4 <xTaskPriorityDisinherit+0xa8>)
1a002286:	58cb      	ldr	r3, [r1, r3]
1a002288:	b93b      	cbnz	r3, 1a00229a <xTaskPriorityDisinherit+0x6e>
1a00228a:	2301      	movs	r3, #1
1a00228c:	fa03 f202 	lsl.w	r2, r3, r2
1a002290:	4911      	ldr	r1, [pc, #68]	; (1a0022d8 <xTaskPriorityDisinherit+0xac>)
1a002292:	680b      	ldr	r3, [r1, #0]
1a002294:	ea23 0302 	bic.w	r3, r3, r2
1a002298:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a00229a:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a00229c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00229e:	f1c3 0207 	rsb	r2, r3, #7
1a0022a2:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a0022a4:	2401      	movs	r4, #1
1a0022a6:	fa04 f203 	lsl.w	r2, r4, r3
1a0022aa:	490b      	ldr	r1, [pc, #44]	; (1a0022d8 <xTaskPriorityDisinherit+0xac>)
1a0022ac:	6808      	ldr	r0, [r1, #0]
1a0022ae:	4302      	orrs	r2, r0
1a0022b0:	600a      	str	r2, [r1, #0]
1a0022b2:	4629      	mov	r1, r5
1a0022b4:	4a07      	ldr	r2, [pc, #28]	; (1a0022d4 <xTaskPriorityDisinherit+0xa8>)
1a0022b6:	2014      	movs	r0, #20
1a0022b8:	fb00 2003 	mla	r0, r0, r3, r2
1a0022bc:	f7ff fa23 	bl	1a001706 <vListInsertEnd>
					xReturn = pdTRUE;
1a0022c0:	4620      	mov	r0, r4
	}
1a0022c2:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a0022c4:	2000      	movs	r0, #0
	}
1a0022c6:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a0022c8:	2000      	movs	r0, #0
1a0022ca:	e7fa      	b.n	1a0022c2 <xTaskPriorityDisinherit+0x96>
1a0022cc:	2000      	movs	r0, #0
		return xReturn;
1a0022ce:	e7f8      	b.n	1a0022c2 <xTaskPriorityDisinherit+0x96>
1a0022d0:	10002acc 	.word	0x10002acc
1a0022d4:	10002ad8 	.word	0x10002ad8
1a0022d8:	10002b78 	.word	0x10002b78

1a0022dc <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a0022dc:	4b06      	ldr	r3, [pc, #24]	; (1a0022f8 <prvGetNextExpireTime+0x1c>)
1a0022de:	681a      	ldr	r2, [r3, #0]
1a0022e0:	6813      	ldr	r3, [r2, #0]
1a0022e2:	fab3 f383 	clz	r3, r3
1a0022e6:	095b      	lsrs	r3, r3, #5
1a0022e8:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a0022ea:	b913      	cbnz	r3, 1a0022f2 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0022ec:	68d3      	ldr	r3, [r2, #12]
1a0022ee:	6818      	ldr	r0, [r3, #0]
1a0022f0:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a0022f2:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a0022f4:	4770      	bx	lr
1a0022f6:	bf00      	nop
1a0022f8:	10002bf4 	.word	0x10002bf4

1a0022fc <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a0022fc:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a0022fe:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002300:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a002302:	4291      	cmp	r1, r2
1a002304:	d80c      	bhi.n	1a002320 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002306:	1ad2      	subs	r2, r2, r3
1a002308:	6983      	ldr	r3, [r0, #24]
1a00230a:	429a      	cmp	r2, r3
1a00230c:	d301      	bcc.n	1a002312 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a00230e:	2001      	movs	r0, #1
1a002310:	e010      	b.n	1a002334 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a002312:	1d01      	adds	r1, r0, #4
1a002314:	4b09      	ldr	r3, [pc, #36]	; (1a00233c <prvInsertTimerInActiveList+0x40>)
1a002316:	6818      	ldr	r0, [r3, #0]
1a002318:	f7ff fa01 	bl	1a00171e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a00231c:	2000      	movs	r0, #0
1a00231e:	e009      	b.n	1a002334 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a002320:	429a      	cmp	r2, r3
1a002322:	d201      	bcs.n	1a002328 <prvInsertTimerInActiveList+0x2c>
1a002324:	4299      	cmp	r1, r3
1a002326:	d206      	bcs.n	1a002336 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002328:	1d01      	adds	r1, r0, #4
1a00232a:	4b05      	ldr	r3, [pc, #20]	; (1a002340 <prvInsertTimerInActiveList+0x44>)
1a00232c:	6818      	ldr	r0, [r3, #0]
1a00232e:	f7ff f9f6 	bl	1a00171e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a002332:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a002334:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a002336:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a002338:	e7fc      	b.n	1a002334 <prvInsertTimerInActiveList+0x38>
1a00233a:	bf00      	nop
1a00233c:	10002bf8 	.word	0x10002bf8
1a002340:	10002bf4 	.word	0x10002bf4

1a002344 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a002344:	b530      	push	{r4, r5, lr}
1a002346:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a002348:	f000 fa84 	bl	1a002854 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a00234c:	4b11      	ldr	r3, [pc, #68]	; (1a002394 <prvCheckForValidListAndQueue+0x50>)
1a00234e:	681b      	ldr	r3, [r3, #0]
1a002350:	b11b      	cbz	r3, 1a00235a <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a002352:	f000 faa1 	bl	1a002898 <vPortExitCritical>
}
1a002356:	b003      	add	sp, #12
1a002358:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a00235a:	4d0f      	ldr	r5, [pc, #60]	; (1a002398 <prvCheckForValidListAndQueue+0x54>)
1a00235c:	4628      	mov	r0, r5
1a00235e:	f7ff f9c4 	bl	1a0016ea <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a002362:	4c0e      	ldr	r4, [pc, #56]	; (1a00239c <prvCheckForValidListAndQueue+0x58>)
1a002364:	4620      	mov	r0, r4
1a002366:	f7ff f9c0 	bl	1a0016ea <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a00236a:	4b0d      	ldr	r3, [pc, #52]	; (1a0023a0 <prvCheckForValidListAndQueue+0x5c>)
1a00236c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a00236e:	4b0d      	ldr	r3, [pc, #52]	; (1a0023a4 <prvCheckForValidListAndQueue+0x60>)
1a002370:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a002372:	2300      	movs	r3, #0
1a002374:	9300      	str	r3, [sp, #0]
1a002376:	4b0c      	ldr	r3, [pc, #48]	; (1a0023a8 <prvCheckForValidListAndQueue+0x64>)
1a002378:	4a0c      	ldr	r2, [pc, #48]	; (1a0023ac <prvCheckForValidListAndQueue+0x68>)
1a00237a:	2110      	movs	r1, #16
1a00237c:	200a      	movs	r0, #10
1a00237e:	f7fe fee2 	bl	1a001146 <xQueueGenericCreateStatic>
1a002382:	4b04      	ldr	r3, [pc, #16]	; (1a002394 <prvCheckForValidListAndQueue+0x50>)
1a002384:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a002386:	2800      	cmp	r0, #0
1a002388:	d0e3      	beq.n	1a002352 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a00238a:	4909      	ldr	r1, [pc, #36]	; (1a0023b0 <prvCheckForValidListAndQueue+0x6c>)
1a00238c:	f7ff f970 	bl	1a001670 <vQueueAddToRegistry>
1a002390:	e7df      	b.n	1a002352 <prvCheckForValidListAndQueue+0xe>
1a002392:	bf00      	nop
1a002394:	10002d18 	.word	0x10002d18
1a002398:	10002c9c 	.word	0x10002c9c
1a00239c:	10002cb0 	.word	0x10002cb0
1a0023a0:	10002bf4 	.word	0x10002bf4
1a0023a4:	10002bf8 	.word	0x10002bf8
1a0023a8:	10002cc8 	.word	0x10002cc8
1a0023ac:	10002bfc 	.word	0x10002bfc
1a0023b0:	1a00540c 	.word	0x1a00540c

1a0023b4 <prvInitialiseNewTimer>:
{
1a0023b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0023b8:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a0023ba:	b941      	cbnz	r1, 1a0023ce <prvInitialiseNewTimer+0x1a>
1a0023bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023c0:	f383 8811 	msr	BASEPRI, r3
1a0023c4:	f3bf 8f6f 	isb	sy
1a0023c8:	f3bf 8f4f 	dsb	sy
1a0023cc:	e7fe      	b.n	1a0023cc <prvInitialiseNewTimer+0x18>
1a0023ce:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
1a0023d0:	b174      	cbz	r4, 1a0023f0 <prvInitialiseNewTimer+0x3c>
1a0023d2:	461d      	mov	r5, r3
1a0023d4:	4616      	mov	r6, r2
1a0023d6:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
1a0023d8:	f7ff ffb4 	bl	1a002344 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
1a0023dc:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a0023e0:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a0023e2:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a0023e4:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a0023e6:	9b06      	ldr	r3, [sp, #24]
1a0023e8:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a0023ea:	1d20      	adds	r0, r4, #4
1a0023ec:	f7ff f988 	bl	1a001700 <vListInitialiseItem>
}
1a0023f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a0023f4 <xTimerCreateTimerTask>:
{
1a0023f4:	b510      	push	{r4, lr}
1a0023f6:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a0023f8:	f7ff ffa4 	bl	1a002344 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a0023fc:	4b12      	ldr	r3, [pc, #72]	; (1a002448 <xTimerCreateTimerTask+0x54>)
1a0023fe:	681b      	ldr	r3, [r3, #0]
1a002400:	b1cb      	cbz	r3, 1a002436 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a002402:	2400      	movs	r4, #0
1a002404:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a002406:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a002408:	aa07      	add	r2, sp, #28
1a00240a:	a906      	add	r1, sp, #24
1a00240c:	a805      	add	r0, sp, #20
1a00240e:	f7ff f9c1 	bl	1a001794 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a002412:	9b05      	ldr	r3, [sp, #20]
1a002414:	9302      	str	r3, [sp, #8]
1a002416:	9b06      	ldr	r3, [sp, #24]
1a002418:	9301      	str	r3, [sp, #4]
1a00241a:	2304      	movs	r3, #4
1a00241c:	9300      	str	r3, [sp, #0]
1a00241e:	4623      	mov	r3, r4
1a002420:	9a07      	ldr	r2, [sp, #28]
1a002422:	490a      	ldr	r1, [pc, #40]	; (1a00244c <xTimerCreateTimerTask+0x58>)
1a002424:	480a      	ldr	r0, [pc, #40]	; (1a002450 <xTimerCreateTimerTask+0x5c>)
1a002426:	f7ff fb7f 	bl	1a001b28 <xTaskCreateStatic>
1a00242a:	4b0a      	ldr	r3, [pc, #40]	; (1a002454 <xTimerCreateTimerTask+0x60>)
1a00242c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a00242e:	b110      	cbz	r0, 1a002436 <xTimerCreateTimerTask+0x42>
}
1a002430:	2001      	movs	r0, #1
1a002432:	b008      	add	sp, #32
1a002434:	bd10      	pop	{r4, pc}
1a002436:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00243a:	f383 8811 	msr	BASEPRI, r3
1a00243e:	f3bf 8f6f 	isb	sy
1a002442:	f3bf 8f4f 	dsb	sy
1a002446:	e7fe      	b.n	1a002446 <xTimerCreateTimerTask+0x52>
1a002448:	10002d18 	.word	0x10002d18
1a00244c:	1a005414 	.word	0x1a005414
1a002450:	1a002771 	.word	0x1a002771
1a002454:	10002d1c 	.word	0x10002d1c

1a002458 <xTimerCreate>:
	{
1a002458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00245c:	b082      	sub	sp, #8
1a00245e:	4605      	mov	r5, r0
1a002460:	460e      	mov	r6, r1
1a002462:	4617      	mov	r7, r2
1a002464:	4698      	mov	r8, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
1a002466:	2030      	movs	r0, #48	; 0x30
1a002468:	f7fe fcb4 	bl	1a000dd4 <pvPortMalloc>
		if( pxNewTimer != NULL )
1a00246c:	4604      	mov	r4, r0
1a00246e:	b158      	cbz	r0, 1a002488 <xTimerCreate+0x30>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a002470:	9001      	str	r0, [sp, #4]
1a002472:	9b08      	ldr	r3, [sp, #32]
1a002474:	9300      	str	r3, [sp, #0]
1a002476:	4643      	mov	r3, r8
1a002478:	463a      	mov	r2, r7
1a00247a:	4631      	mov	r1, r6
1a00247c:	4628      	mov	r0, r5
1a00247e:	f7ff ff99 	bl	1a0023b4 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
1a002482:	2300      	movs	r3, #0
1a002484:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
1a002488:	4620      	mov	r0, r4
1a00248a:	b002      	add	sp, #8
1a00248c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a002490 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a002490:	b1c8      	cbz	r0, 1a0024c6 <xTimerGenericCommand+0x36>
{
1a002492:	b530      	push	{r4, r5, lr}
1a002494:	b085      	sub	sp, #20
1a002496:	4615      	mov	r5, r2
1a002498:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a00249a:	4a17      	ldr	r2, [pc, #92]	; (1a0024f8 <xTimerGenericCommand+0x68>)
1a00249c:	6810      	ldr	r0, [r2, #0]
1a00249e:	b340      	cbz	r0, 1a0024f2 <xTimerGenericCommand+0x62>
1a0024a0:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a0024a2:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a0024a4:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a0024a6:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a0024a8:	2905      	cmp	r1, #5
1a0024aa:	dc1d      	bgt.n	1a0024e8 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a0024ac:	f7ff feae 	bl	1a00220c <xTaskGetSchedulerState>
1a0024b0:	2802      	cmp	r0, #2
1a0024b2:	d011      	beq.n	1a0024d8 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a0024b4:	2300      	movs	r3, #0
1a0024b6:	461a      	mov	r2, r3
1a0024b8:	4669      	mov	r1, sp
1a0024ba:	480f      	ldr	r0, [pc, #60]	; (1a0024f8 <xTimerGenericCommand+0x68>)
1a0024bc:	6800      	ldr	r0, [r0, #0]
1a0024be:	f7fe feb1 	bl	1a001224 <xQueueGenericSend>
}
1a0024c2:	b005      	add	sp, #20
1a0024c4:	bd30      	pop	{r4, r5, pc}
1a0024c6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024ca:	f383 8811 	msr	BASEPRI, r3
1a0024ce:	f3bf 8f6f 	isb	sy
1a0024d2:	f3bf 8f4f 	dsb	sy
1a0024d6:	e7fe      	b.n	1a0024d6 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a0024d8:	2300      	movs	r3, #0
1a0024da:	9a08      	ldr	r2, [sp, #32]
1a0024dc:	4669      	mov	r1, sp
1a0024de:	4806      	ldr	r0, [pc, #24]	; (1a0024f8 <xTimerGenericCommand+0x68>)
1a0024e0:	6800      	ldr	r0, [r0, #0]
1a0024e2:	f7fe fe9f 	bl	1a001224 <xQueueGenericSend>
1a0024e6:	e7ec      	b.n	1a0024c2 <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a0024e8:	2300      	movs	r3, #0
1a0024ea:	4669      	mov	r1, sp
1a0024ec:	f7fe ff58 	bl	1a0013a0 <xQueueGenericSendFromISR>
1a0024f0:	e7e7      	b.n	1a0024c2 <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a0024f2:	2000      	movs	r0, #0
	return xReturn;
1a0024f4:	e7e5      	b.n	1a0024c2 <xTimerGenericCommand+0x32>
1a0024f6:	bf00      	nop
1a0024f8:	10002d18 	.word	0x10002d18

1a0024fc <prvSwitchTimerLists>:
{
1a0024fc:	b570      	push	{r4, r5, r6, lr}
1a0024fe:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a002500:	4b1a      	ldr	r3, [pc, #104]	; (1a00256c <prvSwitchTimerLists+0x70>)
1a002502:	681b      	ldr	r3, [r3, #0]
1a002504:	681a      	ldr	r2, [r3, #0]
1a002506:	b352      	cbz	r2, 1a00255e <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002508:	68db      	ldr	r3, [r3, #12]
1a00250a:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a00250c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a00250e:	1d25      	adds	r5, r4, #4
1a002510:	4628      	mov	r0, r5
1a002512:	f7ff f91e 	bl	1a001752 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002516:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002518:	4620      	mov	r0, r4
1a00251a:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a00251c:	69e3      	ldr	r3, [r4, #28]
1a00251e:	2b01      	cmp	r3, #1
1a002520:	d1ee      	bne.n	1a002500 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a002522:	69a3      	ldr	r3, [r4, #24]
1a002524:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a002526:	429e      	cmp	r6, r3
1a002528:	d207      	bcs.n	1a00253a <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a00252a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a00252c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a00252e:	4629      	mov	r1, r5
1a002530:	4b0e      	ldr	r3, [pc, #56]	; (1a00256c <prvSwitchTimerLists+0x70>)
1a002532:	6818      	ldr	r0, [r3, #0]
1a002534:	f7ff f8f3 	bl	1a00171e <vListInsert>
1a002538:	e7e2      	b.n	1a002500 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a00253a:	2100      	movs	r1, #0
1a00253c:	9100      	str	r1, [sp, #0]
1a00253e:	460b      	mov	r3, r1
1a002540:	4632      	mov	r2, r6
1a002542:	4620      	mov	r0, r4
1a002544:	f7ff ffa4 	bl	1a002490 <xTimerGenericCommand>
				configASSERT( xResult );
1a002548:	2800      	cmp	r0, #0
1a00254a:	d1d9      	bne.n	1a002500 <prvSwitchTimerLists+0x4>
1a00254c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002550:	f383 8811 	msr	BASEPRI, r3
1a002554:	f3bf 8f6f 	isb	sy
1a002558:	f3bf 8f4f 	dsb	sy
1a00255c:	e7fe      	b.n	1a00255c <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a00255e:	4a04      	ldr	r2, [pc, #16]	; (1a002570 <prvSwitchTimerLists+0x74>)
1a002560:	6810      	ldr	r0, [r2, #0]
1a002562:	4902      	ldr	r1, [pc, #8]	; (1a00256c <prvSwitchTimerLists+0x70>)
1a002564:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a002566:	6013      	str	r3, [r2, #0]
}
1a002568:	b002      	add	sp, #8
1a00256a:	bd70      	pop	{r4, r5, r6, pc}
1a00256c:	10002bf4 	.word	0x10002bf4
1a002570:	10002bf8 	.word	0x10002bf8

1a002574 <prvSampleTimeNow>:
{
1a002574:	b538      	push	{r3, r4, r5, lr}
1a002576:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a002578:	f7ff fc04 	bl	1a001d84 <xTaskGetTickCount>
1a00257c:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a00257e:	4b07      	ldr	r3, [pc, #28]	; (1a00259c <prvSampleTimeNow+0x28>)
1a002580:	681b      	ldr	r3, [r3, #0]
1a002582:	4283      	cmp	r3, r0
1a002584:	d805      	bhi.n	1a002592 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a002586:	2300      	movs	r3, #0
1a002588:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a00258a:	4b04      	ldr	r3, [pc, #16]	; (1a00259c <prvSampleTimeNow+0x28>)
1a00258c:	601c      	str	r4, [r3, #0]
}
1a00258e:	4620      	mov	r0, r4
1a002590:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a002592:	f7ff ffb3 	bl	1a0024fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a002596:	2301      	movs	r3, #1
1a002598:	602b      	str	r3, [r5, #0]
1a00259a:	e7f6      	b.n	1a00258a <prvSampleTimeNow+0x16>
1a00259c:	10002cc4 	.word	0x10002cc4

1a0025a0 <prvProcessExpiredTimer>:
{
1a0025a0:	b570      	push	{r4, r5, r6, lr}
1a0025a2:	b082      	sub	sp, #8
1a0025a4:	4605      	mov	r5, r0
1a0025a6:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0025a8:	4b14      	ldr	r3, [pc, #80]	; (1a0025fc <prvProcessExpiredTimer+0x5c>)
1a0025aa:	681b      	ldr	r3, [r3, #0]
1a0025ac:	68db      	ldr	r3, [r3, #12]
1a0025ae:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0025b0:	1d20      	adds	r0, r4, #4
1a0025b2:	f7ff f8ce 	bl	1a001752 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0025b6:	69e3      	ldr	r3, [r4, #28]
1a0025b8:	2b01      	cmp	r3, #1
1a0025ba:	d004      	beq.n	1a0025c6 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0025bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0025be:	4620      	mov	r0, r4
1a0025c0:	4798      	blx	r3
}
1a0025c2:	b002      	add	sp, #8
1a0025c4:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a0025c6:	69a1      	ldr	r1, [r4, #24]
1a0025c8:	462b      	mov	r3, r5
1a0025ca:	4632      	mov	r2, r6
1a0025cc:	4429      	add	r1, r5
1a0025ce:	4620      	mov	r0, r4
1a0025d0:	f7ff fe94 	bl	1a0022fc <prvInsertTimerInActiveList>
1a0025d4:	2800      	cmp	r0, #0
1a0025d6:	d0f1      	beq.n	1a0025bc <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a0025d8:	2100      	movs	r1, #0
1a0025da:	9100      	str	r1, [sp, #0]
1a0025dc:	460b      	mov	r3, r1
1a0025de:	462a      	mov	r2, r5
1a0025e0:	4620      	mov	r0, r4
1a0025e2:	f7ff ff55 	bl	1a002490 <xTimerGenericCommand>
			configASSERT( xResult );
1a0025e6:	2800      	cmp	r0, #0
1a0025e8:	d1e8      	bne.n	1a0025bc <prvProcessExpiredTimer+0x1c>
1a0025ea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0025ee:	f383 8811 	msr	BASEPRI, r3
1a0025f2:	f3bf 8f6f 	isb	sy
1a0025f6:	f3bf 8f4f 	dsb	sy
1a0025fa:	e7fe      	b.n	1a0025fa <prvProcessExpiredTimer+0x5a>
1a0025fc:	10002bf4 	.word	0x10002bf4

1a002600 <prvProcessTimerOrBlockTask>:
{
1a002600:	b570      	push	{r4, r5, r6, lr}
1a002602:	b082      	sub	sp, #8
1a002604:	4606      	mov	r6, r0
1a002606:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a002608:	f7ff fbb4 	bl	1a001d74 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a00260c:	a801      	add	r0, sp, #4
1a00260e:	f7ff ffb1 	bl	1a002574 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a002612:	9b01      	ldr	r3, [sp, #4]
1a002614:	bb1b      	cbnz	r3, 1a00265e <prvProcessTimerOrBlockTask+0x5e>
1a002616:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a002618:	b90c      	cbnz	r4, 1a00261e <prvProcessTimerOrBlockTask+0x1e>
1a00261a:	42b0      	cmp	r0, r6
1a00261c:	d218      	bcs.n	1a002650 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a00261e:	b12c      	cbz	r4, 1a00262c <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a002620:	4b11      	ldr	r3, [pc, #68]	; (1a002668 <prvProcessTimerOrBlockTask+0x68>)
1a002622:	681b      	ldr	r3, [r3, #0]
1a002624:	681c      	ldr	r4, [r3, #0]
1a002626:	fab4 f484 	clz	r4, r4
1a00262a:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a00262c:	4622      	mov	r2, r4
1a00262e:	1b71      	subs	r1, r6, r5
1a002630:	4b0e      	ldr	r3, [pc, #56]	; (1a00266c <prvProcessTimerOrBlockTask+0x6c>)
1a002632:	6818      	ldr	r0, [r3, #0]
1a002634:	f7ff f830 	bl	1a001698 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a002638:	f7ff fc3e 	bl	1a001eb8 <xTaskResumeAll>
1a00263c:	b988      	cbnz	r0, 1a002662 <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a00263e:	4b0c      	ldr	r3, [pc, #48]	; (1a002670 <prvProcessTimerOrBlockTask+0x70>)
1a002640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002644:	601a      	str	r2, [r3, #0]
1a002646:	f3bf 8f4f 	dsb	sy
1a00264a:	f3bf 8f6f 	isb	sy
1a00264e:	e008      	b.n	1a002662 <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a002650:	f7ff fc32 	bl	1a001eb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a002654:	4629      	mov	r1, r5
1a002656:	4630      	mov	r0, r6
1a002658:	f7ff ffa2 	bl	1a0025a0 <prvProcessExpiredTimer>
1a00265c:	e001      	b.n	1a002662 <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a00265e:	f7ff fc2b 	bl	1a001eb8 <xTaskResumeAll>
}
1a002662:	b002      	add	sp, #8
1a002664:	bd70      	pop	{r4, r5, r6, pc}
1a002666:	bf00      	nop
1a002668:	10002bf8 	.word	0x10002bf8
1a00266c:	10002d18 	.word	0x10002d18
1a002670:	e000ed04 	.word	0xe000ed04

1a002674 <prvProcessReceivedCommands>:
{
1a002674:	b530      	push	{r4, r5, lr}
1a002676:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002678:	e002      	b.n	1a002680 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a00267a:	9b04      	ldr	r3, [sp, #16]
1a00267c:	2b00      	cmp	r3, #0
1a00267e:	da0f      	bge.n	1a0026a0 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002680:	2200      	movs	r2, #0
1a002682:	a904      	add	r1, sp, #16
1a002684:	4b39      	ldr	r3, [pc, #228]	; (1a00276c <prvProcessReceivedCommands+0xf8>)
1a002686:	6818      	ldr	r0, [r3, #0]
1a002688:	f7fe fef0 	bl	1a00146c <xQueueReceive>
1a00268c:	2800      	cmp	r0, #0
1a00268e:	d06a      	beq.n	1a002766 <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a002690:	9b04      	ldr	r3, [sp, #16]
1a002692:	2b00      	cmp	r3, #0
1a002694:	daf1      	bge.n	1a00267a <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a002696:	9907      	ldr	r1, [sp, #28]
1a002698:	9806      	ldr	r0, [sp, #24]
1a00269a:	9b05      	ldr	r3, [sp, #20]
1a00269c:	4798      	blx	r3
1a00269e:	e7ec      	b.n	1a00267a <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a0026a0:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a0026a2:	6963      	ldr	r3, [r4, #20]
1a0026a4:	b113      	cbz	r3, 1a0026ac <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0026a6:	1d20      	adds	r0, r4, #4
1a0026a8:	f7ff f853 	bl	1a001752 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a0026ac:	a803      	add	r0, sp, #12
1a0026ae:	f7ff ff61 	bl	1a002574 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a0026b2:	9b04      	ldr	r3, [sp, #16]
1a0026b4:	2b09      	cmp	r3, #9
1a0026b6:	d8e3      	bhi.n	1a002680 <prvProcessReceivedCommands+0xc>
1a0026b8:	a201      	add	r2, pc, #4	; (adr r2, 1a0026c0 <prvProcessReceivedCommands+0x4c>)
1a0026ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0026be:	bf00      	nop
1a0026c0:	1a0026e9 	.word	0x1a0026e9
1a0026c4:	1a0026e9 	.word	0x1a0026e9
1a0026c8:	1a0026e9 	.word	0x1a0026e9
1a0026cc:	1a002681 	.word	0x1a002681
1a0026d0:	1a002731 	.word	0x1a002731
1a0026d4:	1a002757 	.word	0x1a002757
1a0026d8:	1a0026e9 	.word	0x1a0026e9
1a0026dc:	1a0026e9 	.word	0x1a0026e9
1a0026e0:	1a002681 	.word	0x1a002681
1a0026e4:	1a002731 	.word	0x1a002731
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a0026e8:	9905      	ldr	r1, [sp, #20]
1a0026ea:	69a5      	ldr	r5, [r4, #24]
1a0026ec:	460b      	mov	r3, r1
1a0026ee:	4602      	mov	r2, r0
1a0026f0:	4429      	add	r1, r5
1a0026f2:	4620      	mov	r0, r4
1a0026f4:	f7ff fe02 	bl	1a0022fc <prvInsertTimerInActiveList>
1a0026f8:	2800      	cmp	r0, #0
1a0026fa:	d0c1      	beq.n	1a002680 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0026fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0026fe:	4620      	mov	r0, r4
1a002700:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002702:	69e3      	ldr	r3, [r4, #28]
1a002704:	2b01      	cmp	r3, #1
1a002706:	d1bb      	bne.n	1a002680 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a002708:	69a2      	ldr	r2, [r4, #24]
1a00270a:	2100      	movs	r1, #0
1a00270c:	9100      	str	r1, [sp, #0]
1a00270e:	460b      	mov	r3, r1
1a002710:	9805      	ldr	r0, [sp, #20]
1a002712:	4402      	add	r2, r0
1a002714:	4620      	mov	r0, r4
1a002716:	f7ff febb 	bl	1a002490 <xTimerGenericCommand>
							configASSERT( xResult );
1a00271a:	2800      	cmp	r0, #0
1a00271c:	d1b0      	bne.n	1a002680 <prvProcessReceivedCommands+0xc>
1a00271e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002722:	f383 8811 	msr	BASEPRI, r3
1a002726:	f3bf 8f6f 	isb	sy
1a00272a:	f3bf 8f4f 	dsb	sy
1a00272e:	e7fe      	b.n	1a00272e <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a002730:	9905      	ldr	r1, [sp, #20]
1a002732:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002734:	b131      	cbz	r1, 1a002744 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a002736:	4603      	mov	r3, r0
1a002738:	4602      	mov	r2, r0
1a00273a:	4401      	add	r1, r0
1a00273c:	4620      	mov	r0, r4
1a00273e:	f7ff fddd 	bl	1a0022fc <prvInsertTimerInActiveList>
					break;
1a002742:	e79d      	b.n	1a002680 <prvProcessReceivedCommands+0xc>
1a002744:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002748:	f383 8811 	msr	BASEPRI, r3
1a00274c:	f3bf 8f6f 	isb	sy
1a002750:	f3bf 8f4f 	dsb	sy
1a002754:	e7fe      	b.n	1a002754 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a002756:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a00275a:	2b00      	cmp	r3, #0
1a00275c:	d190      	bne.n	1a002680 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a00275e:	4620      	mov	r0, r4
1a002760:	f7fe fbc6 	bl	1a000ef0 <vPortFree>
1a002764:	e78c      	b.n	1a002680 <prvProcessReceivedCommands+0xc>
}
1a002766:	b009      	add	sp, #36	; 0x24
1a002768:	bd30      	pop	{r4, r5, pc}
1a00276a:	bf00      	nop
1a00276c:	10002d18 	.word	0x10002d18

1a002770 <prvTimerTask>:
{
1a002770:	b500      	push	{lr}
1a002772:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a002774:	a801      	add	r0, sp, #4
1a002776:	f7ff fdb1 	bl	1a0022dc <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a00277a:	9901      	ldr	r1, [sp, #4]
1a00277c:	f7ff ff40 	bl	1a002600 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a002780:	f7ff ff78 	bl	1a002674 <prvProcessReceivedCommands>
1a002784:	e7f6      	b.n	1a002774 <prvTimerTask+0x4>
1a002786:	Address 0x000000001a002786 is out of bounds.


1a002788 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a002788:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a00278a:	2300      	movs	r3, #0
1a00278c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a00278e:	4b0d      	ldr	r3, [pc, #52]	; (1a0027c4 <prvTaskExitError+0x3c>)
1a002790:	681b      	ldr	r3, [r3, #0]
1a002792:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a002796:	d008      	beq.n	1a0027aa <prvTaskExitError+0x22>
1a002798:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00279c:	f383 8811 	msr	BASEPRI, r3
1a0027a0:	f3bf 8f6f 	isb	sy
1a0027a4:	f3bf 8f4f 	dsb	sy
1a0027a8:	e7fe      	b.n	1a0027a8 <prvTaskExitError+0x20>
1a0027aa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0027ae:	f383 8811 	msr	BASEPRI, r3
1a0027b2:	f3bf 8f6f 	isb	sy
1a0027b6:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a0027ba:	9b01      	ldr	r3, [sp, #4]
1a0027bc:	2b00      	cmp	r3, #0
1a0027be:	d0fc      	beq.n	1a0027ba <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a0027c0:	b002      	add	sp, #8
1a0027c2:	4770      	bx	lr
1a0027c4:	10000000 	.word	0x10000000

1a0027c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a0027c8:	4808      	ldr	r0, [pc, #32]	; (1a0027ec <prvPortStartFirstTask+0x24>)
1a0027ca:	6800      	ldr	r0, [r0, #0]
1a0027cc:	6800      	ldr	r0, [r0, #0]
1a0027ce:	f380 8808 	msr	MSP, r0
1a0027d2:	f04f 0000 	mov.w	r0, #0
1a0027d6:	f380 8814 	msr	CONTROL, r0
1a0027da:	b662      	cpsie	i
1a0027dc:	b661      	cpsie	f
1a0027de:	f3bf 8f4f 	dsb	sy
1a0027e2:	f3bf 8f6f 	isb	sy
1a0027e6:	df00      	svc	0
1a0027e8:	bf00      	nop
1a0027ea:	0000      	.short	0x0000
1a0027ec:	e000ed08 	.word	0xe000ed08

1a0027f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a0027f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a002800 <vPortEnableVFP+0x10>
1a0027f4:	6801      	ldr	r1, [r0, #0]
1a0027f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0027fa:	6001      	str	r1, [r0, #0]
1a0027fc:	4770      	bx	lr
1a0027fe:	0000      	.short	0x0000
1a002800:	e000ed88 	.word	0xe000ed88

1a002804 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a002804:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a002808:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a00280c:	f021 0101 	bic.w	r1, r1, #1
1a002810:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a002814:	4b05      	ldr	r3, [pc, #20]	; (1a00282c <pxPortInitialiseStack+0x28>)
1a002816:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a00281a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a00281e:	f06f 0302 	mvn.w	r3, #2
1a002822:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a002826:	3844      	subs	r0, #68	; 0x44
1a002828:	4770      	bx	lr
1a00282a:	bf00      	nop
1a00282c:	1a002789 	.word	0x1a002789

1a002830 <SVC_Handler>:
	__asm volatile (
1a002830:	4b07      	ldr	r3, [pc, #28]	; (1a002850 <pxCurrentTCBConst2>)
1a002832:	6819      	ldr	r1, [r3, #0]
1a002834:	6808      	ldr	r0, [r1, #0]
1a002836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00283a:	f380 8809 	msr	PSP, r0
1a00283e:	f3bf 8f6f 	isb	sy
1a002842:	f04f 0000 	mov.w	r0, #0
1a002846:	f380 8811 	msr	BASEPRI, r0
1a00284a:	4770      	bx	lr
1a00284c:	f3af 8000 	nop.w

1a002850 <pxCurrentTCBConst2>:
1a002850:	10002acc 	.word	0x10002acc

1a002854 <vPortEnterCritical>:
1a002854:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002858:	f383 8811 	msr	BASEPRI, r3
1a00285c:	f3bf 8f6f 	isb	sy
1a002860:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a002864:	4a0a      	ldr	r2, [pc, #40]	; (1a002890 <vPortEnterCritical+0x3c>)
1a002866:	6813      	ldr	r3, [r2, #0]
1a002868:	3301      	adds	r3, #1
1a00286a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a00286c:	2b01      	cmp	r3, #1
1a00286e:	d000      	beq.n	1a002872 <vPortEnterCritical+0x1e>
}
1a002870:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a002872:	4b08      	ldr	r3, [pc, #32]	; (1a002894 <vPortEnterCritical+0x40>)
1a002874:	681b      	ldr	r3, [r3, #0]
1a002876:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00287a:	d0f9      	beq.n	1a002870 <vPortEnterCritical+0x1c>
1a00287c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002880:	f383 8811 	msr	BASEPRI, r3
1a002884:	f3bf 8f6f 	isb	sy
1a002888:	f3bf 8f4f 	dsb	sy
1a00288c:	e7fe      	b.n	1a00288c <vPortEnterCritical+0x38>
1a00288e:	bf00      	nop
1a002890:	10000000 	.word	0x10000000
1a002894:	e000ed04 	.word	0xe000ed04

1a002898 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a002898:	4b09      	ldr	r3, [pc, #36]	; (1a0028c0 <vPortExitCritical+0x28>)
1a00289a:	681b      	ldr	r3, [r3, #0]
1a00289c:	b943      	cbnz	r3, 1a0028b0 <vPortExitCritical+0x18>
1a00289e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0028a2:	f383 8811 	msr	BASEPRI, r3
1a0028a6:	f3bf 8f6f 	isb	sy
1a0028aa:	f3bf 8f4f 	dsb	sy
1a0028ae:	e7fe      	b.n	1a0028ae <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a0028b0:	3b01      	subs	r3, #1
1a0028b2:	4a03      	ldr	r2, [pc, #12]	; (1a0028c0 <vPortExitCritical+0x28>)
1a0028b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a0028b6:	b90b      	cbnz	r3, 1a0028bc <vPortExitCritical+0x24>
	__asm volatile
1a0028b8:	f383 8811 	msr	BASEPRI, r3
}
1a0028bc:	4770      	bx	lr
1a0028be:	bf00      	nop
1a0028c0:	10000000 	.word	0x10000000
1a0028c4:	ffffffff 	.word	0xffffffff
1a0028c8:	ffffffff 	.word	0xffffffff
1a0028cc:	ffffffff 	.word	0xffffffff

1a0028d0 <PendSV_Handler>:
	__asm volatile
1a0028d0:	f3ef 8009 	mrs	r0, PSP
1a0028d4:	f3bf 8f6f 	isb	sy
1a0028d8:	4b15      	ldr	r3, [pc, #84]	; (1a002930 <pxCurrentTCBConst>)
1a0028da:	681a      	ldr	r2, [r3, #0]
1a0028dc:	f01e 0f10 	tst.w	lr, #16
1a0028e0:	bf08      	it	eq
1a0028e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a0028e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0028ea:	6010      	str	r0, [r2, #0]
1a0028ec:	e92d 0009 	stmdb	sp!, {r0, r3}
1a0028f0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a0028f4:	f380 8811 	msr	BASEPRI, r0
1a0028f8:	f3bf 8f4f 	dsb	sy
1a0028fc:	f3bf 8f6f 	isb	sy
1a002900:	f7ff fb54 	bl	1a001fac <vTaskSwitchContext>
1a002904:	f04f 0000 	mov.w	r0, #0
1a002908:	f380 8811 	msr	BASEPRI, r0
1a00290c:	bc09      	pop	{r0, r3}
1a00290e:	6819      	ldr	r1, [r3, #0]
1a002910:	6808      	ldr	r0, [r1, #0]
1a002912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002916:	f01e 0f10 	tst.w	lr, #16
1a00291a:	bf08      	it	eq
1a00291c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a002920:	f380 8809 	msr	PSP, r0
1a002924:	f3bf 8f6f 	isb	sy
1a002928:	4770      	bx	lr
1a00292a:	bf00      	nop
1a00292c:	f3af 8000 	nop.w

1a002930 <pxCurrentTCBConst>:
1a002930:	10002acc 	.word	0x10002acc

1a002934 <SysTick_Handler>:
{
1a002934:	b508      	push	{r3, lr}
	__asm volatile
1a002936:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00293a:	f383 8811 	msr	BASEPRI, r3
1a00293e:	f3bf 8f6f 	isb	sy
1a002942:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a002946:	f7ff fa2b 	bl	1a001da0 <xTaskIncrementTick>
1a00294a:	b118      	cbz	r0, 1a002954 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a00294c:	4b03      	ldr	r3, [pc, #12]	; (1a00295c <SysTick_Handler+0x28>)
1a00294e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002952:	601a      	str	r2, [r3, #0]
	__asm volatile
1a002954:	2300      	movs	r3, #0
1a002956:	f383 8811 	msr	BASEPRI, r3
}
1a00295a:	bd08      	pop	{r3, pc}
1a00295c:	e000ed04 	.word	0xe000ed04

1a002960 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002960:	4a08      	ldr	r2, [pc, #32]	; (1a002984 <vPortSetupTimerInterrupt+0x24>)
1a002962:	2300      	movs	r3, #0
1a002964:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002966:	4908      	ldr	r1, [pc, #32]	; (1a002988 <vPortSetupTimerInterrupt+0x28>)
1a002968:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a00296a:	4b08      	ldr	r3, [pc, #32]	; (1a00298c <vPortSetupTimerInterrupt+0x2c>)
1a00296c:	681b      	ldr	r3, [r3, #0]
1a00296e:	4908      	ldr	r1, [pc, #32]	; (1a002990 <vPortSetupTimerInterrupt+0x30>)
1a002970:	fba1 1303 	umull	r1, r3, r1, r3
1a002974:	099b      	lsrs	r3, r3, #6
1a002976:	3b01      	subs	r3, #1
1a002978:	4906      	ldr	r1, [pc, #24]	; (1a002994 <vPortSetupTimerInterrupt+0x34>)
1a00297a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a00297c:	2307      	movs	r3, #7
1a00297e:	6013      	str	r3, [r2, #0]
}
1a002980:	4770      	bx	lr
1a002982:	bf00      	nop
1a002984:	e000e010 	.word	0xe000e010
1a002988:	e000e018 	.word	0xe000e018
1a00298c:	10002e2c 	.word	0x10002e2c
1a002990:	10624dd3 	.word	0x10624dd3
1a002994:	e000e014 	.word	0xe000e014

1a002998 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002998:	4b3a      	ldr	r3, [pc, #232]	; (1a002a84 <xPortStartScheduler+0xec>)
1a00299a:	681a      	ldr	r2, [r3, #0]
1a00299c:	4b3a      	ldr	r3, [pc, #232]	; (1a002a88 <xPortStartScheduler+0xf0>)
1a00299e:	429a      	cmp	r2, r3
1a0029a0:	d00d      	beq.n	1a0029be <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a0029a2:	4b38      	ldr	r3, [pc, #224]	; (1a002a84 <xPortStartScheduler+0xec>)
1a0029a4:	681a      	ldr	r2, [r3, #0]
1a0029a6:	4b39      	ldr	r3, [pc, #228]	; (1a002a8c <xPortStartScheduler+0xf4>)
1a0029a8:	429a      	cmp	r2, r3
1a0029aa:	d111      	bne.n	1a0029d0 <xPortStartScheduler+0x38>
	__asm volatile
1a0029ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0029b0:	f383 8811 	msr	BASEPRI, r3
1a0029b4:	f3bf 8f6f 	isb	sy
1a0029b8:	f3bf 8f4f 	dsb	sy
1a0029bc:	e7fe      	b.n	1a0029bc <xPortStartScheduler+0x24>
1a0029be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0029c2:	f383 8811 	msr	BASEPRI, r3
1a0029c6:	f3bf 8f6f 	isb	sy
1a0029ca:	f3bf 8f4f 	dsb	sy
1a0029ce:	e7fe      	b.n	1a0029ce <xPortStartScheduler+0x36>
{
1a0029d0:	b510      	push	{r4, lr}
1a0029d2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a0029d4:	4b2e      	ldr	r3, [pc, #184]	; (1a002a90 <xPortStartScheduler+0xf8>)
1a0029d6:	781a      	ldrb	r2, [r3, #0]
1a0029d8:	b2d2      	uxtb	r2, r2
1a0029da:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a0029dc:	22ff      	movs	r2, #255	; 0xff
1a0029de:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a0029e0:	781b      	ldrb	r3, [r3, #0]
1a0029e2:	b2db      	uxtb	r3, r3
1a0029e4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a0029e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0029ec:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a0029f0:	4a28      	ldr	r2, [pc, #160]	; (1a002a94 <xPortStartScheduler+0xfc>)
1a0029f2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a0029f4:	4b28      	ldr	r3, [pc, #160]	; (1a002a98 <xPortStartScheduler+0x100>)
1a0029f6:	2207      	movs	r2, #7
1a0029f8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a0029fa:	e009      	b.n	1a002a10 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a0029fc:	4a26      	ldr	r2, [pc, #152]	; (1a002a98 <xPortStartScheduler+0x100>)
1a0029fe:	6813      	ldr	r3, [r2, #0]
1a002a00:	3b01      	subs	r3, #1
1a002a02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002a04:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002a08:	005b      	lsls	r3, r3, #1
1a002a0a:	b2db      	uxtb	r3, r3
1a002a0c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002a10:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002a14:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002a18:	d1f0      	bne.n	1a0029fc <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a002a1a:	4b1f      	ldr	r3, [pc, #124]	; (1a002a98 <xPortStartScheduler+0x100>)
1a002a1c:	681b      	ldr	r3, [r3, #0]
1a002a1e:	2b04      	cmp	r3, #4
1a002a20:	d008      	beq.n	1a002a34 <xPortStartScheduler+0x9c>
1a002a22:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002a26:	f383 8811 	msr	BASEPRI, r3
1a002a2a:	f3bf 8f6f 	isb	sy
1a002a2e:	f3bf 8f4f 	dsb	sy
1a002a32:	e7fe      	b.n	1a002a32 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a002a34:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002a36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002a3a:	4a17      	ldr	r2, [pc, #92]	; (1a002a98 <xPortStartScheduler+0x100>)
1a002a3c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a002a3e:	9b01      	ldr	r3, [sp, #4]
1a002a40:	b2db      	uxtb	r3, r3
1a002a42:	4a13      	ldr	r2, [pc, #76]	; (1a002a90 <xPortStartScheduler+0xf8>)
1a002a44:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002a46:	4b15      	ldr	r3, [pc, #84]	; (1a002a9c <xPortStartScheduler+0x104>)
1a002a48:	681a      	ldr	r2, [r3, #0]
1a002a4a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a002a4e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a002a50:	681a      	ldr	r2, [r3, #0]
1a002a52:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a002a56:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a002a58:	f7ff ff82 	bl	1a002960 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a002a5c:	2400      	movs	r4, #0
1a002a5e:	4b10      	ldr	r3, [pc, #64]	; (1a002aa0 <xPortStartScheduler+0x108>)
1a002a60:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a002a62:	f7ff fec5 	bl	1a0027f0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a002a66:	4a0f      	ldr	r2, [pc, #60]	; (1a002aa4 <xPortStartScheduler+0x10c>)
1a002a68:	6813      	ldr	r3, [r2, #0]
1a002a6a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a002a6e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a002a70:	f7ff feaa 	bl	1a0027c8 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a002a74:	f7ff fa9a 	bl	1a001fac <vTaskSwitchContext>
	prvTaskExitError();
1a002a78:	f7ff fe86 	bl	1a002788 <prvTaskExitError>
}
1a002a7c:	4620      	mov	r0, r4
1a002a7e:	b002      	add	sp, #8
1a002a80:	bd10      	pop	{r4, pc}
1a002a82:	bf00      	nop
1a002a84:	e000ed00 	.word	0xe000ed00
1a002a88:	410fc271 	.word	0x410fc271
1a002a8c:	410fc270 	.word	0x410fc270
1a002a90:	e000e400 	.word	0xe000e400
1a002a94:	10002d20 	.word	0x10002d20
1a002a98:	10002d24 	.word	0x10002d24
1a002a9c:	e000ed20 	.word	0xe000ed20
1a002aa0:	10000000 	.word	0x10000000
1a002aa4:	e000ef34 	.word	0xe000ef34

1a002aa8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002aa8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a002aac:	2b0f      	cmp	r3, #15
1a002aae:	d90f      	bls.n	1a002ad0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002ab0:	4a10      	ldr	r2, [pc, #64]	; (1a002af4 <vPortValidateInterruptPriority+0x4c>)
1a002ab2:	5c9b      	ldrb	r3, [r3, r2]
1a002ab4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002ab6:	4a10      	ldr	r2, [pc, #64]	; (1a002af8 <vPortValidateInterruptPriority+0x50>)
1a002ab8:	7812      	ldrb	r2, [r2, #0]
1a002aba:	429a      	cmp	r2, r3
1a002abc:	d908      	bls.n	1a002ad0 <vPortValidateInterruptPriority+0x28>
1a002abe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002ac2:	f383 8811 	msr	BASEPRI, r3
1a002ac6:	f3bf 8f6f 	isb	sy
1a002aca:	f3bf 8f4f 	dsb	sy
1a002ace:	e7fe      	b.n	1a002ace <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002ad0:	4b0a      	ldr	r3, [pc, #40]	; (1a002afc <vPortValidateInterruptPriority+0x54>)
1a002ad2:	681b      	ldr	r3, [r3, #0]
1a002ad4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002ad8:	4a09      	ldr	r2, [pc, #36]	; (1a002b00 <vPortValidateInterruptPriority+0x58>)
1a002ada:	6812      	ldr	r2, [r2, #0]
1a002adc:	4293      	cmp	r3, r2
1a002ade:	d908      	bls.n	1a002af2 <vPortValidateInterruptPriority+0x4a>
1a002ae0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002ae4:	f383 8811 	msr	BASEPRI, r3
1a002ae8:	f3bf 8f6f 	isb	sy
1a002aec:	f3bf 8f4f 	dsb	sy
1a002af0:	e7fe      	b.n	1a002af0 <vPortValidateInterruptPriority+0x48>
	}
1a002af2:	4770      	bx	lr
1a002af4:	e000e3f0 	.word	0xe000e3f0
1a002af8:	10002d20 	.word	0x10002d20
1a002afc:	e000ed0c 	.word	0xe000ed0c
1a002b00:	10002d24 	.word	0x10002d24

1a002b04 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a002b04:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a002b06:	4b05      	ldr	r3, [pc, #20]	; (1a002b1c <DAC_IRQHandler+0x18>)
1a002b08:	2201      	movs	r2, #1
1a002b0a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a002b0e:	4b04      	ldr	r3, [pc, #16]	; (1a002b20 <DAC_IRQHandler+0x1c>)
1a002b10:	681b      	ldr	r3, [r3, #0]
1a002b12:	b113      	cbz	r3, 1a002b1a <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a002b14:	4b02      	ldr	r3, [pc, #8]	; (1a002b20 <DAC_IRQHandler+0x1c>)
1a002b16:	681b      	ldr	r3, [r3, #0]
1a002b18:	4798      	blx	r3
   }
}
1a002b1a:	bd08      	pop	{r3, pc}
1a002b1c:	e000e100 	.word	0xe000e100
1a002b20:	10002d28 	.word	0x10002d28

1a002b24 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002b24:	2200      	movs	r2, #0
1a002b26:	2a05      	cmp	r2, #5
1a002b28:	d819      	bhi.n	1a002b5e <Board_LED_Init+0x3a>
{
1a002b2a:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a002b2c:	490c      	ldr	r1, [pc, #48]	; (1a002b60 <Board_LED_Init+0x3c>)
1a002b2e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a002b32:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a002b36:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a002b38:	4b0a      	ldr	r3, [pc, #40]	; (1a002b64 <Board_LED_Init+0x40>)
1a002b3a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a002b3e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a002b42:	2001      	movs	r0, #1
1a002b44:	40a0      	lsls	r0, r4
1a002b46:	4301      	orrs	r1, r0
1a002b48:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a002b4c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a002b50:	2100      	movs	r1, #0
1a002b52:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002b54:	3201      	adds	r2, #1
1a002b56:	2a05      	cmp	r2, #5
1a002b58:	d9e8      	bls.n	1a002b2c <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a002b5a:	bc70      	pop	{r4, r5, r6}
1a002b5c:	4770      	bx	lr
1a002b5e:	4770      	bx	lr
1a002b60:	1a005428 	.word	0x1a005428
1a002b64:	400f4000 	.word	0x400f4000

1a002b68 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002b68:	2300      	movs	r3, #0
1a002b6a:	2b03      	cmp	r3, #3
1a002b6c:	d816      	bhi.n	1a002b9c <Board_TEC_Init+0x34>
{
1a002b6e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002b70:	490b      	ldr	r1, [pc, #44]	; (1a002ba0 <Board_TEC_Init+0x38>)
1a002b72:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002b76:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002b7a:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a002b7c:	4c09      	ldr	r4, [pc, #36]	; (1a002ba4 <Board_TEC_Init+0x3c>)
1a002b7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002b82:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002b86:	2001      	movs	r0, #1
1a002b88:	40a8      	lsls	r0, r5
1a002b8a:	ea21 0100 	bic.w	r1, r1, r0
1a002b8e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002b92:	3301      	adds	r3, #1
1a002b94:	2b03      	cmp	r3, #3
1a002b96:	d9eb      	bls.n	1a002b70 <Board_TEC_Init+0x8>
   }
}
1a002b98:	bc30      	pop	{r4, r5}
1a002b9a:	4770      	bx	lr
1a002b9c:	4770      	bx	lr
1a002b9e:	bf00      	nop
1a002ba0:	1a005420 	.word	0x1a005420
1a002ba4:	400f4000 	.word	0x400f4000

1a002ba8 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002ba8:	2300      	movs	r3, #0
1a002baa:	2b08      	cmp	r3, #8
1a002bac:	d816      	bhi.n	1a002bdc <Board_GPIO_Init+0x34>
{
1a002bae:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002bb0:	490b      	ldr	r1, [pc, #44]	; (1a002be0 <Board_GPIO_Init+0x38>)
1a002bb2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002bb6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002bba:	784d      	ldrb	r5, [r1, #1]
1a002bbc:	4c09      	ldr	r4, [pc, #36]	; (1a002be4 <Board_GPIO_Init+0x3c>)
1a002bbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002bc2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002bc6:	2001      	movs	r0, #1
1a002bc8:	40a8      	lsls	r0, r5
1a002bca:	ea21 0100 	bic.w	r1, r1, r0
1a002bce:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002bd2:	3301      	adds	r3, #1
1a002bd4:	2b08      	cmp	r3, #8
1a002bd6:	d9eb      	bls.n	1a002bb0 <Board_GPIO_Init+0x8>
   }
}
1a002bd8:	bc30      	pop	{r4, r5}
1a002bda:	4770      	bx	lr
1a002bdc:	4770      	bx	lr
1a002bde:	bf00      	nop
1a002be0:	1a005434 	.word	0x1a005434
1a002be4:	400f4000 	.word	0x400f4000

1a002be8 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a002be8:	b510      	push	{r4, lr}
1a002bea:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a002bec:	4c08      	ldr	r4, [pc, #32]	; (1a002c10 <Board_ADC_Init+0x28>)
1a002bee:	4669      	mov	r1, sp
1a002bf0:	4620      	mov	r0, r4
1a002bf2:	f000 f9df 	bl	1a002fb4 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002bf6:	4a07      	ldr	r2, [pc, #28]	; (1a002c14 <Board_ADC_Init+0x2c>)
1a002bf8:	4669      	mov	r1, sp
1a002bfa:	4620      	mov	r0, r4
1a002bfc:	f000 f9fa 	bl	1a002ff4 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002c00:	2200      	movs	r2, #0
1a002c02:	4669      	mov	r1, sp
1a002c04:	4620      	mov	r0, r4
1a002c06:	f000 fa0e 	bl	1a003026 <Chip_ADC_SetResolution>
}
1a002c0a:	b002      	add	sp, #8
1a002c0c:	bd10      	pop	{r4, pc}
1a002c0e:	bf00      	nop
1a002c10:	400e3000 	.word	0x400e3000
1a002c14:	00061a80 	.word	0x00061a80

1a002c18 <Board_SPI_Init>:
{
1a002c18:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a002c1a:	4c0b      	ldr	r4, [pc, #44]	; (1a002c48 <Board_SPI_Init+0x30>)
1a002c1c:	4620      	mov	r0, r4
1a002c1e:	f000 fe03 	bl	1a003828 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002c22:	6863      	ldr	r3, [r4, #4]
1a002c24:	f023 0304 	bic.w	r3, r3, #4
1a002c28:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a002c2a:	6823      	ldr	r3, [r4, #0]
1a002c2c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002c30:	f043 0307 	orr.w	r3, r3, #7
1a002c34:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a002c36:	4905      	ldr	r1, [pc, #20]	; (1a002c4c <Board_SPI_Init+0x34>)
1a002c38:	4620      	mov	r0, r4
1a002c3a:	f000 fdd6 	bl	1a0037ea <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a002c3e:	6863      	ldr	r3, [r4, #4]
1a002c40:	f043 0302 	orr.w	r3, r3, #2
1a002c44:	6063      	str	r3, [r4, #4]
}
1a002c46:	bd10      	pop	{r4, pc}
1a002c48:	400c5000 	.word	0x400c5000
1a002c4c:	000186a0 	.word	0x000186a0

1a002c50 <Board_I2C_Init>:
{
1a002c50:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a002c52:	2000      	movs	r0, #0
1a002c54:	f000 fd7c 	bl	1a003750 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a002c58:	4b04      	ldr	r3, [pc, #16]	; (1a002c6c <Board_I2C_Init+0x1c>)
1a002c5a:	f640 0208 	movw	r2, #2056	; 0x808
1a002c5e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a002c62:	4903      	ldr	r1, [pc, #12]	; (1a002c70 <Board_I2C_Init+0x20>)
1a002c64:	2000      	movs	r0, #0
1a002c66:	f000 fd85 	bl	1a003774 <Chip_I2C_SetClockRate>
}
1a002c6a:	bd08      	pop	{r3, pc}
1a002c6c:	40086000 	.word	0x40086000
1a002c70:	000f4240 	.word	0x000f4240

1a002c74 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a002c74:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a002c76:	4c07      	ldr	r4, [pc, #28]	; (1a002c94 <Board_Debug_Init+0x20>)
1a002c78:	4620      	mov	r0, r4
1a002c7a:	f000 f8b9 	bl	1a002df0 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a002c7e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002c82:	4620      	mov	r0, r4
1a002c84:	f000 f8fe 	bl	1a002e84 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002c88:	2303      	movs	r3, #3
1a002c8a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a002c8c:	2301      	movs	r3, #1
1a002c8e:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a002c90:	bd10      	pop	{r4, pc}
1a002c92:	bf00      	nop
1a002c94:	400c1000 	.word	0x400c1000

1a002c98 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a002c98:	4b03      	ldr	r3, [pc, #12]	; (1a002ca8 <Board_UARTPutChar+0x10>)
1a002c9a:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a002c9c:	f013 0f20 	tst.w	r3, #32
1a002ca0:	d0fa      	beq.n	1a002c98 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a002ca2:	4b01      	ldr	r3, [pc, #4]	; (1a002ca8 <Board_UARTPutChar+0x10>)
1a002ca4:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a002ca6:	4770      	bx	lr
1a002ca8:	400c1000 	.word	0x400c1000

1a002cac <Board_UARTGetChar>:
	return pUART->LSR;
1a002cac:	4b05      	ldr	r3, [pc, #20]	; (1a002cc4 <Board_UARTGetChar+0x18>)
1a002cae:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a002cb0:	f013 0f01 	tst.w	r3, #1
1a002cb4:	d003      	beq.n	1a002cbe <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002cb6:	4b03      	ldr	r3, [pc, #12]	; (1a002cc4 <Board_UARTGetChar+0x18>)
1a002cb8:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a002cba:	b2c0      	uxtb	r0, r0
1a002cbc:	4770      	bx	lr
   }
   return EOF;
1a002cbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a002cc2:	4770      	bx	lr
1a002cc4:	400c1000 	.word	0x400c1000

1a002cc8 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002cc8:	b508      	push	{r3, lr}
   DEBUGINIT();
1a002cca:	f7ff ffd3 	bl	1a002c74 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a002cce:	4809      	ldr	r0, [pc, #36]	; (1a002cf4 <Board_Init+0x2c>)
1a002cd0:	f000 fd2c 	bl	1a00372c <Chip_GPIO_Init>

   Board_GPIO_Init();
1a002cd4:	f7ff ff68 	bl	1a002ba8 <Board_GPIO_Init>
   Board_ADC_Init();
1a002cd8:	f7ff ff86 	bl	1a002be8 <Board_ADC_Init>
   Board_SPI_Init();
1a002cdc:	f7ff ff9c 	bl	1a002c18 <Board_SPI_Init>
   Board_I2C_Init();
1a002ce0:	f7ff ffb6 	bl	1a002c50 <Board_I2C_Init>

   Board_LED_Init();
1a002ce4:	f7ff ff1e 	bl	1a002b24 <Board_LED_Init>
   Board_TEC_Init();
1a002ce8:	f7ff ff3e 	bl	1a002b68 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a002cec:	f000 fc6a 	bl	1a0035c4 <SystemCoreClockUpdate>
}
1a002cf0:	bd08      	pop	{r3, pc}
1a002cf2:	bf00      	nop
1a002cf4:	400f4000 	.word	0x400f4000

1a002cf8 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a002cf8:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a002cfa:	b2c0      	uxtb	r0, r0
1a002cfc:	f7ff ffcc 	bl	1a002c98 <Board_UARTPutChar>
}
1a002d00:	bd08      	pop	{r3, pc}

1a002d02 <__stdio_getchar>:

int __stdio_getchar()
{
1a002d02:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a002d04:	f7ff ffd2 	bl	1a002cac <Board_UARTGetChar>
}
1a002d08:	bd08      	pop	{r3, pc}

1a002d0a <__stdio_init>:

void __stdio_init()
{
1a002d0a:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a002d0c:	f7ff ffb2 	bl	1a002c74 <Board_Debug_Init>
1a002d10:	bd08      	pop	{r3, pc}
1a002d12:	Address 0x000000001a002d12 is out of bounds.


1a002d14 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002d14:	2300      	movs	r3, #0
1a002d16:	2b1c      	cmp	r3, #28
1a002d18:	d812      	bhi.n	1a002d40 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a002d1a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a002d1c:	4a09      	ldr	r2, [pc, #36]	; (1a002d44 <Board_SetupMuxing+0x30>)
1a002d1e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a002d22:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a002d26:	784a      	ldrb	r2, [r1, #1]
1a002d28:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002d2a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a002d2e:	4906      	ldr	r1, [pc, #24]	; (1a002d48 <Board_SetupMuxing+0x34>)
1a002d30:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002d34:	3301      	adds	r3, #1
1a002d36:	2b1c      	cmp	r3, #28
1a002d38:	d9f0      	bls.n	1a002d1c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a002d3a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002d3e:	4770      	bx	lr
1a002d40:	4770      	bx	lr
1a002d42:	bf00      	nop
1a002d44:	1a005450 	.word	0x1a005450
1a002d48:	40086000 	.word	0x40086000

1a002d4c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a002d4c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a002d4e:	4a17      	ldr	r2, [pc, #92]	; (1a002dac <Board_SetupClocking+0x60>)
1a002d50:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a002d54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002d58:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002d5c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a002d60:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a002d64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002d68:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002d6c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a002d70:	2201      	movs	r2, #1
1a002d72:	490f      	ldr	r1, [pc, #60]	; (1a002db0 <Board_SetupClocking+0x64>)
1a002d74:	2006      	movs	r0, #6
1a002d76:	f000 fc2f 	bl	1a0035d8 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002d7a:	2400      	movs	r4, #0
1a002d7c:	b14c      	cbz	r4, 1a002d92 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a002d7e:	4b0b      	ldr	r3, [pc, #44]	; (1a002dac <Board_SetupClocking+0x60>)
1a002d80:	685a      	ldr	r2, [r3, #4]
1a002d82:	f022 020c 	bic.w	r2, r2, #12
1a002d86:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a002d88:	685a      	ldr	r2, [r3, #4]
1a002d8a:	f042 0203 	orr.w	r2, r2, #3
1a002d8e:	605a      	str	r2, [r3, #4]
}
1a002d90:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a002d92:	4808      	ldr	r0, [pc, #32]	; (1a002db4 <Board_SetupClocking+0x68>)
1a002d94:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002d98:	2301      	movs	r3, #1
1a002d9a:	788a      	ldrb	r2, [r1, #2]
1a002d9c:	7849      	ldrb	r1, [r1, #1]
1a002d9e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002da2:	f000 fb6b 	bl	1a00347c <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002da6:	3401      	adds	r4, #1
1a002da8:	e7e8      	b.n	1a002d7c <Board_SetupClocking+0x30>
1a002daa:	bf00      	nop
1a002dac:	40043000 	.word	0x40043000
1a002db0:	0c28cb00 	.word	0x0c28cb00
1a002db4:	1a00544c 	.word	0x1a00544c

1a002db8 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002db8:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a002dba:	f7ff ffab 	bl	1a002d14 <Board_SetupMuxing>
    Board_SetupClocking();
1a002dbe:	f7ff ffc5 	bl	1a002d4c <Board_SetupClocking>
}
1a002dc2:	bd08      	pop	{r3, pc}

1a002dc4 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a002dc4:	4b09      	ldr	r3, [pc, #36]	; (1a002dec <Chip_UART_GetIndex+0x28>)
1a002dc6:	4298      	cmp	r0, r3
1a002dc8:	d009      	beq.n	1a002dde <Chip_UART_GetIndex+0x1a>
1a002dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a002dce:	4298      	cmp	r0, r3
1a002dd0:	d007      	beq.n	1a002de2 <Chip_UART_GetIndex+0x1e>
1a002dd2:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a002dd6:	4298      	cmp	r0, r3
1a002dd8:	d005      	beq.n	1a002de6 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a002dda:	2000      	movs	r0, #0
1a002ddc:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a002dde:	2002      	movs	r0, #2
1a002de0:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a002de2:	2003      	movs	r0, #3
1a002de4:	4770      	bx	lr
			return 1;
1a002de6:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a002de8:	4770      	bx	lr
1a002dea:	bf00      	nop
1a002dec:	400c1000 	.word	0x400c1000

1a002df0 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a002df0:	b530      	push	{r4, r5, lr}
1a002df2:	b083      	sub	sp, #12
1a002df4:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a002df6:	f7ff ffe5 	bl	1a002dc4 <Chip_UART_GetIndex>
1a002dfa:	2301      	movs	r3, #1
1a002dfc:	461a      	mov	r2, r3
1a002dfe:	4619      	mov	r1, r3
1a002e00:	4d0e      	ldr	r5, [pc, #56]	; (1a002e3c <Chip_UART_Init+0x4c>)
1a002e02:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a002e06:	f000 fb7f 	bl	1a003508 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a002e0a:	2307      	movs	r3, #7
1a002e0c:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a002e0e:	2300      	movs	r3, #0
1a002e10:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a002e12:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a002e14:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a002e16:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a002e18:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a002e1a:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a002e1c:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a002e1e:	4b08      	ldr	r3, [pc, #32]	; (1a002e40 <Chip_UART_Init+0x50>)
1a002e20:	429c      	cmp	r4, r3
1a002e22:	d006      	beq.n	1a002e32 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a002e24:	2303      	movs	r3, #3
1a002e26:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a002e28:	2310      	movs	r3, #16
1a002e2a:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a002e2c:	9b01      	ldr	r3, [sp, #4]
}
1a002e2e:	b003      	add	sp, #12
1a002e30:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a002e32:	2300      	movs	r3, #0
1a002e34:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a002e36:	69a3      	ldr	r3, [r4, #24]
1a002e38:	9301      	str	r3, [sp, #4]
1a002e3a:	e7f3      	b.n	1a002e24 <Chip_UART_Init+0x34>
1a002e3c:	1a0054cc 	.word	0x1a0054cc
1a002e40:	40082000 	.word	0x40082000

1a002e44 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a002e44:	b538      	push	{r3, r4, r5, lr}
1a002e46:	4605      	mov	r5, r0
1a002e48:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002e4a:	f7ff ffbb 	bl	1a002dc4 <Chip_UART_GetIndex>
1a002e4e:	4b0c      	ldr	r3, [pc, #48]	; (1a002e80 <Chip_UART_SetBaud+0x3c>)
1a002e50:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002e54:	f000 fb90 	bl	1a003578 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a002e58:	0123      	lsls	r3, r4, #4
1a002e5a:	fbb0 f3f3 	udiv	r3, r0, r3
1a002e5e:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002e60:	68ea      	ldr	r2, [r5, #12]
1a002e62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a002e66:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a002e68:	6029      	str	r1, [r5, #0]
1a002e6a:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a002e6e:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002e70:	68ea      	ldr	r2, [r5, #12]
1a002e72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a002e76:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a002e78:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a002e7c:	0900      	lsrs	r0, r0, #4
1a002e7e:	bd38      	pop	{r3, r4, r5, pc}
1a002e80:	1a0054c4 	.word	0x1a0054c4

1a002e84 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a002e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002e88:	b083      	sub	sp, #12
1a002e8a:	4683      	mov	fp, r0
1a002e8c:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002e8e:	f7ff ff99 	bl	1a002dc4 <Chip_UART_GetIndex>
1a002e92:	4b35      	ldr	r3, [pc, #212]	; (1a002f68 <Chip_UART_SetBaudFDR+0xe4>)
1a002e94:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002e98:	f000 fb6e 	bl	1a003578 <Chip_Clock_GetRate>
1a002e9c:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a002e9e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a002ea2:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a002ea4:	2300      	movs	r3, #0
1a002ea6:	9301      	str	r3, [sp, #4]
1a002ea8:	46a2      	mov	sl, r4
1a002eaa:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002eac:	e02a      	b.n	1a002f04 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a002eae:	4242      	negs	r2, r0
				div ++;
1a002eb0:	1c4b      	adds	r3, r1, #1
1a002eb2:	e017      	b.n	1a002ee4 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a002eb4:	b30a      	cbz	r2, 1a002efa <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a002eb6:	4617      	mov	r7, r2
			sd = d;
1a002eb8:	9501      	str	r5, [sp, #4]
			sm = m;
1a002eba:	46a2      	mov	sl, r4
			sdiv = div;
1a002ebc:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a002ebe:	3501      	adds	r5, #1
1a002ec0:	42ac      	cmp	r4, r5
1a002ec2:	d91e      	bls.n	1a002f02 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a002ec4:	0933      	lsrs	r3, r6, #4
1a002ec6:	0730      	lsls	r0, r6, #28
1a002ec8:	fba4 0100 	umull	r0, r1, r4, r0
1a002ecc:	fb04 1103 	mla	r1, r4, r3, r1
1a002ed0:	1962      	adds	r2, r4, r5
1a002ed2:	fb08 f202 	mul.w	r2, r8, r2
1a002ed6:	2300      	movs	r3, #0
1a002ed8:	f001 f8d6 	bl	1a004088 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a002edc:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a002ede:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a002ee0:	2800      	cmp	r0, #0
1a002ee2:	dbe4      	blt.n	1a002eae <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a002ee4:	4297      	cmp	r7, r2
1a002ee6:	d3ea      	bcc.n	1a002ebe <Chip_UART_SetBaudFDR+0x3a>
1a002ee8:	2b00      	cmp	r3, #0
1a002eea:	d0e8      	beq.n	1a002ebe <Chip_UART_SetBaudFDR+0x3a>
1a002eec:	0c19      	lsrs	r1, r3, #16
1a002eee:	d1e6      	bne.n	1a002ebe <Chip_UART_SetBaudFDR+0x3a>
1a002ef0:	2b02      	cmp	r3, #2
1a002ef2:	d8df      	bhi.n	1a002eb4 <Chip_UART_SetBaudFDR+0x30>
1a002ef4:	2d00      	cmp	r5, #0
1a002ef6:	d0dd      	beq.n	1a002eb4 <Chip_UART_SetBaudFDR+0x30>
1a002ef8:	e7e1      	b.n	1a002ebe <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a002efa:	4617      	mov	r7, r2
			sd = d;
1a002efc:	9501      	str	r5, [sp, #4]
			sm = m;
1a002efe:	46a2      	mov	sl, r4
			sdiv = div;
1a002f00:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002f02:	3401      	adds	r4, #1
1a002f04:	b11f      	cbz	r7, 1a002f0e <Chip_UART_SetBaudFDR+0x8a>
1a002f06:	2c0f      	cmp	r4, #15
1a002f08:	d801      	bhi.n	1a002f0e <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a002f0a:	2500      	movs	r5, #0
1a002f0c:	e7d8      	b.n	1a002ec0 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a002f0e:	f1b9 0f00 	cmp.w	r9, #0
1a002f12:	d024      	beq.n	1a002f5e <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002f14:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002f1c:	f8cb 300c 	str.w	r3, [fp, #12]
1a002f20:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a002f24:	f8cb 3000 	str.w	r3, [fp]
1a002f28:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a002f2c:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002f30:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002f34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002f38:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a002f3c:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a002f40:	b2db      	uxtb	r3, r3
1a002f42:	9901      	ldr	r1, [sp, #4]
1a002f44:	f001 020f 	and.w	r2, r1, #15
1a002f48:	4313      	orrs	r3, r2
1a002f4a:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a002f4e:	0933      	lsrs	r3, r6, #4
1a002f50:	fb0a f303 	mul.w	r3, sl, r3
1a002f54:	448a      	add	sl, r1
1a002f56:	fb09 f90a 	mul.w	r9, r9, sl
1a002f5a:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a002f5e:	4648      	mov	r0, r9
1a002f60:	b003      	add	sp, #12
1a002f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002f66:	bf00      	nop
1a002f68:	1a0054c4 	.word	0x1a0054c4

1a002f6c <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a002f6c:	4b03      	ldr	r3, [pc, #12]	; (1a002f7c <Chip_ADC_GetClockIndex+0x10>)
1a002f6e:	4298      	cmp	r0, r3
1a002f70:	d001      	beq.n	1a002f76 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a002f72:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a002f74:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a002f76:	2004      	movs	r0, #4
1a002f78:	4770      	bx	lr
1a002f7a:	bf00      	nop
1a002f7c:	400e4000 	.word	0x400e4000

1a002f80 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a002f80:	b570      	push	{r4, r5, r6, lr}
1a002f82:	460d      	mov	r5, r1
1a002f84:	4614      	mov	r4, r2
1a002f86:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a002f88:	f7ff fff0 	bl	1a002f6c <Chip_ADC_GetClockIndex>
1a002f8c:	f000 faf4 	bl	1a003578 <Chip_Clock_GetRate>
	if (burstMode) {
1a002f90:	b965      	cbnz	r5, 1a002fac <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a002f92:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a002f96:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a002f9a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a002f9e:	0064      	lsls	r4, r4, #1
1a002fa0:	fbb0 f0f4 	udiv	r0, r0, r4
1a002fa4:	b2c0      	uxtb	r0, r0
1a002fa6:	3801      	subs	r0, #1
	return div;
}
1a002fa8:	b2c0      	uxtb	r0, r0
1a002faa:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a002fac:	fb04 f406 	mul.w	r4, r4, r6
1a002fb0:	e7f3      	b.n	1a002f9a <getClkDiv+0x1a>
1a002fb2:	Address 0x000000001a002fb2 is out of bounds.


1a002fb4 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a002fb4:	b538      	push	{r3, r4, r5, lr}
1a002fb6:	4605      	mov	r5, r0
1a002fb8:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a002fba:	f7ff ffd7 	bl	1a002f6c <Chip_ADC_GetClockIndex>
1a002fbe:	2301      	movs	r3, #1
1a002fc0:	461a      	mov	r2, r3
1a002fc2:	4619      	mov	r1, r3
1a002fc4:	f000 faa0 	bl	1a003508 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a002fc8:	2100      	movs	r1, #0
1a002fca:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a002fcc:	4a08      	ldr	r2, [pc, #32]	; (1a002ff0 <Chip_ADC_Init+0x3c>)
1a002fce:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a002fd0:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a002fd2:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a002fd4:	230b      	movs	r3, #11
1a002fd6:	4628      	mov	r0, r5
1a002fd8:	f7ff ffd2 	bl	1a002f80 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002fdc:	0200      	lsls	r0, r0, #8
1a002fde:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002fe2:	7920      	ldrb	r0, [r4, #4]
1a002fe4:	0440      	lsls	r0, r0, #17
1a002fe6:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a002fea:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a002fec:	6028      	str	r0, [r5, #0]
}
1a002fee:	bd38      	pop	{r3, r4, r5, pc}
1a002ff0:	00061a80 	.word	0x00061a80

1a002ff4 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a002ff4:	b570      	push	{r4, r5, r6, lr}
1a002ff6:	4605      	mov	r5, r0
1a002ff8:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a002ffa:	6804      	ldr	r4, [r0, #0]
1a002ffc:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a003000:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a003004:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a003006:	790b      	ldrb	r3, [r1, #4]
1a003008:	f1c3 030b 	rsb	r3, r3, #11
1a00300c:	b2db      	uxtb	r3, r3
1a00300e:	7949      	ldrb	r1, [r1, #5]
1a003010:	f7ff ffb6 	bl	1a002f80 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a003014:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a003018:	7930      	ldrb	r0, [r6, #4]
1a00301a:	0440      	lsls	r0, r0, #17
1a00301c:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a003020:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a003022:	6028      	str	r0, [r5, #0]
}
1a003024:	bd70      	pop	{r4, r5, r6, pc}

1a003026 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a003026:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a003028:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a00302a:	680a      	ldr	r2, [r1, #0]
1a00302c:	f7ff ffe2 	bl	1a002ff4 <Chip_ADC_SetSampleRate>
}
1a003030:	bd08      	pop	{r3, pc}
1a003032:	Address 0x000000001a003032 is out of bounds.


1a003034 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003034:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a003036:	680b      	ldr	r3, [r1, #0]
1a003038:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00303c:	d002      	beq.n	1a003044 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a00303e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a003042:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a003044:	4607      	mov	r7, r0
1a003046:	2501      	movs	r5, #1
1a003048:	e03b      	b.n	1a0030c2 <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a00304a:	694b      	ldr	r3, [r1, #20]
1a00304c:	fb03 f302 	mul.w	r3, r3, r2
1a003050:	fbb3 f3f5 	udiv	r3, r3, r5
1a003054:	e014      	b.n	1a003080 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a003056:	461c      	mov	r4, r3
1a003058:	e020      	b.n	1a00309c <pll_calc_divs+0x68>
		return -val;
1a00305a:	f1cc 0c00 	rsb	ip, ip, #0
1a00305e:	e020      	b.n	1a0030a2 <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a003060:	3201      	adds	r2, #1
1a003062:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a003066:	dc26      	bgt.n	1a0030b6 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a003068:	680c      	ldr	r4, [r1, #0]
1a00306a:	f014 0f40 	tst.w	r4, #64	; 0x40
1a00306e:	d0ec      	beq.n	1a00304a <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a003070:	1c73      	adds	r3, r6, #1
1a003072:	fa02 fc03 	lsl.w	ip, r2, r3
1a003076:	694b      	ldr	r3, [r1, #20]
1a003078:	fb03 f30c 	mul.w	r3, r3, ip
1a00307c:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a003080:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a0030d0 <pll_calc_divs+0x9c>
1a003084:	4563      	cmp	r3, ip
1a003086:	d9eb      	bls.n	1a003060 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a003088:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a0030d4 <pll_calc_divs+0xa0>
1a00308c:	4563      	cmp	r3, ip
1a00308e:	d812      	bhi.n	1a0030b6 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a003090:	f014 0f80 	tst.w	r4, #128	; 0x80
1a003094:	d1df      	bne.n	1a003056 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a003096:	1c74      	adds	r4, r6, #1
1a003098:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a00309c:	ebb0 0c04 	subs.w	ip, r0, r4
1a0030a0:	d4db      	bmi.n	1a00305a <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a0030a2:	4567      	cmp	r7, ip
1a0030a4:	d9dc      	bls.n	1a003060 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a0030a6:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a0030a8:	1c77      	adds	r7, r6, #1
1a0030aa:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a0030ac:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a0030ae:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a0030b0:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a0030b2:	4667      	mov	r7, ip
1a0030b4:	e7d4      	b.n	1a003060 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a0030b6:	3601      	adds	r6, #1
1a0030b8:	2e03      	cmp	r6, #3
1a0030ba:	dc01      	bgt.n	1a0030c0 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a0030bc:	2201      	movs	r2, #1
1a0030be:	e7d0      	b.n	1a003062 <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a0030c0:	3501      	adds	r5, #1
1a0030c2:	2d04      	cmp	r5, #4
1a0030c4:	dc01      	bgt.n	1a0030ca <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a0030c6:	2600      	movs	r6, #0
1a0030c8:	e7f6      	b.n	1a0030b8 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a0030ca:	bcf0      	pop	{r4, r5, r6, r7}
1a0030cc:	4770      	bx	lr
1a0030ce:	bf00      	nop
1a0030d0:	094c5eff 	.word	0x094c5eff
1a0030d4:	1312d000 	.word	0x1312d000

1a0030d8 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0030d8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0030da:	b099      	sub	sp, #100	; 0x64
1a0030dc:	4605      	mov	r5, r0
1a0030de:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a0030e0:	225c      	movs	r2, #92	; 0x5c
1a0030e2:	2100      	movs	r1, #0
1a0030e4:	a801      	add	r0, sp, #4
1a0030e6:	f001 fb2c 	bl	1a004742 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a0030ea:	2380      	movs	r3, #128	; 0x80
1a0030ec:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a0030ee:	6963      	ldr	r3, [r4, #20]
1a0030f0:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a0030f2:	7923      	ldrb	r3, [r4, #4]
1a0030f4:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a0030f8:	4669      	mov	r1, sp
1a0030fa:	4628      	mov	r0, r5
1a0030fc:	f7ff ff9a 	bl	1a003034 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a003100:	9b06      	ldr	r3, [sp, #24]
1a003102:	42ab      	cmp	r3, r5
1a003104:	d027      	beq.n	1a003156 <pll_get_frac+0x7e>
	if (val < 0)
1a003106:	1aeb      	subs	r3, r5, r3
1a003108:	d42e      	bmi.n	1a003168 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a00310a:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a00310c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00310e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a003112:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a003114:	6963      	ldr	r3, [r4, #20]
1a003116:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a003118:	7923      	ldrb	r3, [r4, #4]
1a00311a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a00311e:	a910      	add	r1, sp, #64	; 0x40
1a003120:	4628      	mov	r0, r5
1a003122:	f7ff ff87 	bl	1a003034 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a003126:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a003128:	42ab      	cmp	r3, r5
1a00312a:	d01f      	beq.n	1a00316c <pll_get_frac+0x94>
	if (val < 0)
1a00312c:	1aeb      	subs	r3, r5, r3
1a00312e:	d425      	bmi.n	1a00317c <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a003130:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a003132:	4b2b      	ldr	r3, [pc, #172]	; (1a0031e0 <pll_get_frac+0x108>)
1a003134:	429d      	cmp	r5, r3
1a003136:	d923      	bls.n	1a003180 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a003138:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a00313a:	1aed      	subs	r5, r5, r3
1a00313c:	d433      	bmi.n	1a0031a6 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a00313e:	42ae      	cmp	r6, r5
1a003140:	dc3b      	bgt.n	1a0031ba <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a003142:	42be      	cmp	r6, r7
1a003144:	dc31      	bgt.n	1a0031aa <pll_get_frac+0xd2>
			*ppll = pll[0];
1a003146:	466d      	mov	r5, sp
1a003148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00314a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00314c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003150:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003154:	e006      	b.n	1a003164 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a003156:	466d      	mov	r5, sp
1a003158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00315a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00315c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003160:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a003164:	b019      	add	sp, #100	; 0x64
1a003166:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a003168:	425b      	negs	r3, r3
1a00316a:	e7ce      	b.n	1a00310a <pll_get_frac+0x32>
		*ppll = pll[2];
1a00316c:	ad10      	add	r5, sp, #64	; 0x40
1a00316e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003170:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003172:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003176:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a00317a:	e7f3      	b.n	1a003164 <pll_get_frac+0x8c>
		return -val;
1a00317c:	425b      	negs	r3, r3
1a00317e:	e7d7      	b.n	1a003130 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a003180:	2340      	movs	r3, #64	; 0x40
1a003182:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a003184:	6963      	ldr	r3, [r4, #20]
1a003186:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a003188:	a908      	add	r1, sp, #32
1a00318a:	4628      	mov	r0, r5
1a00318c:	f7ff ff52 	bl	1a003034 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a003190:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a003192:	42ab      	cmp	r3, r5
1a003194:	d1d0      	bne.n	1a003138 <pll_get_frac+0x60>
			*ppll = pll[1];
1a003196:	ad08      	add	r5, sp, #32
1a003198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00319a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00319c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0031a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a0031a4:	e7de      	b.n	1a003164 <pll_get_frac+0x8c>
		return -val;
1a0031a6:	426d      	negs	r5, r5
1a0031a8:	e7c9      	b.n	1a00313e <pll_get_frac+0x66>
			*ppll = pll[2];
1a0031aa:	ad10      	add	r5, sp, #64	; 0x40
1a0031ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0031ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0031b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0031b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0031b8:	e7d4      	b.n	1a003164 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a0031ba:	42af      	cmp	r7, r5
1a0031bc:	db07      	blt.n	1a0031ce <pll_get_frac+0xf6>
			*ppll = pll[1];
1a0031be:	ad08      	add	r5, sp, #32
1a0031c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0031c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0031c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0031c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0031cc:	e7ca      	b.n	1a003164 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a0031ce:	ad10      	add	r5, sp, #64	; 0x40
1a0031d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0031d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0031d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0031d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0031dc:	e7c2      	b.n	1a003164 <pll_get_frac+0x8c>
1a0031de:	bf00      	nop
1a0031e0:	068e7780 	.word	0x068e7780

1a0031e4 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a0031e4:	b430      	push	{r4, r5}
1a0031e6:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a0031e8:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a0031ea:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0031ec:	e000      	b.n	1a0031f0 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a0031ee:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0031f0:	281c      	cmp	r0, #28
1a0031f2:	d118      	bne.n	1a003226 <Chip_Clock_FindBaseClock+0x42>
1a0031f4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0031f8:	0051      	lsls	r1, r2, #1
1a0031fa:	4a0c      	ldr	r2, [pc, #48]	; (1a00322c <Chip_Clock_FindBaseClock+0x48>)
1a0031fc:	440a      	add	r2, r1
1a0031fe:	7914      	ldrb	r4, [r2, #4]
1a003200:	4284      	cmp	r4, r0
1a003202:	d010      	beq.n	1a003226 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a003204:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a003208:	004a      	lsls	r2, r1, #1
1a00320a:	4908      	ldr	r1, [pc, #32]	; (1a00322c <Chip_Clock_FindBaseClock+0x48>)
1a00320c:	5a8a      	ldrh	r2, [r1, r2]
1a00320e:	42aa      	cmp	r2, r5
1a003210:	d8ed      	bhi.n	1a0031ee <Chip_Clock_FindBaseClock+0xa>
1a003212:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003216:	0051      	lsls	r1, r2, #1
1a003218:	4a04      	ldr	r2, [pc, #16]	; (1a00322c <Chip_Clock_FindBaseClock+0x48>)
1a00321a:	440a      	add	r2, r1
1a00321c:	8852      	ldrh	r2, [r2, #2]
1a00321e:	42aa      	cmp	r2, r5
1a003220:	d3e5      	bcc.n	1a0031ee <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a003222:	4620      	mov	r0, r4
1a003224:	e7e4      	b.n	1a0031f0 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a003226:	bc30      	pop	{r4, r5}
1a003228:	4770      	bx	lr
1a00322a:	bf00      	nop
1a00322c:	1a0054e0 	.word	0x1a0054e0

1a003230 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a003230:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a003232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a003236:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a003238:	4a0d      	ldr	r2, [pc, #52]	; (1a003270 <Chip_Clock_EnableCrystal+0x40>)
1a00323a:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a00323c:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a003240:	6992      	ldr	r2, [r2, #24]
1a003242:	428a      	cmp	r2, r1
1a003244:	d001      	beq.n	1a00324a <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a003246:	4a0a      	ldr	r2, [pc, #40]	; (1a003270 <Chip_Clock_EnableCrystal+0x40>)
1a003248:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a00324a:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a00324e:	4a09      	ldr	r2, [pc, #36]	; (1a003274 <Chip_Clock_EnableCrystal+0x44>)
1a003250:	6811      	ldr	r1, [r2, #0]
1a003252:	4a09      	ldr	r2, [pc, #36]	; (1a003278 <Chip_Clock_EnableCrystal+0x48>)
1a003254:	4291      	cmp	r1, r2
1a003256:	d901      	bls.n	1a00325c <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a003258:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00325c:	4a04      	ldr	r2, [pc, #16]	; (1a003270 <Chip_Clock_EnableCrystal+0x40>)
1a00325e:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a003260:	9b01      	ldr	r3, [sp, #4]
1a003262:	1e5a      	subs	r2, r3, #1
1a003264:	9201      	str	r2, [sp, #4]
1a003266:	2b00      	cmp	r3, #0
1a003268:	d1fa      	bne.n	1a003260 <Chip_Clock_EnableCrystal+0x30>
}
1a00326a:	b002      	add	sp, #8
1a00326c:	4770      	bx	lr
1a00326e:	bf00      	nop
1a003270:	40050000 	.word	0x40050000
1a003274:	1a005448 	.word	0x1a005448
1a003278:	01312cff 	.word	0x01312cff

1a00327c <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a00327c:	3012      	adds	r0, #18
1a00327e:	4b05      	ldr	r3, [pc, #20]	; (1a003294 <Chip_Clock_GetDividerSource+0x18>)
1a003280:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a003284:	f010 0f01 	tst.w	r0, #1
1a003288:	d102      	bne.n	1a003290 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00328a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00328e:	4770      	bx	lr
		return CLKINPUT_PD;
1a003290:	2011      	movs	r0, #17
}
1a003292:	4770      	bx	lr
1a003294:	40050000 	.word	0x40050000

1a003298 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a003298:	f100 0212 	add.w	r2, r0, #18
1a00329c:	4b03      	ldr	r3, [pc, #12]	; (1a0032ac <Chip_Clock_GetDividerDivisor+0x14>)
1a00329e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a0032a2:	4b03      	ldr	r3, [pc, #12]	; (1a0032b0 <Chip_Clock_GetDividerDivisor+0x18>)
1a0032a4:	5c18      	ldrb	r0, [r3, r0]
}
1a0032a6:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a0032aa:	4770      	bx	lr
1a0032ac:	40050000 	.word	0x40050000
1a0032b0:	1a0054d8 	.word	0x1a0054d8

1a0032b4 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a0032b4:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a0032b6:	2810      	cmp	r0, #16
1a0032b8:	d80a      	bhi.n	1a0032d0 <Chip_Clock_GetClockInputHz+0x1c>
1a0032ba:	e8df f000 	tbb	[pc, r0]
1a0032be:	0b42      	.short	0x0b42
1a0032c0:	091f160d 	.word	0x091f160d
1a0032c4:	2b282522 	.word	0x2b282522
1a0032c8:	322e0909 	.word	0x322e0909
1a0032cc:	3a36      	.short	0x3a36
1a0032ce:	3e          	.byte	0x3e
1a0032cf:	00          	.byte	0x00
	uint32_t rate = 0;
1a0032d0:	2000      	movs	r0, #0
1a0032d2:	e038      	b.n	1a003346 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a0032d4:	481e      	ldr	r0, [pc, #120]	; (1a003350 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a0032d6:	e036      	b.n	1a003346 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0032d8:	4b1e      	ldr	r3, [pc, #120]	; (1a003354 <Chip_Clock_GetClockInputHz+0xa0>)
1a0032da:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0032de:	f003 0307 	and.w	r3, r3, #7
1a0032e2:	2b04      	cmp	r3, #4
1a0032e4:	d130      	bne.n	1a003348 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a0032e6:	2000      	movs	r0, #0
1a0032e8:	e02d      	b.n	1a003346 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0032ea:	4b1a      	ldr	r3, [pc, #104]	; (1a003354 <Chip_Clock_GetClockInputHz+0xa0>)
1a0032ec:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0032f0:	f003 0307 	and.w	r3, r3, #7
1a0032f4:	2b04      	cmp	r3, #4
1a0032f6:	d029      	beq.n	1a00334c <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a0032f8:	4817      	ldr	r0, [pc, #92]	; (1a003358 <Chip_Clock_GetClockInputHz+0xa4>)
1a0032fa:	e024      	b.n	1a003346 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a0032fc:	4b17      	ldr	r3, [pc, #92]	; (1a00335c <Chip_Clock_GetClockInputHz+0xa8>)
1a0032fe:	6818      	ldr	r0, [r3, #0]
		break;
1a003300:	e021      	b.n	1a003346 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a003302:	4b17      	ldr	r3, [pc, #92]	; (1a003360 <Chip_Clock_GetClockInputHz+0xac>)
1a003304:	6818      	ldr	r0, [r3, #0]
		break;
1a003306:	e01e      	b.n	1a003346 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a003308:	4b16      	ldr	r3, [pc, #88]	; (1a003364 <Chip_Clock_GetClockInputHz+0xb0>)
1a00330a:	6818      	ldr	r0, [r3, #0]
		break;
1a00330c:	e01b      	b.n	1a003346 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00330e:	4b15      	ldr	r3, [pc, #84]	; (1a003364 <Chip_Clock_GetClockInputHz+0xb0>)
1a003310:	6858      	ldr	r0, [r3, #4]
		break;
1a003312:	e018      	b.n	1a003346 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a003314:	f000 f86a 	bl	1a0033ec <Chip_Clock_GetMainPLLHz>
		break;
1a003318:	e015      	b.n	1a003346 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a00331a:	2100      	movs	r1, #0
1a00331c:	f000 f89c 	bl	1a003458 <Chip_Clock_GetDivRate>
		break;
1a003320:	e011      	b.n	1a003346 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a003322:	2101      	movs	r1, #1
1a003324:	f000 f898 	bl	1a003458 <Chip_Clock_GetDivRate>
		break;
1a003328:	e00d      	b.n	1a003346 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a00332a:	2102      	movs	r1, #2
1a00332c:	f000 f894 	bl	1a003458 <Chip_Clock_GetDivRate>
		break;
1a003330:	e009      	b.n	1a003346 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a003332:	2103      	movs	r1, #3
1a003334:	f000 f890 	bl	1a003458 <Chip_Clock_GetDivRate>
		break;
1a003338:	e005      	b.n	1a003346 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a00333a:	2104      	movs	r1, #4
1a00333c:	f000 f88c 	bl	1a003458 <Chip_Clock_GetDivRate>
		break;
1a003340:	e001      	b.n	1a003346 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a003342:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a003346:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a003348:	4803      	ldr	r0, [pc, #12]	; (1a003358 <Chip_Clock_GetClockInputHz+0xa4>)
1a00334a:	e7fc      	b.n	1a003346 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a00334c:	4806      	ldr	r0, [pc, #24]	; (1a003368 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a00334e:	e7fa      	b.n	1a003346 <Chip_Clock_GetClockInputHz+0x92>
1a003350:	00b71b00 	.word	0x00b71b00
1a003354:	40043000 	.word	0x40043000
1a003358:	017d7840 	.word	0x017d7840
1a00335c:	1a00541c 	.word	0x1a00541c
1a003360:	1a005448 	.word	0x1a005448
1a003364:	10002d2c 	.word	0x10002d2c
1a003368:	02faf080 	.word	0x02faf080

1a00336c <Chip_Clock_CalcMainPLLValue>:
{
1a00336c:	b538      	push	{r3, r4, r5, lr}
1a00336e:	4605      	mov	r5, r0
1a003370:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a003372:	7908      	ldrb	r0, [r1, #4]
1a003374:	f7ff ff9e 	bl	1a0032b4 <Chip_Clock_GetClockInputHz>
1a003378:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a00337a:	4b19      	ldr	r3, [pc, #100]	; (1a0033e0 <Chip_Clock_CalcMainPLLValue+0x74>)
1a00337c:	442b      	add	r3, r5
1a00337e:	4a19      	ldr	r2, [pc, #100]	; (1a0033e4 <Chip_Clock_CalcMainPLLValue+0x78>)
1a003380:	4293      	cmp	r3, r2
1a003382:	d821      	bhi.n	1a0033c8 <Chip_Clock_CalcMainPLLValue+0x5c>
1a003384:	b318      	cbz	r0, 1a0033ce <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a003386:	2380      	movs	r3, #128	; 0x80
1a003388:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a00338a:	2300      	movs	r3, #0
1a00338c:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a00338e:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a003390:	fbb5 f3f0 	udiv	r3, r5, r0
1a003394:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a003396:	4a14      	ldr	r2, [pc, #80]	; (1a0033e8 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a003398:	4295      	cmp	r5, r2
1a00339a:	d903      	bls.n	1a0033a4 <Chip_Clock_CalcMainPLLValue+0x38>
1a00339c:	fb03 f000 	mul.w	r0, r3, r0
1a0033a0:	42a8      	cmp	r0, r5
1a0033a2:	d007      	beq.n	1a0033b4 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a0033a4:	4621      	mov	r1, r4
1a0033a6:	4628      	mov	r0, r5
1a0033a8:	f7ff fe96 	bl	1a0030d8 <pll_get_frac>
		if (!ppll->nsel) {
1a0033ac:	68a3      	ldr	r3, [r4, #8]
1a0033ae:	b18b      	cbz	r3, 1a0033d4 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a0033b0:	3b01      	subs	r3, #1
1a0033b2:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a0033b4:	6923      	ldr	r3, [r4, #16]
1a0033b6:	b183      	cbz	r3, 1a0033da <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a0033b8:	68e2      	ldr	r2, [r4, #12]
1a0033ba:	b10a      	cbz	r2, 1a0033c0 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a0033bc:	3a01      	subs	r2, #1
1a0033be:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a0033c0:	3b01      	subs	r3, #1
1a0033c2:	6123      	str	r3, [r4, #16]
	return 0;
1a0033c4:	2000      	movs	r0, #0
}
1a0033c6:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a0033c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0033cc:	e7fb      	b.n	1a0033c6 <Chip_Clock_CalcMainPLLValue+0x5a>
1a0033ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0033d2:	e7f8      	b.n	1a0033c6 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a0033d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0033d8:	e7f5      	b.n	1a0033c6 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a0033da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0033de:	e7f2      	b.n	1a0033c6 <Chip_Clock_CalcMainPLLValue+0x5a>
1a0033e0:	ff6b3a10 	.word	0xff6b3a10
1a0033e4:	0b940510 	.word	0x0b940510
1a0033e8:	094c5eff 	.word	0x094c5eff

1a0033ec <Chip_Clock_GetMainPLLHz>:
{
1a0033ec:	b530      	push	{r4, r5, lr}
1a0033ee:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a0033f0:	4d17      	ldr	r5, [pc, #92]	; (1a003450 <Chip_Clock_GetMainPLLHz+0x64>)
1a0033f2:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a0033f4:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a0033f8:	f7ff ff5c 	bl	1a0032b4 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a0033fc:	4b15      	ldr	r3, [pc, #84]	; (1a003454 <Chip_Clock_GetMainPLLHz+0x68>)
1a0033fe:	681b      	ldr	r3, [r3, #0]
1a003400:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a003402:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a003404:	f013 0f01 	tst.w	r3, #1
1a003408:	d01f      	beq.n	1a00344a <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a00340a:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a00340e:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a003412:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a003416:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a00341a:	3301      	adds	r3, #1
	n = nsel + 1;
1a00341c:	3201      	adds	r2, #1
	p = ptab[psel];
1a00341e:	f10d 0c08 	add.w	ip, sp, #8
1a003422:	4461      	add	r1, ip
1a003424:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a003428:	f014 0f80 	tst.w	r4, #128	; 0x80
1a00342c:	d108      	bne.n	1a003440 <Chip_Clock_GetMainPLLHz+0x54>
1a00342e:	b93d      	cbnz	r5, 1a003440 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a003430:	0049      	lsls	r1, r1, #1
1a003432:	fbb3 f3f1 	udiv	r3, r3, r1
1a003436:	fbb0 f0f2 	udiv	r0, r0, r2
1a00343a:	fb00 f003 	mul.w	r0, r0, r3
1a00343e:	e005      	b.n	1a00344c <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a003440:	fbb0 f0f2 	udiv	r0, r0, r2
1a003444:	fb03 f000 	mul.w	r0, r3, r0
1a003448:	e000      	b.n	1a00344c <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a00344a:	2000      	movs	r0, #0
}
1a00344c:	b003      	add	sp, #12
1a00344e:	bd30      	pop	{r4, r5, pc}
1a003450:	40050000 	.word	0x40050000
1a003454:	1a0054d4 	.word	0x1a0054d4

1a003458 <Chip_Clock_GetDivRate>:
{
1a003458:	b538      	push	{r3, r4, r5, lr}
1a00345a:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a00345c:	4608      	mov	r0, r1
1a00345e:	f7ff ff0d 	bl	1a00327c <Chip_Clock_GetDividerSource>
1a003462:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a003464:	4620      	mov	r0, r4
1a003466:	f7ff ff17 	bl	1a003298 <Chip_Clock_GetDividerDivisor>
1a00346a:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a00346c:	4628      	mov	r0, r5
1a00346e:	f7ff ff21 	bl	1a0032b4 <Chip_Clock_GetClockInputHz>
1a003472:	3401      	adds	r4, #1
}
1a003474:	fbb0 f0f4 	udiv	r0, r0, r4
1a003478:	bd38      	pop	{r3, r4, r5, pc}
1a00347a:	Address 0x000000001a00347a is out of bounds.


1a00347c <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a00347c:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a00347e:	f100 0416 	add.w	r4, r0, #22
1a003482:	00a4      	lsls	r4, r4, #2
1a003484:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a003488:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a00348c:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a00348e:	281b      	cmp	r0, #27
1a003490:	d813      	bhi.n	1a0034ba <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a003492:	2911      	cmp	r1, #17
1a003494:	d01a      	beq.n	1a0034cc <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a003496:	4d0e      	ldr	r5, [pc, #56]	; (1a0034d0 <Chip_Clock_SetBaseClock+0x54>)
1a003498:	4025      	ands	r5, r4

			if (autoblocken) {
1a00349a:	b10a      	cbz	r2, 1a0034a0 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a00349c:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a0034a0:	b10b      	cbz	r3, 1a0034a6 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a0034a2:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a0034a6:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0034aa:	3016      	adds	r0, #22
1a0034ac:	0080      	lsls	r0, r0, #2
1a0034ae:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0034b2:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0034b6:	6045      	str	r5, [r0, #4]
1a0034b8:	e008      	b.n	1a0034cc <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a0034ba:	f044 0401 	orr.w	r4, r4, #1
1a0034be:	3016      	adds	r0, #22
1a0034c0:	0080      	lsls	r0, r0, #2
1a0034c2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0034c6:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0034ca:	6044      	str	r4, [r0, #4]
	}
}
1a0034cc:	bc30      	pop	{r4, r5}
1a0034ce:	4770      	bx	lr
1a0034d0:	e0fff7fe 	.word	0xe0fff7fe

1a0034d4 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a0034d4:	281b      	cmp	r0, #27
1a0034d6:	d80c      	bhi.n	1a0034f2 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a0034d8:	3016      	adds	r0, #22
1a0034da:	0080      	lsls	r0, r0, #2
1a0034dc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0034e0:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0034e4:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a0034e6:	f010 0f01 	tst.w	r0, #1
1a0034ea:	d104      	bne.n	1a0034f6 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0034ec:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0034f0:	4770      	bx	lr
		return CLKINPUT_PD;
1a0034f2:	2011      	movs	r0, #17
1a0034f4:	4770      	bx	lr
		return CLKINPUT_PD;
1a0034f6:	2011      	movs	r0, #17
}
1a0034f8:	4770      	bx	lr

1a0034fa <Chip_Clock_GetBaseClocktHz>:
{
1a0034fa:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a0034fc:	f7ff ffea 	bl	1a0034d4 <Chip_Clock_GetBaseClock>
1a003500:	f7ff fed8 	bl	1a0032b4 <Chip_Clock_GetClockInputHz>
}
1a003504:	bd08      	pop	{r3, pc}
1a003506:	Address 0x000000001a003506 is out of bounds.


1a003508 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a003508:	b969      	cbnz	r1, 1a003526 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a00350a:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a00350c:	b10a      	cbz	r2, 1a003512 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a00350e:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a003512:	2b02      	cmp	r3, #2
1a003514:	d009      	beq.n	1a00352a <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a003516:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00351a:	d209      	bcs.n	1a003530 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a00351c:	3020      	adds	r0, #32
1a00351e:	4b07      	ldr	r3, [pc, #28]	; (1a00353c <Chip_Clock_EnableOpts+0x34>)
1a003520:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a003524:	4770      	bx	lr
		reg |= (1 << 1);
1a003526:	2103      	movs	r1, #3
1a003528:	e7f0      	b.n	1a00350c <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a00352a:	f041 0120 	orr.w	r1, r1, #32
1a00352e:	e7f2      	b.n	1a003516 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a003530:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003534:	4b02      	ldr	r3, [pc, #8]	; (1a003540 <Chip_Clock_EnableOpts+0x38>)
1a003536:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00353a:	4770      	bx	lr
1a00353c:	40051000 	.word	0x40051000
1a003540:	40052000 	.word	0x40052000

1a003544 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a003544:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003548:	d208      	bcs.n	1a00355c <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a00354a:	4a09      	ldr	r2, [pc, #36]	; (1a003570 <Chip_Clock_Enable+0x2c>)
1a00354c:	3020      	adds	r0, #32
1a00354e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003552:	f043 0301 	orr.w	r3, r3, #1
1a003556:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a00355a:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a00355c:	4a05      	ldr	r2, [pc, #20]	; (1a003574 <Chip_Clock_Enable+0x30>)
1a00355e:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003562:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003566:	f043 0301 	orr.w	r3, r3, #1
1a00356a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00356e:	4770      	bx	lr
1a003570:	40051000 	.word	0x40051000
1a003574:	40052000 	.word	0x40052000

1a003578 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a003578:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a00357a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00357e:	d309      	bcc.n	1a003594 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a003580:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a003584:	4a0d      	ldr	r2, [pc, #52]	; (1a0035bc <Chip_Clock_GetRate+0x44>)
1a003586:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a00358a:	f014 0f01 	tst.w	r4, #1
1a00358e:	d107      	bne.n	1a0035a0 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a003590:	2000      	movs	r0, #0
	}

	return rate;
}
1a003592:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a003594:	f100 0320 	add.w	r3, r0, #32
1a003598:	4a09      	ldr	r2, [pc, #36]	; (1a0035c0 <Chip_Clock_GetRate+0x48>)
1a00359a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00359e:	e7f4      	b.n	1a00358a <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a0035a0:	f7ff fe20 	bl	1a0031e4 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0035a4:	f7ff ffa9 	bl	1a0034fa <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a0035a8:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0035ac:	d103      	bne.n	1a0035b6 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a0035ae:	2301      	movs	r3, #1
		rate = rate / div;
1a0035b0:	fbb0 f0f3 	udiv	r0, r0, r3
1a0035b4:	e7ed      	b.n	1a003592 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a0035b6:	2302      	movs	r3, #2
1a0035b8:	e7fa      	b.n	1a0035b0 <Chip_Clock_GetRate+0x38>
1a0035ba:	bf00      	nop
1a0035bc:	40052000 	.word	0x40052000
1a0035c0:	40051000 	.word	0x40051000

1a0035c4 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0035c4:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0035c6:	2069      	movs	r0, #105	; 0x69
1a0035c8:	f7ff ffd6 	bl	1a003578 <Chip_Clock_GetRate>
1a0035cc:	4b01      	ldr	r3, [pc, #4]	; (1a0035d4 <SystemCoreClockUpdate+0x10>)
1a0035ce:	6018      	str	r0, [r3, #0]
}
1a0035d0:	bd08      	pop	{r3, pc}
1a0035d2:	bf00      	nop
1a0035d4:	10002e2c 	.word	0x10002e2c

1a0035d8 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0035d8:	b570      	push	{r4, r5, r6, lr}
1a0035da:	b08a      	sub	sp, #40	; 0x28
1a0035dc:	4605      	mov	r5, r0
1a0035de:	460e      	mov	r6, r1
1a0035e0:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0035e2:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0035e6:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0035e8:	2806      	cmp	r0, #6
1a0035ea:	d018      	beq.n	1a00361e <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0035ec:	2300      	movs	r3, #0
1a0035ee:	2201      	movs	r2, #1
1a0035f0:	4629      	mov	r1, r5
1a0035f2:	2004      	movs	r0, #4
1a0035f4:	f7ff ff42 	bl	1a00347c <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0035f8:	4a49      	ldr	r2, [pc, #292]	; (1a003720 <Chip_SetupCoreClock+0x148>)
1a0035fa:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0035fc:	f043 0301 	orr.w	r3, r3, #1
1a003600:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a003602:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a003606:	a901      	add	r1, sp, #4
1a003608:	4630      	mov	r0, r6
1a00360a:	f7ff feaf 	bl	1a00336c <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00360e:	4b45      	ldr	r3, [pc, #276]	; (1a003724 <Chip_SetupCoreClock+0x14c>)
1a003610:	429e      	cmp	r6, r3
1a003612:	d916      	bls.n	1a003642 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a003614:	9b01      	ldr	r3, [sp, #4]
1a003616:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00361a:	d003      	beq.n	1a003624 <Chip_SetupCoreClock+0x4c>
1a00361c:	e7fe      	b.n	1a00361c <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a00361e:	f7ff fe07 	bl	1a003230 <Chip_Clock_EnableCrystal>
1a003622:	e7e3      	b.n	1a0035ec <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a003624:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003628:	d005      	beq.n	1a003636 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a00362a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00362e:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a003630:	2500      	movs	r5, #0
			direct = 1;
1a003632:	2601      	movs	r6, #1
1a003634:	e007      	b.n	1a003646 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a003636:	9b04      	ldr	r3, [sp, #16]
1a003638:	3301      	adds	r3, #1
1a00363a:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a00363c:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a00363e:	2600      	movs	r6, #0
1a003640:	e001      	b.n	1a003646 <Chip_SetupCoreClock+0x6e>
1a003642:	2500      	movs	r5, #0
1a003644:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003646:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00364a:	9b01      	ldr	r3, [sp, #4]
1a00364c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003650:	9a05      	ldr	r2, [sp, #20]
1a003652:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003656:	9a03      	ldr	r2, [sp, #12]
1a003658:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00365c:	9a04      	ldr	r2, [sp, #16]
1a00365e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003662:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003666:	4a2e      	ldr	r2, [pc, #184]	; (1a003720 <Chip_SetupCoreClock+0x148>)
1a003668:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a00366a:	4b2d      	ldr	r3, [pc, #180]	; (1a003720 <Chip_SetupCoreClock+0x148>)
1a00366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00366e:	f013 0f01 	tst.w	r3, #1
1a003672:	d0fa      	beq.n	1a00366a <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a003674:	2300      	movs	r3, #0
1a003676:	2201      	movs	r2, #1
1a003678:	2109      	movs	r1, #9
1a00367a:	2004      	movs	r0, #4
1a00367c:	f7ff fefe 	bl	1a00347c <Chip_Clock_SetBaseClock>

	if (direct) {
1a003680:	b1fe      	cbz	r6, 1a0036c2 <Chip_SetupCoreClock+0xea>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003682:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003686:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a003688:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00368a:	1e5a      	subs	r2, r3, #1
1a00368c:	9209      	str	r2, [sp, #36]	; 0x24
1a00368e:	2b00      	cmp	r3, #0
1a003690:	d1fa      	bne.n	1a003688 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a003692:	9b01      	ldr	r3, [sp, #4]
1a003694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003698:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00369a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00369e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0036a2:	9a05      	ldr	r2, [sp, #20]
1a0036a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0036a8:	9a03      	ldr	r2, [sp, #12]
1a0036aa:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0036ae:	9a04      	ldr	r2, [sp, #16]
1a0036b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0036b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0036b8:	4a19      	ldr	r2, [pc, #100]	; (1a003720 <Chip_SetupCoreClock+0x148>)
1a0036ba:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0036bc:	b36c      	cbz	r4, 1a00371a <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0036be:	2400      	movs	r4, #0
1a0036c0:	e029      	b.n	1a003716 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a0036c2:	2d00      	cmp	r5, #0
1a0036c4:	d0fa      	beq.n	1a0036bc <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0036c6:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0036ca:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0036cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0036ce:	1e5a      	subs	r2, r3, #1
1a0036d0:	9209      	str	r2, [sp, #36]	; 0x24
1a0036d2:	2b00      	cmp	r3, #0
1a0036d4:	d1fa      	bne.n	1a0036cc <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a0036d6:	9b04      	ldr	r3, [sp, #16]
1a0036d8:	1e5a      	subs	r2, r3, #1
1a0036da:	9204      	str	r2, [sp, #16]
1a0036dc:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0036e0:	9b01      	ldr	r3, [sp, #4]
1a0036e2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0036e6:	9905      	ldr	r1, [sp, #20]
1a0036e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0036ec:	9903      	ldr	r1, [sp, #12]
1a0036ee:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0036f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0036f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0036fa:	4a09      	ldr	r2, [pc, #36]	; (1a003720 <Chip_SetupCoreClock+0x148>)
1a0036fc:	6453      	str	r3, [r2, #68]	; 0x44
1a0036fe:	e7dd      	b.n	1a0036bc <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a003700:	4809      	ldr	r0, [pc, #36]	; (1a003728 <Chip_SetupCoreClock+0x150>)
1a003702:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a003706:	78cb      	ldrb	r3, [r1, #3]
1a003708:	788a      	ldrb	r2, [r1, #2]
1a00370a:	7849      	ldrb	r1, [r1, #1]
1a00370c:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a003710:	f7ff feb4 	bl	1a00347c <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003714:	3401      	adds	r4, #1
1a003716:	2c11      	cmp	r4, #17
1a003718:	d9f2      	bls.n	1a003700 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a00371a:	b00a      	add	sp, #40	; 0x28
1a00371c:	bd70      	pop	{r4, r5, r6, pc}
1a00371e:	bf00      	nop
1a003720:	40050000 	.word	0x40050000
1a003724:	068e7780 	.word	0x068e7780
1a003728:	1a00554c 	.word	0x1a00554c

1a00372c <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a00372c:	4770      	bx	lr
1a00372e:	Address 0x000000001a00372e is out of bounds.


1a003730 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a003730:	2901      	cmp	r1, #1
1a003732:	d000      	beq.n	1a003736 <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a003734:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a003736:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00373a:	0082      	lsls	r2, r0, #2
1a00373c:	4b03      	ldr	r3, [pc, #12]	; (1a00374c <Chip_I2C_EventHandler+0x1c>)
1a00373e:	4413      	add	r3, r2
1a003740:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a003742:	7d13      	ldrb	r3, [r2, #20]
1a003744:	b2db      	uxtb	r3, r3
1a003746:	2b04      	cmp	r3, #4
1a003748:	d0fb      	beq.n	1a003742 <Chip_I2C_EventHandler+0x12>
1a00374a:	e7f3      	b.n	1a003734 <Chip_I2C_EventHandler+0x4>
1a00374c:	10000004 	.word	0x10000004

1a003750 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a003750:	b570      	push	{r4, r5, r6, lr}
1a003752:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a003754:	4e06      	ldr	r6, [pc, #24]	; (1a003770 <Chip_I2C_Init+0x20>)
1a003756:	00c4      	lsls	r4, r0, #3
1a003758:	1a22      	subs	r2, r4, r0
1a00375a:	0093      	lsls	r3, r2, #2
1a00375c:	4433      	add	r3, r6
1a00375e:	8898      	ldrh	r0, [r3, #4]
1a003760:	f7ff fef0 	bl	1a003544 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a003764:	1b64      	subs	r4, r4, r5
1a003766:	00a3      	lsls	r3, r4, #2
1a003768:	58f3      	ldr	r3, [r6, r3]
1a00376a:	226c      	movs	r2, #108	; 0x6c
1a00376c:	619a      	str	r2, [r3, #24]
}
1a00376e:	bd70      	pop	{r4, r5, r6, pc}
1a003770:	10000004 	.word	0x10000004

1a003774 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a003774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003778:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00377a:	4e0b      	ldr	r6, [pc, #44]	; (1a0037a8 <Chip_I2C_SetClockRate+0x34>)
1a00377c:	00c5      	lsls	r5, r0, #3
1a00377e:	1a2b      	subs	r3, r5, r0
1a003780:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a003784:	eb06 0308 	add.w	r3, r6, r8
1a003788:	8898      	ldrh	r0, [r3, #4]
1a00378a:	f7ff fef5 	bl	1a003578 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a00378e:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a003792:	f856 3008 	ldr.w	r3, [r6, r8]
1a003796:	0842      	lsrs	r2, r0, #1
1a003798:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a00379a:	f856 3008 	ldr.w	r3, [r6, r8]
1a00379e:	691a      	ldr	r2, [r3, #16]
1a0037a0:	1a80      	subs	r0, r0, r2
1a0037a2:	6158      	str	r0, [r3, #20]
}
1a0037a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0037a8:	10000004 	.word	0x10000004

1a0037ac <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0037ac:	4b03      	ldr	r3, [pc, #12]	; (1a0037bc <Chip_SSP_GetClockIndex+0x10>)
1a0037ae:	4298      	cmp	r0, r3
1a0037b0:	d001      	beq.n	1a0037b6 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0037b2:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0037b4:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a0037b6:	20a5      	movs	r0, #165	; 0xa5
1a0037b8:	4770      	bx	lr
1a0037ba:	bf00      	nop
1a0037bc:	400c5000 	.word	0x400c5000

1a0037c0 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0037c0:	4b04      	ldr	r3, [pc, #16]	; (1a0037d4 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0037c2:	4298      	cmp	r0, r3
1a0037c4:	d002      	beq.n	1a0037cc <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0037c6:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0037ca:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a0037cc:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0037d0:	4770      	bx	lr
1a0037d2:	bf00      	nop
1a0037d4:	400c5000 	.word	0x400c5000

1a0037d8 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0037d8:	6803      	ldr	r3, [r0, #0]
1a0037da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0037de:	0209      	lsls	r1, r1, #8
1a0037e0:	b289      	uxth	r1, r1
1a0037e2:	4319      	orrs	r1, r3
1a0037e4:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a0037e6:	6102      	str	r2, [r0, #16]
}
1a0037e8:	4770      	bx	lr

1a0037ea <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0037ea:	b570      	push	{r4, r5, r6, lr}
1a0037ec:	4606      	mov	r6, r0
1a0037ee:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0037f0:	f7ff ffe6 	bl	1a0037c0 <Chip_SSP_GetPeriphClockIndex>
1a0037f4:	f7ff fec0 	bl	1a003578 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0037f8:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0037fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a0037fe:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a003800:	e000      	b.n	1a003804 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a003802:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a003804:	42ab      	cmp	r3, r5
1a003806:	d90b      	bls.n	1a003820 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a003808:	1c4c      	adds	r4, r1, #1
1a00380a:	fb02 f304 	mul.w	r3, r2, r4
1a00380e:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a003812:	429d      	cmp	r5, r3
1a003814:	d2f6      	bcs.n	1a003804 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a003816:	2cff      	cmp	r4, #255	; 0xff
1a003818:	d9f3      	bls.n	1a003802 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a00381a:	3202      	adds	r2, #2
				cr0_div = 0;
1a00381c:	2100      	movs	r1, #0
1a00381e:	e7f1      	b.n	1a003804 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a003820:	4630      	mov	r0, r6
1a003822:	f7ff ffd9 	bl	1a0037d8 <Chip_SSP_SetClockRate>
}
1a003826:	bd70      	pop	{r4, r5, r6, pc}

1a003828 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003828:	b510      	push	{r4, lr}
1a00382a:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a00382c:	f7ff ffbe 	bl	1a0037ac <Chip_SSP_GetClockIndex>
1a003830:	f7ff fe88 	bl	1a003544 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003834:	4620      	mov	r0, r4
1a003836:	f7ff ffc3 	bl	1a0037c0 <Chip_SSP_GetPeriphClockIndex>
1a00383a:	f7ff fe83 	bl	1a003544 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00383e:	6863      	ldr	r3, [r4, #4]
1a003840:	f023 0304 	bic.w	r3, r3, #4
1a003844:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003846:	6823      	ldr	r3, [r4, #0]
1a003848:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a00384c:	f043 0307 	orr.w	r3, r3, #7
1a003850:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a003852:	4902      	ldr	r1, [pc, #8]	; (1a00385c <Chip_SSP_Init+0x34>)
1a003854:	4620      	mov	r0, r4
1a003856:	f7ff ffc8 	bl	1a0037ea <Chip_SSP_SetBitRate>
}
1a00385a:	bd10      	pop	{r4, pc}
1a00385c:	000186a0 	.word	0x000186a0

1a003860 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a003860:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a003862:	4a0b      	ldr	r2, [pc, #44]	; (1a003890 <SystemInit+0x30>)
1a003864:	4b0b      	ldr	r3, [pc, #44]	; (1a003894 <SystemInit+0x34>)
1a003866:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a003868:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a00386c:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a00386e:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a003872:	2b20      	cmp	r3, #32
1a003874:	d004      	beq.n	1a003880 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a003876:	f7ff fa9f 	bl	1a002db8 <Board_SystemInit>
   Board_Init();
1a00387a:	f7ff fa25 	bl	1a002cc8 <Board_Init>
}
1a00387e:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a003880:	4a04      	ldr	r2, [pc, #16]	; (1a003894 <SystemInit+0x34>)
1a003882:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a003886:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00388a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a00388e:	e7f2      	b.n	1a003876 <SystemInit+0x16>
1a003890:	1a000000 	.word	0x1a000000
1a003894:	e000ed00 	.word	0xe000ed00

1a003898 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a003898:	4b04      	ldr	r3, [pc, #16]	; (1a0038ac <cyclesCounterInit+0x14>)
1a00389a:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a00389c:	4a04      	ldr	r2, [pc, #16]	; (1a0038b0 <cyclesCounterInit+0x18>)
1a00389e:	6813      	ldr	r3, [r2, #0]
1a0038a0:	f043 0301 	orr.w	r3, r3, #1
1a0038a4:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0038a6:	2001      	movs	r0, #1
1a0038a8:	4770      	bx	lr
1a0038aa:	bf00      	nop
1a0038ac:	1000003c 	.word	0x1000003c
1a0038b0:	e0001000 	.word	0xe0001000

1a0038b4 <uartProcessIRQ>:
{
1a0038b4:	b570      	push	{r4, r5, r6, lr}
1a0038b6:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a0038b8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a0038bc:	0093      	lsls	r3, r2, #2
1a0038be:	4a1f      	ldr	r2, [pc, #124]	; (1a00393c <uartProcessIRQ+0x88>)
1a0038c0:	58d6      	ldr	r6, [r2, r3]
	return pUART->LSR;
1a0038c2:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a0038c4:	b2ed      	uxtb	r5, r5
1a0038c6:	f015 0f01 	tst.w	r5, #1
1a0038ca:	d009      	beq.n	1a0038e0 <uartProcessIRQ+0x2c>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a0038cc:	b920      	cbnz	r0, 1a0038d8 <uartProcessIRQ+0x24>
1a0038ce:	4b1c      	ldr	r3, [pc, #112]	; (1a003940 <uartProcessIRQ+0x8c>)
1a0038d0:	681b      	ldr	r3, [r3, #0]
1a0038d2:	b10b      	cbz	r3, 1a0038d8 <uartProcessIRQ+0x24>
         (*rxIsrCallbackUART0)(0);
1a0038d4:	2000      	movs	r0, #0
1a0038d6:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a0038d8:	2c03      	cmp	r4, #3
1a0038da:	d013      	beq.n	1a003904 <uartProcessIRQ+0x50>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a0038dc:	2c05      	cmp	r4, #5
1a0038de:	d018      	beq.n	1a003912 <uartProcessIRQ+0x5e>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a0038e0:	f015 0f20 	tst.w	r5, #32
1a0038e4:	d00d      	beq.n	1a003902 <uartProcessIRQ+0x4e>
	return pUART->IER;
1a0038e6:	6873      	ldr	r3, [r6, #4]
1a0038e8:	f013 0f02 	tst.w	r3, #2
1a0038ec:	d009      	beq.n	1a003902 <uartProcessIRQ+0x4e>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a0038ee:	b924      	cbnz	r4, 1a0038fa <uartProcessIRQ+0x46>
1a0038f0:	4b14      	ldr	r3, [pc, #80]	; (1a003944 <uartProcessIRQ+0x90>)
1a0038f2:	681b      	ldr	r3, [r3, #0]
1a0038f4:	b10b      	cbz	r3, 1a0038fa <uartProcessIRQ+0x46>
         (*txIsrCallbackUART0)(0);
1a0038f6:	2000      	movs	r0, #0
1a0038f8:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a0038fa:	2c03      	cmp	r4, #3
1a0038fc:	d010      	beq.n	1a003920 <uartProcessIRQ+0x6c>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a0038fe:	2c05      	cmp	r4, #5
1a003900:	d015      	beq.n	1a00392e <uartProcessIRQ+0x7a>
}
1a003902:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a003904:	4b10      	ldr	r3, [pc, #64]	; (1a003948 <uartProcessIRQ+0x94>)
1a003906:	681b      	ldr	r3, [r3, #0]
1a003908:	2b00      	cmp	r3, #0
1a00390a:	d0e7      	beq.n	1a0038dc <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART2)(0);
1a00390c:	2000      	movs	r0, #0
1a00390e:	4798      	blx	r3
1a003910:	e7e4      	b.n	1a0038dc <uartProcessIRQ+0x28>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a003912:	4b0e      	ldr	r3, [pc, #56]	; (1a00394c <uartProcessIRQ+0x98>)
1a003914:	681b      	ldr	r3, [r3, #0]
1a003916:	2b00      	cmp	r3, #0
1a003918:	d0e2      	beq.n	1a0038e0 <uartProcessIRQ+0x2c>
         (*rxIsrCallbackUART3)(0);
1a00391a:	2000      	movs	r0, #0
1a00391c:	4798      	blx	r3
1a00391e:	e7df      	b.n	1a0038e0 <uartProcessIRQ+0x2c>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a003920:	4b0b      	ldr	r3, [pc, #44]	; (1a003950 <uartProcessIRQ+0x9c>)
1a003922:	681b      	ldr	r3, [r3, #0]
1a003924:	2b00      	cmp	r3, #0
1a003926:	d0ea      	beq.n	1a0038fe <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART2)(0);
1a003928:	2000      	movs	r0, #0
1a00392a:	4798      	blx	r3
1a00392c:	e7e7      	b.n	1a0038fe <uartProcessIRQ+0x4a>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a00392e:	4b09      	ldr	r3, [pc, #36]	; (1a003954 <uartProcessIRQ+0xa0>)
1a003930:	681b      	ldr	r3, [r3, #0]
1a003932:	2b00      	cmp	r3, #0
1a003934:	d0e5      	beq.n	1a003902 <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART3)(0);
1a003936:	2000      	movs	r0, #0
1a003938:	4798      	blx	r3
}
1a00393a:	e7e2      	b.n	1a003902 <uartProcessIRQ+0x4e>
1a00393c:	1a005594 	.word	0x1a005594
1a003940:	10002d34 	.word	0x10002d34
1a003944:	10002d40 	.word	0x10002d40
1a003948:	10002d38 	.word	0x10002d38
1a00394c:	10002d3c 	.word	0x10002d3c
1a003950:	10002d44 	.word	0x10002d44
1a003954:	10002d48 	.word	0x10002d48

1a003958 <uartInterrupt>:
   if( enable ) {
1a003958:	b341      	cbz	r1, 1a0039ac <uartInterrupt+0x54>
      NVIC_SetPriority( lpcUarts[uart].uartIrqAddr, 5 ); // FreeRTOS Requiere prioridad >= 5 (numero mas alto, mas baja prioridad)
1a00395a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a00395e:	009a      	lsls	r2, r3, #2
1a003960:	4b1e      	ldr	r3, [pc, #120]	; (1a0039dc <uartInterrupt+0x84>)
1a003962:	4413      	add	r3, r2
1a003964:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a003968:	2b00      	cmp	r3, #0
1a00396a:	db18      	blt.n	1a00399e <uartInterrupt+0x46>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a00396c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
1a003970:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
1a003974:	22a0      	movs	r2, #160	; 0xa0
1a003976:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
      NVIC_EnableIRQ( lpcUarts[uart].uartIrqAddr );
1a00397a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00397e:	0082      	lsls	r2, r0, #2
1a003980:	4b16      	ldr	r3, [pc, #88]	; (1a0039dc <uartInterrupt+0x84>)
1a003982:	4413      	add	r3, r2
1a003984:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a003988:	2b00      	cmp	r3, #0
1a00398a:	db25      	blt.n	1a0039d8 <uartInterrupt+0x80>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a00398c:	f003 011f 	and.w	r1, r3, #31
1a003990:	095b      	lsrs	r3, r3, #5
1a003992:	2201      	movs	r2, #1
1a003994:	408a      	lsls	r2, r1
1a003996:	4912      	ldr	r1, [pc, #72]	; (1a0039e0 <uartInterrupt+0x88>)
1a003998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a00399c:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a00399e:	f003 030f 	and.w	r3, r3, #15
1a0039a2:	4a10      	ldr	r2, [pc, #64]	; (1a0039e4 <uartInterrupt+0x8c>)
1a0039a4:	441a      	add	r2, r3
1a0039a6:	23a0      	movs	r3, #160	; 0xa0
1a0039a8:	7613      	strb	r3, [r2, #24]
1a0039aa:	e7e6      	b.n	1a00397a <uartInterrupt+0x22>
      NVIC_DisableIRQ( lpcUarts[uart].uartIrqAddr );
1a0039ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0039b0:	0082      	lsls	r2, r0, #2
1a0039b2:	4b0a      	ldr	r3, [pc, #40]	; (1a0039dc <uartInterrupt+0x84>)
1a0039b4:	4413      	add	r3, r2
1a0039b6:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a0039ba:	2b00      	cmp	r3, #0
1a0039bc:	db0c      	blt.n	1a0039d8 <uartInterrupt+0x80>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a0039be:	f003 011f 	and.w	r1, r3, #31
1a0039c2:	095b      	lsrs	r3, r3, #5
1a0039c4:	2201      	movs	r2, #1
1a0039c6:	408a      	lsls	r2, r1
1a0039c8:	3320      	adds	r3, #32
1a0039ca:	4905      	ldr	r1, [pc, #20]	; (1a0039e0 <uartInterrupt+0x88>)
1a0039cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
1a0039d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a0039d4:	f3bf 8f6f 	isb	sy
}
1a0039d8:	4770      	bx	lr
1a0039da:	bf00      	nop
1a0039dc:	1a005594 	.word	0x1a005594
1a0039e0:	e000e100 	.word	0xe000e100
1a0039e4:	e000ecfc 	.word	0xe000ecfc

1a0039e8 <uartCallbackSet>:
   switch(event){
1a0039e8:	b111      	cbz	r1, 1a0039f0 <uartCallbackSet+0x8>
1a0039ea:	2901      	cmp	r1, #1
1a0039ec:	d01d      	beq.n	1a003a2a <uartCallbackSet+0x42>
1a0039ee:	4770      	bx	lr
         if( callbackFunc != 0 ) {
1a0039f0:	b182      	cbz	r2, 1a003a14 <uartCallbackSet+0x2c>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a0039f2:	2801      	cmp	r0, #1
1a0039f4:	d90f      	bls.n	1a003a16 <uartCallbackSet+0x2e>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a0039f6:	1ec3      	subs	r3, r0, #3
1a0039f8:	b2db      	uxtb	r3, r3
1a0039fa:	2b01      	cmp	r3, #1
1a0039fc:	d90e      	bls.n	1a003a1c <uartCallbackSet+0x34>
            if( uart == UART_232 ){
1a0039fe:	2805      	cmp	r0, #5
1a003a00:	d00f      	beq.n	1a003a22 <uartCallbackSet+0x3a>
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a003a02:	2305      	movs	r3, #5
   Chip_UART_IntEnable(lpcUarts[uart].uartAddr, intMask);
1a003a04:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003a08:	0082      	lsls	r2, r0, #2
1a003a0a:	4913      	ldr	r1, [pc, #76]	; (1a003a58 <uartCallbackSet+0x70>)
1a003a0c:	588a      	ldr	r2, [r1, r2]
	pUART->IER |= intMask;
1a003a0e:	6851      	ldr	r1, [r2, #4]
1a003a10:	430b      	orrs	r3, r1
1a003a12:	6053      	str	r3, [r2, #4]
}
1a003a14:	4770      	bx	lr
               rxIsrCallbackUART0 = callbackFunc;
1a003a16:	4b11      	ldr	r3, [pc, #68]	; (1a003a5c <uartCallbackSet+0x74>)
1a003a18:	601a      	str	r2, [r3, #0]
1a003a1a:	e7ec      	b.n	1a0039f6 <uartCallbackSet+0xe>
               rxIsrCallbackUART2 = callbackFunc;
1a003a1c:	4b10      	ldr	r3, [pc, #64]	; (1a003a60 <uartCallbackSet+0x78>)
1a003a1e:	601a      	str	r2, [r3, #0]
1a003a20:	e7ed      	b.n	1a0039fe <uartCallbackSet+0x16>
               rxIsrCallbackUART3 = callbackFunc;
1a003a22:	4b10      	ldr	r3, [pc, #64]	; (1a003a64 <uartCallbackSet+0x7c>)
1a003a24:	601a      	str	r2, [r3, #0]
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a003a26:	2305      	movs	r3, #5
1a003a28:	e7ec      	b.n	1a003a04 <uartCallbackSet+0x1c>
         if( callbackFunc != 0 ) {
1a003a2a:	2a00      	cmp	r2, #0
1a003a2c:	d0f2      	beq.n	1a003a14 <uartCallbackSet+0x2c>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a003a2e:	2801      	cmp	r0, #1
1a003a30:	d907      	bls.n	1a003a42 <uartCallbackSet+0x5a>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a003a32:	1ec3      	subs	r3, r0, #3
1a003a34:	b2db      	uxtb	r3, r3
1a003a36:	2b01      	cmp	r3, #1
1a003a38:	d906      	bls.n	1a003a48 <uartCallbackSet+0x60>
            if( uart == UART_232 ){
1a003a3a:	2805      	cmp	r0, #5
1a003a3c:	d007      	beq.n	1a003a4e <uartCallbackSet+0x66>
         intMask = UART_IER_THREINT;
1a003a3e:	2302      	movs	r3, #2
1a003a40:	e7e0      	b.n	1a003a04 <uartCallbackSet+0x1c>
               txIsrCallbackUART0 = callbackFunc;
1a003a42:	4b09      	ldr	r3, [pc, #36]	; (1a003a68 <uartCallbackSet+0x80>)
1a003a44:	601a      	str	r2, [r3, #0]
1a003a46:	e7f4      	b.n	1a003a32 <uartCallbackSet+0x4a>
               txIsrCallbackUART2 = callbackFunc;
1a003a48:	4b08      	ldr	r3, [pc, #32]	; (1a003a6c <uartCallbackSet+0x84>)
1a003a4a:	601a      	str	r2, [r3, #0]
1a003a4c:	e7f5      	b.n	1a003a3a <uartCallbackSet+0x52>
               txIsrCallbackUART3 = callbackFunc;
1a003a4e:	4b08      	ldr	r3, [pc, #32]	; (1a003a70 <uartCallbackSet+0x88>)
1a003a50:	601a      	str	r2, [r3, #0]
         intMask = UART_IER_THREINT;
1a003a52:	2302      	movs	r3, #2
1a003a54:	e7d6      	b.n	1a003a04 <uartCallbackSet+0x1c>
1a003a56:	bf00      	nop
1a003a58:	1a005594 	.word	0x1a005594
1a003a5c:	10002d34 	.word	0x10002d34
1a003a60:	10002d38 	.word	0x10002d38
1a003a64:	10002d3c 	.word	0x10002d3c
1a003a68:	10002d40 	.word	0x10002d40
1a003a6c:	10002d44 	.word	0x10002d44
1a003a70:	10002d48 	.word	0x10002d48

1a003a74 <uartCallbackClr>:
   switch(event){
1a003a74:	b111      	cbz	r1, 1a003a7c <uartCallbackClr+0x8>
1a003a76:	2901      	cmp	r1, #1
1a003a78:	d00b      	beq.n	1a003a92 <uartCallbackClr+0x1e>
1a003a7a:	4770      	bx	lr
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a003a7c:	2105      	movs	r1, #5
   Chip_UART_IntDisable(lpcUarts[uart].uartAddr, intMask);
1a003a7e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003a82:	0082      	lsls	r2, r0, #2
1a003a84:	4b04      	ldr	r3, [pc, #16]	; (1a003a98 <uartCallbackClr+0x24>)
1a003a86:	589a      	ldr	r2, [r3, r2]
	pUART->IER &= ~intMask;
1a003a88:	6853      	ldr	r3, [r2, #4]
1a003a8a:	ea23 0301 	bic.w	r3, r3, r1
1a003a8e:	6053      	str	r3, [r2, #4]
}
1a003a90:	4770      	bx	lr
         intMask = UART_IER_THREINT;
1a003a92:	2102      	movs	r1, #2
1a003a94:	e7f3      	b.n	1a003a7e <uartCallbackClr+0xa>
1a003a96:	bf00      	nop
1a003a98:	1a005594 	.word	0x1a005594

1a003a9c <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a003a9c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003aa0:	0083      	lsls	r3, r0, #2
1a003aa2:	4a03      	ldr	r2, [pc, #12]	; (1a003ab0 <uartTxReady+0x14>)
1a003aa4:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a003aa6:	6958      	ldr	r0, [r3, #20]
}
1a003aa8:	f000 0020 	and.w	r0, r0, #32
1a003aac:	4770      	bx	lr
1a003aae:	bf00      	nop
1a003ab0:	1a005594 	.word	0x1a005594

1a003ab4 <uartRxRead>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a003ab4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003ab8:	0083      	lsls	r3, r0, #2
1a003aba:	4a02      	ldr	r2, [pc, #8]	; (1a003ac4 <uartRxRead+0x10>)
1a003abc:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a003abe:	6818      	ldr	r0, [r3, #0]
}
1a003ac0:	b2c0      	uxtb	r0, r0
1a003ac2:	4770      	bx	lr
1a003ac4:	1a005594 	.word	0x1a005594

1a003ac8 <uartTxWrite>:
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a003ac8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003acc:	0083      	lsls	r3, r0, #2
1a003ace:	4a02      	ldr	r2, [pc, #8]	; (1a003ad8 <uartTxWrite+0x10>)
1a003ad0:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a003ad2:	6019      	str	r1, [r3, #0]
}
1a003ad4:	4770      	bx	lr
1a003ad6:	bf00      	nop
1a003ad8:	1a005594 	.word	0x1a005594

1a003adc <uartInit>:
{
1a003adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003ae0:	4680      	mov	r8, r0
1a003ae2:	4689      	mov	r9, r1
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a003ae4:	4c19      	ldr	r4, [pc, #100]	; (1a003b4c <uartInit+0x70>)
1a003ae6:	0045      	lsls	r5, r0, #1
1a003ae8:	182a      	adds	r2, r5, r0
1a003aea:	0093      	lsls	r3, r2, #2
1a003aec:	18e6      	adds	r6, r4, r3
1a003aee:	58e7      	ldr	r7, [r4, r3]
1a003af0:	4638      	mov	r0, r7
1a003af2:	f7ff f97d 	bl	1a002df0 <Chip_UART_Init>
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a003af6:	4649      	mov	r1, r9
1a003af8:	4638      	mov	r0, r7
1a003afa:	f7ff f9a3 	bl	1a002e44 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a003afe:	2307      	movs	r3, #7
1a003b00:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a003b02:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a003b04:	2301      	movs	r3, #1
1a003b06:	65fb      	str	r3, [r7, #92]	; 0x5c
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a003b08:	7930      	ldrb	r0, [r6, #4]
1a003b0a:	7973      	ldrb	r3, [r6, #5]
1a003b0c:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003b0e:	f042 0218 	orr.w	r2, r2, #24
1a003b12:	490f      	ldr	r1, [pc, #60]	; (1a003b50 <uartInit+0x74>)
1a003b14:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a003b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a003b1c:	79f0      	ldrb	r0, [r6, #7]
1a003b1e:	7a33      	ldrb	r3, [r6, #8]
1a003b20:	7a72      	ldrb	r2, [r6, #9]
1a003b22:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003b26:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a003b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   if( uart == UART_485 ) {
1a003b2e:	f1b8 0f01 	cmp.w	r8, #1
1a003b32:	d001      	beq.n	1a003b38 <uartInit+0x5c>
}
1a003b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a003b38:	4a06      	ldr	r2, [pc, #24]	; (1a003b54 <uartInit+0x78>)
1a003b3a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a003b3c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a003b40:	64d3      	str	r3, [r2, #76]	; 0x4c
1a003b42:	221a      	movs	r2, #26
1a003b44:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a003b48:	e7f4      	b.n	1a003b34 <uartInit+0x58>
1a003b4a:	bf00      	nop
1a003b4c:	1a005594 	.word	0x1a005594
1a003b50:	40086000 	.word	0x40086000
1a003b54:	40081000 	.word	0x40081000

1a003b58 <uartWriteByte>:
{
1a003b58:	b538      	push	{r3, r4, r5, lr}
1a003b5a:	4604      	mov	r4, r0
1a003b5c:	460d      	mov	r5, r1
   while( uartTxReady( uart ) == FALSE );
1a003b5e:	4620      	mov	r0, r4
1a003b60:	f7ff ff9c 	bl	1a003a9c <uartTxReady>
1a003b64:	2800      	cmp	r0, #0
1a003b66:	d0fa      	beq.n	1a003b5e <uartWriteByte+0x6>
   uartTxWrite( uart, value );
1a003b68:	4629      	mov	r1, r5
1a003b6a:	4620      	mov	r0, r4
1a003b6c:	f7ff ffac 	bl	1a003ac8 <uartTxWrite>
}
1a003b70:	bd38      	pop	{r3, r4, r5, pc}

1a003b72 <uartWriteString>:
{
1a003b72:	b538      	push	{r3, r4, r5, lr}
1a003b74:	4605      	mov	r5, r0
1a003b76:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a003b78:	e003      	b.n	1a003b82 <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a003b7a:	4628      	mov	r0, r5
1a003b7c:	f7ff ffec 	bl	1a003b58 <uartWriteByte>
      str++;
1a003b80:	3401      	adds	r4, #1
   while( *str != 0 ) {
1a003b82:	7821      	ldrb	r1, [r4, #0]
1a003b84:	2900      	cmp	r1, #0
1a003b86:	d1f8      	bne.n	1a003b7a <uartWriteString+0x8>
}
1a003b88:	bd38      	pop	{r3, r4, r5, pc}

1a003b8a <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a003b8a:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a003b8c:	2003      	movs	r0, #3
1a003b8e:	f7ff fe91 	bl	1a0038b4 <uartProcessIRQ>
}
1a003b92:	bd08      	pop	{r3, pc}

1a003b94 <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a003b94:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a003b96:	2005      	movs	r0, #5
1a003b98:	f7ff fe8c 	bl	1a0038b4 <uartProcessIRQ>
}
1a003b9c:	bd08      	pop	{r3, pc}

1a003b9e <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
1a003b9e:	e7fe      	b.n	1a003b9e <errorOcurred>

1a003ba0 <doNothing>:
   while(1);
}

static void doNothing( void* ptr )
{
}
1a003ba0:	4770      	bx	lr
1a003ba2:	Address 0x000000001a003ba2 is out of bounds.


1a003ba4 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a003ba4:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003ba6:	2400      	movs	r4, #0
1a003ba8:	e001      	b.n	1a003bae <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a003baa:	3401      	adds	r4, #1
1a003bac:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003bae:	2c03      	cmp	r4, #3
1a003bb0:	d812      	bhi.n	1a003bd8 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a003bb2:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a003bb4:	4b09      	ldr	r3, [pc, #36]	; (1a003bdc <TIMER0_IRQHandler+0x38>)
1a003bb6:	681a      	ldr	r2, [r3, #0]
1a003bb8:	f004 010f 	and.w	r1, r4, #15
1a003bbc:	2301      	movs	r3, #1
1a003bbe:	408b      	lsls	r3, r1
1a003bc0:	421a      	tst	r2, r3
1a003bc2:	d0f2      	beq.n	1a003baa <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003bc4:	4b06      	ldr	r3, [pc, #24]	; (1a003be0 <TIMER0_IRQHandler+0x3c>)
1a003bc6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a003bca:	2000      	movs	r0, #0
1a003bcc:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a003bce:	2301      	movs	r3, #1
1a003bd0:	40ab      	lsls	r3, r5
1a003bd2:	4a02      	ldr	r2, [pc, #8]	; (1a003bdc <TIMER0_IRQHandler+0x38>)
1a003bd4:	6013      	str	r3, [r2, #0]
1a003bd6:	e7e8      	b.n	1a003baa <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a003bd8:	bd38      	pop	{r3, r4, r5, pc}
1a003bda:	bf00      	nop
1a003bdc:	40084000 	.word	0x40084000
1a003be0:	10000040 	.word	0x10000040

1a003be4 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a003be4:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003be6:	2400      	movs	r4, #0
1a003be8:	e001      	b.n	1a003bee <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a003bea:	3401      	adds	r4, #1
1a003bec:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003bee:	2c03      	cmp	r4, #3
1a003bf0:	d813      	bhi.n	1a003c1a <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a003bf2:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a003bf4:	4b09      	ldr	r3, [pc, #36]	; (1a003c1c <TIMER1_IRQHandler+0x38>)
1a003bf6:	681a      	ldr	r2, [r3, #0]
1a003bf8:	f004 010f 	and.w	r1, r4, #15
1a003bfc:	2301      	movs	r3, #1
1a003bfe:	408b      	lsls	r3, r1
1a003c00:	421a      	tst	r2, r3
1a003c02:	d0f2      	beq.n	1a003bea <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003c04:	1d23      	adds	r3, r4, #4
1a003c06:	4a06      	ldr	r2, [pc, #24]	; (1a003c20 <TIMER1_IRQHandler+0x3c>)
1a003c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a003c0c:	2000      	movs	r0, #0
1a003c0e:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a003c10:	2301      	movs	r3, #1
1a003c12:	40ab      	lsls	r3, r5
1a003c14:	4a01      	ldr	r2, [pc, #4]	; (1a003c1c <TIMER1_IRQHandler+0x38>)
1a003c16:	6013      	str	r3, [r2, #0]
1a003c18:	e7e7      	b.n	1a003bea <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a003c1a:	bd38      	pop	{r3, r4, r5, pc}
1a003c1c:	40085000 	.word	0x40085000
1a003c20:	10000040 	.word	0x10000040

1a003c24 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a003c24:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003c26:	2400      	movs	r4, #0
1a003c28:	e001      	b.n	1a003c2e <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a003c2a:	3401      	adds	r4, #1
1a003c2c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003c2e:	2c03      	cmp	r4, #3
1a003c30:	d814      	bhi.n	1a003c5c <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a003c32:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a003c34:	4b0a      	ldr	r3, [pc, #40]	; (1a003c60 <TIMER2_IRQHandler+0x3c>)
1a003c36:	681a      	ldr	r2, [r3, #0]
1a003c38:	f004 010f 	and.w	r1, r4, #15
1a003c3c:	2301      	movs	r3, #1
1a003c3e:	408b      	lsls	r3, r1
1a003c40:	421a      	tst	r2, r3
1a003c42:	d0f2      	beq.n	1a003c2a <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003c44:	f104 0308 	add.w	r3, r4, #8
1a003c48:	4a06      	ldr	r2, [pc, #24]	; (1a003c64 <TIMER2_IRQHandler+0x40>)
1a003c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a003c4e:	2000      	movs	r0, #0
1a003c50:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a003c52:	2301      	movs	r3, #1
1a003c54:	40ab      	lsls	r3, r5
1a003c56:	4a02      	ldr	r2, [pc, #8]	; (1a003c60 <TIMER2_IRQHandler+0x3c>)
1a003c58:	6013      	str	r3, [r2, #0]
1a003c5a:	e7e6      	b.n	1a003c2a <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a003c5c:	bd38      	pop	{r3, r4, r5, pc}
1a003c5e:	bf00      	nop
1a003c60:	400c3000 	.word	0x400c3000
1a003c64:	10000040 	.word	0x10000040

1a003c68 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a003c68:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003c6a:	2400      	movs	r4, #0
1a003c6c:	e001      	b.n	1a003c72 <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a003c6e:	3401      	adds	r4, #1
1a003c70:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003c72:	2c03      	cmp	r4, #3
1a003c74:	d814      	bhi.n	1a003ca0 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a003c76:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a003c78:	4b0a      	ldr	r3, [pc, #40]	; (1a003ca4 <TIMER3_IRQHandler+0x3c>)
1a003c7a:	681a      	ldr	r2, [r3, #0]
1a003c7c:	f004 010f 	and.w	r1, r4, #15
1a003c80:	2301      	movs	r3, #1
1a003c82:	408b      	lsls	r3, r1
1a003c84:	421a      	tst	r2, r3
1a003c86:	d0f2      	beq.n	1a003c6e <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003c88:	f104 030c 	add.w	r3, r4, #12
1a003c8c:	4a06      	ldr	r2, [pc, #24]	; (1a003ca8 <TIMER3_IRQHandler+0x40>)
1a003c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a003c92:	2000      	movs	r0, #0
1a003c94:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a003c96:	2301      	movs	r3, #1
1a003c98:	40ab      	lsls	r3, r5
1a003c9a:	4a02      	ldr	r2, [pc, #8]	; (1a003ca4 <TIMER3_IRQHandler+0x3c>)
1a003c9c:	6013      	str	r3, [r2, #0]
1a003c9e:	e7e6      	b.n	1a003c6e <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a003ca0:	bd38      	pop	{r3, r4, r5, pc}
1a003ca2:	bf00      	nop
1a003ca4:	400c4000 	.word	0x400c4000
1a003ca8:	10000040 	.word	0x10000040

1a003cac <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a003cac:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a003cae:	4d0b      	ldr	r5, [pc, #44]	; (1a003cdc <gpioObtainPinInit+0x30>)
1a003cb0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a003cb4:	182c      	adds	r4, r5, r0
1a003cb6:	5628      	ldrsb	r0, [r5, r0]
1a003cb8:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a003cba:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a003cbe:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a003cc0:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a003cc4:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a003cc6:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a003cca:	9b02      	ldr	r3, [sp, #8]
1a003ccc:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a003cce:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a003cd2:	9b03      	ldr	r3, [sp, #12]
1a003cd4:	701a      	strb	r2, [r3, #0]
}
1a003cd6:	bc30      	pop	{r4, r5}
1a003cd8:	4770      	bx	lr
1a003cda:	bf00      	nop
1a003cdc:	1a0055dc 	.word	0x1a0055dc

1a003ce0 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a003ce0:	f110 0f02 	cmn.w	r0, #2
1a003ce4:	f000 80c7 	beq.w	1a003e76 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a003ce8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a003cec:	f000 80c5 	beq.w	1a003e7a <gpioInit+0x19a>
{
1a003cf0:	b570      	push	{r4, r5, r6, lr}
1a003cf2:	b084      	sub	sp, #16
1a003cf4:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a003cf6:	2300      	movs	r3, #0
1a003cf8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003cfc:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003d00:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003d04:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003d08:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003d0c:	f10d 030b 	add.w	r3, sp, #11
1a003d10:	9301      	str	r3, [sp, #4]
1a003d12:	ab03      	add	r3, sp, #12
1a003d14:	9300      	str	r3, [sp, #0]
1a003d16:	f10d 030d 	add.w	r3, sp, #13
1a003d1a:	f10d 020e 	add.w	r2, sp, #14
1a003d1e:	f10d 010f 	add.w	r1, sp, #15
1a003d22:	f7ff ffc3 	bl	1a003cac <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a003d26:	2c05      	cmp	r4, #5
1a003d28:	f200 80a9 	bhi.w	1a003e7e <gpioInit+0x19e>
1a003d2c:	e8df f004 	tbb	[pc, r4]
1a003d30:	45278109 	.word	0x45278109
1a003d34:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a003d36:	4853      	ldr	r0, [pc, #332]	; (1a003e84 <gpioInit+0x1a4>)
1a003d38:	f7ff fcf8 	bl	1a00372c <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a003d3c:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a003d3e:	b004      	add	sp, #16
1a003d40:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a003d42:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003d46:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003d4a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003d4e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003d52:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003d56:	494c      	ldr	r1, [pc, #304]	; (1a003e88 <gpioInit+0x1a8>)
1a003d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003d5c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003d60:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003d64:	2001      	movs	r0, #1
1a003d66:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a003d6a:	4c46      	ldr	r4, [pc, #280]	; (1a003e84 <gpioInit+0x1a4>)
1a003d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003d70:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003d74:	ea22 0201 	bic.w	r2, r2, r1
1a003d78:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003d7c:	e7df      	b.n	1a003d3e <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003d7e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003d82:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003d86:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003d8a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a003d8e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003d92:	493d      	ldr	r1, [pc, #244]	; (1a003e88 <gpioInit+0x1a8>)
1a003d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003d98:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003d9c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003da0:	2001      	movs	r0, #1
1a003da2:	fa00 f102 	lsl.w	r1, r0, r2
1a003da6:	4c37      	ldr	r4, [pc, #220]	; (1a003e84 <gpioInit+0x1a4>)
1a003da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003dac:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003db0:	ea22 0201 	bic.w	r2, r2, r1
1a003db4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003db8:	e7c1      	b.n	1a003d3e <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003dba:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003dbe:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003dc2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003dc6:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a003dca:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003dce:	492e      	ldr	r1, [pc, #184]	; (1a003e88 <gpioInit+0x1a8>)
1a003dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003dd4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003dd8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003ddc:	2001      	movs	r0, #1
1a003dde:	fa00 f102 	lsl.w	r1, r0, r2
1a003de2:	4c28      	ldr	r4, [pc, #160]	; (1a003e84 <gpioInit+0x1a4>)
1a003de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003de8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003dec:	ea22 0201 	bic.w	r2, r2, r1
1a003df0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003df4:	e7a3      	b.n	1a003d3e <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003df6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003dfa:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003dfe:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003e02:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a003e06:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003e0a:	491f      	ldr	r1, [pc, #124]	; (1a003e88 <gpioInit+0x1a8>)
1a003e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003e10:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003e14:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003e18:	2001      	movs	r0, #1
1a003e1a:	fa00 f102 	lsl.w	r1, r0, r2
1a003e1e:	4c19      	ldr	r4, [pc, #100]	; (1a003e84 <gpioInit+0x1a4>)
1a003e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003e24:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003e28:	ea22 0201 	bic.w	r2, r2, r1
1a003e2c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003e30:	e785      	b.n	1a003d3e <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003e32:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003e36:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003e3a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003e3e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003e42:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003e46:	4910      	ldr	r1, [pc, #64]	; (1a003e88 <gpioInit+0x1a8>)
1a003e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a003e4c:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a003e50:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003e54:	2001      	movs	r0, #1
1a003e56:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a003e5a:	4b0a      	ldr	r3, [pc, #40]	; (1a003e84 <gpioInit+0x1a4>)
1a003e5c:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a003e60:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a003e64:	4331      	orrs	r1, r6
1a003e66:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a003e6a:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a003e6c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a003e70:	2100      	movs	r1, #0
1a003e72:	5499      	strb	r1, [r3, r2]
1a003e74:	e763      	b.n	1a003d3e <gpioInit+0x5e>
	  return FALSE;
1a003e76:	2000      	movs	r0, #0
1a003e78:	4770      	bx	lr
	  return FALSE;
1a003e7a:	2000      	movs	r0, #0
}
1a003e7c:	4770      	bx	lr
      ret_val = 0;
1a003e7e:	2000      	movs	r0, #0
1a003e80:	e75d      	b.n	1a003d3e <gpioInit+0x5e>
1a003e82:	bf00      	nop
1a003e84:	400f4000 	.word	0x400f4000
1a003e88:	40086000 	.word	0x40086000

1a003e8c <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a003e8c:	f110 0f02 	cmn.w	r0, #2
1a003e90:	d02d      	beq.n	1a003eee <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a003e92:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a003e96:	d02c      	beq.n	1a003ef2 <gpioWrite+0x66>
{
1a003e98:	b510      	push	{r4, lr}
1a003e9a:	b084      	sub	sp, #16
1a003e9c:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a003e9e:	2300      	movs	r3, #0
1a003ea0:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003ea4:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003ea8:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003eac:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003eb0:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003eb4:	f10d 030b 	add.w	r3, sp, #11
1a003eb8:	9301      	str	r3, [sp, #4]
1a003eba:	ab03      	add	r3, sp, #12
1a003ebc:	9300      	str	r3, [sp, #0]
1a003ebe:	f10d 030d 	add.w	r3, sp, #13
1a003ec2:	f10d 020e 	add.w	r2, sp, #14
1a003ec6:	f10d 010f 	add.w	r1, sp, #15
1a003eca:	f7ff feef 	bl	1a003cac <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a003ece:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003ed2:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a003ed6:	1c21      	adds	r1, r4, #0
1a003ed8:	bf18      	it	ne
1a003eda:	2101      	movne	r1, #1
1a003edc:	015b      	lsls	r3, r3, #5
1a003ede:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a003ee2:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a003ee6:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a003ee8:	2001      	movs	r0, #1
}
1a003eea:	b004      	add	sp, #16
1a003eec:	bd10      	pop	{r4, pc}
	  return FALSE;
1a003eee:	2000      	movs	r0, #0
1a003ef0:	4770      	bx	lr
	  return FALSE;
1a003ef2:	2000      	movs	r0, #0
}
1a003ef4:	4770      	bx	lr

1a003ef6 <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a003ef6:	f110 0f02 	cmn.w	r0, #2
1a003efa:	d02c      	beq.n	1a003f56 <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a003efc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a003f00:	d02b      	beq.n	1a003f5a <gpioRead+0x64>
{
1a003f02:	b500      	push	{lr}
1a003f04:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a003f06:	2300      	movs	r3, #0
1a003f08:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003f0c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003f10:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003f14:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003f18:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003f1c:	f10d 030b 	add.w	r3, sp, #11
1a003f20:	9301      	str	r3, [sp, #4]
1a003f22:	ab03      	add	r3, sp, #12
1a003f24:	9300      	str	r3, [sp, #0]
1a003f26:	f10d 030d 	add.w	r3, sp, #13
1a003f2a:	f10d 020e 	add.w	r2, sp, #14
1a003f2e:	f10d 010f 	add.w	r1, sp, #15
1a003f32:	f7ff febb 	bl	1a003cac <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a003f36:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a003f3a:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a003f3e:	015b      	lsls	r3, r3, #5
1a003f40:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a003f44:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a003f48:	5c98      	ldrb	r0, [r3, r2]
1a003f4a:	3000      	adds	r0, #0
1a003f4c:	bf18      	it	ne
1a003f4e:	2001      	movne	r0, #1

   return ret_val;
}
1a003f50:	b005      	add	sp, #20
1a003f52:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a003f56:	2001      	movs	r0, #1
1a003f58:	4770      	bx	lr
      return FALSE;
1a003f5a:	2000      	movs	r0, #0
}
1a003f5c:	4770      	bx	lr

1a003f5e <gpioToggle>:
{
1a003f5e:	b510      	push	{r4, lr}
1a003f60:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a003f62:	f7ff ffc8 	bl	1a003ef6 <gpioRead>
1a003f66:	fab0 f180 	clz	r1, r0
1a003f6a:	0949      	lsrs	r1, r1, #5
1a003f6c:	4620      	mov	r0, r4
1a003f6e:	f7ff ff8d 	bl	1a003e8c <gpioWrite>
}
1a003f72:	bd10      	pop	{r4, pc}

1a003f74 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a003f74:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a003f76:	4b04      	ldr	r3, [pc, #16]	; (1a003f88 <USB0_IRQHandler+0x14>)
1a003f78:	681b      	ldr	r3, [r3, #0]
1a003f7a:	681b      	ldr	r3, [r3, #0]
1a003f7c:	68db      	ldr	r3, [r3, #12]
1a003f7e:	4a03      	ldr	r2, [pc, #12]	; (1a003f8c <USB0_IRQHandler+0x18>)
1a003f80:	6810      	ldr	r0, [r2, #0]
1a003f82:	4798      	blx	r3
}
1a003f84:	bd08      	pop	{r3, pc}
1a003f86:	bf00      	nop
1a003f88:	10002e30 	.word	0x10002e30
1a003f8c:	10002d4c 	.word	0x10002d4c

1a003f90 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a003f90:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a003f92:	f7ff fb17 	bl	1a0035c4 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a003f96:	4b18      	ldr	r3, [pc, #96]	; (1a003ff8 <boardInit+0x68>)
1a003f98:	6818      	ldr	r0, [r3, #0]
1a003f9a:	f7ff fc7d 	bl	1a003898 <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a003f9e:	2105      	movs	r1, #5
1a003fa0:	2000      	movs	r0, #0
1a003fa2:	f7ff fe9d 	bl	1a003ce0 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a003fa6:	2100      	movs	r1, #0
1a003fa8:	2024      	movs	r0, #36	; 0x24
1a003faa:	f7ff fe99 	bl	1a003ce0 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a003fae:	2100      	movs	r1, #0
1a003fb0:	2025      	movs	r0, #37	; 0x25
1a003fb2:	f7ff fe95 	bl	1a003ce0 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a003fb6:	2100      	movs	r1, #0
1a003fb8:	2026      	movs	r0, #38	; 0x26
1a003fba:	f7ff fe91 	bl	1a003ce0 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a003fbe:	2100      	movs	r1, #0
1a003fc0:	2027      	movs	r0, #39	; 0x27
1a003fc2:	f7ff fe8d 	bl	1a003ce0 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a003fc6:	2101      	movs	r1, #1
1a003fc8:	2028      	movs	r0, #40	; 0x28
1a003fca:	f7ff fe89 	bl	1a003ce0 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a003fce:	2101      	movs	r1, #1
1a003fd0:	2029      	movs	r0, #41	; 0x29
1a003fd2:	f7ff fe85 	bl	1a003ce0 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a003fd6:	2101      	movs	r1, #1
1a003fd8:	202a      	movs	r0, #42	; 0x2a
1a003fda:	f7ff fe81 	bl	1a003ce0 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a003fde:	2101      	movs	r1, #1
1a003fe0:	202b      	movs	r0, #43	; 0x2b
1a003fe2:	f7ff fe7d 	bl	1a003ce0 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a003fe6:	2101      	movs	r1, #1
1a003fe8:	202c      	movs	r0, #44	; 0x2c
1a003fea:	f7ff fe79 	bl	1a003ce0 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a003fee:	2101      	movs	r1, #1
1a003ff0:	202d      	movs	r0, #45	; 0x2d
1a003ff2:	f7ff fe75 	bl	1a003ce0 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a003ff6:	bd08      	pop	{r3, pc}
1a003ff8:	10002e2c 	.word	0x10002e2c

1a003ffc <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a003ffc:	2301      	movs	r3, #1
1a003ffe:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a004002:	4b01      	ldr	r3, [pc, #4]	; (1a004008 <clearInterrupt+0xc>)
1a004004:	6258      	str	r0, [r3, #36]	; 0x24
}
1a004006:	4770      	bx	lr
1a004008:	40087000 	.word	0x40087000

1a00400c <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a00400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a00400e:	4b12      	ldr	r3, [pc, #72]	; (1a004058 <serveInterrupt+0x4c>)
1a004010:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a004012:	4b12      	ldr	r3, [pc, #72]	; (1a00405c <serveInterrupt+0x50>)
1a004014:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a004016:	2301      	movs	r3, #1
1a004018:	4083      	lsls	r3, r0
1a00401a:	420b      	tst	r3, r1
1a00401c:	d111      	bne.n	1a004042 <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a00401e:	4910      	ldr	r1, [pc, #64]	; (1a004060 <serveInterrupt+0x54>)
1a004020:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a004022:	4d10      	ldr	r5, [pc, #64]	; (1a004064 <serveInterrupt+0x58>)
1a004024:	0051      	lsls	r1, r2, #1
1a004026:	188f      	adds	r7, r1, r2
1a004028:	00fc      	lsls	r4, r7, #3
1a00402a:	4627      	mov	r7, r4
1a00402c:	442c      	add	r4, r5
1a00402e:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a004030:	6864      	ldr	r4, [r4, #4]
1a004032:	1b36      	subs	r6, r6, r4
1a004034:	443d      	add	r5, r7
1a004036:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a004038:	4a08      	ldr	r2, [pc, #32]	; (1a00405c <serveInterrupt+0x50>)
1a00403a:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a00403c:	f7ff ffde 	bl	1a003ffc <clearInterrupt>
}
1a004040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004042:	4907      	ldr	r1, [pc, #28]	; (1a004060 <serveInterrupt+0x54>)
1a004044:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a004046:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a00404a:	00d1      	lsls	r1, r2, #3
1a00404c:	4a05      	ldr	r2, [pc, #20]	; (1a004064 <serveInterrupt+0x58>)
1a00404e:	440a      	add	r2, r1
1a004050:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a004052:	4a02      	ldr	r2, [pc, #8]	; (1a00405c <serveInterrupt+0x50>)
1a004054:	61d3      	str	r3, [r2, #28]
1a004056:	e7f1      	b.n	1a00403c <serveInterrupt+0x30>
1a004058:	1a0056c4 	.word	0x1a0056c4
1a00405c:	40087000 	.word	0x40087000
1a004060:	40084000 	.word	0x40084000
1a004064:	10000080 	.word	0x10000080

1a004068 <GPIO0_IRQHandler>:
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifdef SAPI_USE_INTERRUPTS
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a004068:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a00406a:	2000      	movs	r0, #0
1a00406c:	f7ff ffce 	bl	1a00400c <serveInterrupt>
}
1a004070:	bd08      	pop	{r3, pc}

1a004072 <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a004072:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a004074:	2001      	movs	r0, #1
1a004076:	f7ff ffc9 	bl	1a00400c <serveInterrupt>
}
1a00407a:	bd08      	pop	{r3, pc}

1a00407c <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a00407c:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a00407e:	2002      	movs	r0, #2
1a004080:	f7ff ffc4 	bl	1a00400c <serveInterrupt>
}
1a004084:	bd08      	pop	{r3, pc}
1a004086:	Address 0x000000001a004086 is out of bounds.


1a004088 <__aeabi_uldivmod>:
1a004088:	b953      	cbnz	r3, 1a0040a0 <__aeabi_uldivmod+0x18>
1a00408a:	b94a      	cbnz	r2, 1a0040a0 <__aeabi_uldivmod+0x18>
1a00408c:	2900      	cmp	r1, #0
1a00408e:	bf08      	it	eq
1a004090:	2800      	cmpeq	r0, #0
1a004092:	bf1c      	itt	ne
1a004094:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a004098:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a00409c:	f000 b972 	b.w	1a004384 <__aeabi_idiv0>
1a0040a0:	f1ad 0c08 	sub.w	ip, sp, #8
1a0040a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0040a8:	f000 f806 	bl	1a0040b8 <__udivmoddi4>
1a0040ac:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0040b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0040b4:	b004      	add	sp, #16
1a0040b6:	4770      	bx	lr

1a0040b8 <__udivmoddi4>:
1a0040b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0040bc:	9e08      	ldr	r6, [sp, #32]
1a0040be:	4604      	mov	r4, r0
1a0040c0:	4688      	mov	r8, r1
1a0040c2:	2b00      	cmp	r3, #0
1a0040c4:	d14b      	bne.n	1a00415e <__udivmoddi4+0xa6>
1a0040c6:	428a      	cmp	r2, r1
1a0040c8:	4615      	mov	r5, r2
1a0040ca:	d967      	bls.n	1a00419c <__udivmoddi4+0xe4>
1a0040cc:	fab2 f282 	clz	r2, r2
1a0040d0:	b14a      	cbz	r2, 1a0040e6 <__udivmoddi4+0x2e>
1a0040d2:	f1c2 0720 	rsb	r7, r2, #32
1a0040d6:	fa01 f302 	lsl.w	r3, r1, r2
1a0040da:	fa20 f707 	lsr.w	r7, r0, r7
1a0040de:	4095      	lsls	r5, r2
1a0040e0:	ea47 0803 	orr.w	r8, r7, r3
1a0040e4:	4094      	lsls	r4, r2
1a0040e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0040ea:	0c23      	lsrs	r3, r4, #16
1a0040ec:	fbb8 f7fe 	udiv	r7, r8, lr
1a0040f0:	fa1f fc85 	uxth.w	ip, r5
1a0040f4:	fb0e 8817 	mls	r8, lr, r7, r8
1a0040f8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0040fc:	fb07 f10c 	mul.w	r1, r7, ip
1a004100:	4299      	cmp	r1, r3
1a004102:	d909      	bls.n	1a004118 <__udivmoddi4+0x60>
1a004104:	18eb      	adds	r3, r5, r3
1a004106:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a00410a:	f080 811b 	bcs.w	1a004344 <__udivmoddi4+0x28c>
1a00410e:	4299      	cmp	r1, r3
1a004110:	f240 8118 	bls.w	1a004344 <__udivmoddi4+0x28c>
1a004114:	3f02      	subs	r7, #2
1a004116:	442b      	add	r3, r5
1a004118:	1a5b      	subs	r3, r3, r1
1a00411a:	b2a4      	uxth	r4, r4
1a00411c:	fbb3 f0fe 	udiv	r0, r3, lr
1a004120:	fb0e 3310 	mls	r3, lr, r0, r3
1a004124:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a004128:	fb00 fc0c 	mul.w	ip, r0, ip
1a00412c:	45a4      	cmp	ip, r4
1a00412e:	d909      	bls.n	1a004144 <__udivmoddi4+0x8c>
1a004130:	192c      	adds	r4, r5, r4
1a004132:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004136:	f080 8107 	bcs.w	1a004348 <__udivmoddi4+0x290>
1a00413a:	45a4      	cmp	ip, r4
1a00413c:	f240 8104 	bls.w	1a004348 <__udivmoddi4+0x290>
1a004140:	3802      	subs	r0, #2
1a004142:	442c      	add	r4, r5
1a004144:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a004148:	eba4 040c 	sub.w	r4, r4, ip
1a00414c:	2700      	movs	r7, #0
1a00414e:	b11e      	cbz	r6, 1a004158 <__udivmoddi4+0xa0>
1a004150:	40d4      	lsrs	r4, r2
1a004152:	2300      	movs	r3, #0
1a004154:	e9c6 4300 	strd	r4, r3, [r6]
1a004158:	4639      	mov	r1, r7
1a00415a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00415e:	428b      	cmp	r3, r1
1a004160:	d909      	bls.n	1a004176 <__udivmoddi4+0xbe>
1a004162:	2e00      	cmp	r6, #0
1a004164:	f000 80eb 	beq.w	1a00433e <__udivmoddi4+0x286>
1a004168:	2700      	movs	r7, #0
1a00416a:	e9c6 0100 	strd	r0, r1, [r6]
1a00416e:	4638      	mov	r0, r7
1a004170:	4639      	mov	r1, r7
1a004172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004176:	fab3 f783 	clz	r7, r3
1a00417a:	2f00      	cmp	r7, #0
1a00417c:	d147      	bne.n	1a00420e <__udivmoddi4+0x156>
1a00417e:	428b      	cmp	r3, r1
1a004180:	d302      	bcc.n	1a004188 <__udivmoddi4+0xd0>
1a004182:	4282      	cmp	r2, r0
1a004184:	f200 80fa 	bhi.w	1a00437c <__udivmoddi4+0x2c4>
1a004188:	1a84      	subs	r4, r0, r2
1a00418a:	eb61 0303 	sbc.w	r3, r1, r3
1a00418e:	2001      	movs	r0, #1
1a004190:	4698      	mov	r8, r3
1a004192:	2e00      	cmp	r6, #0
1a004194:	d0e0      	beq.n	1a004158 <__udivmoddi4+0xa0>
1a004196:	e9c6 4800 	strd	r4, r8, [r6]
1a00419a:	e7dd      	b.n	1a004158 <__udivmoddi4+0xa0>
1a00419c:	b902      	cbnz	r2, 1a0041a0 <__udivmoddi4+0xe8>
1a00419e:	deff      	udf	#255	; 0xff
1a0041a0:	fab2 f282 	clz	r2, r2
1a0041a4:	2a00      	cmp	r2, #0
1a0041a6:	f040 808f 	bne.w	1a0042c8 <__udivmoddi4+0x210>
1a0041aa:	1b49      	subs	r1, r1, r5
1a0041ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0041b0:	fa1f f885 	uxth.w	r8, r5
1a0041b4:	2701      	movs	r7, #1
1a0041b6:	fbb1 fcfe 	udiv	ip, r1, lr
1a0041ba:	0c23      	lsrs	r3, r4, #16
1a0041bc:	fb0e 111c 	mls	r1, lr, ip, r1
1a0041c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0041c4:	fb08 f10c 	mul.w	r1, r8, ip
1a0041c8:	4299      	cmp	r1, r3
1a0041ca:	d907      	bls.n	1a0041dc <__udivmoddi4+0x124>
1a0041cc:	18eb      	adds	r3, r5, r3
1a0041ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a0041d2:	d202      	bcs.n	1a0041da <__udivmoddi4+0x122>
1a0041d4:	4299      	cmp	r1, r3
1a0041d6:	f200 80cd 	bhi.w	1a004374 <__udivmoddi4+0x2bc>
1a0041da:	4684      	mov	ip, r0
1a0041dc:	1a59      	subs	r1, r3, r1
1a0041de:	b2a3      	uxth	r3, r4
1a0041e0:	fbb1 f0fe 	udiv	r0, r1, lr
1a0041e4:	fb0e 1410 	mls	r4, lr, r0, r1
1a0041e8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a0041ec:	fb08 f800 	mul.w	r8, r8, r0
1a0041f0:	45a0      	cmp	r8, r4
1a0041f2:	d907      	bls.n	1a004204 <__udivmoddi4+0x14c>
1a0041f4:	192c      	adds	r4, r5, r4
1a0041f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0041fa:	d202      	bcs.n	1a004202 <__udivmoddi4+0x14a>
1a0041fc:	45a0      	cmp	r8, r4
1a0041fe:	f200 80b6 	bhi.w	1a00436e <__udivmoddi4+0x2b6>
1a004202:	4618      	mov	r0, r3
1a004204:	eba4 0408 	sub.w	r4, r4, r8
1a004208:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a00420c:	e79f      	b.n	1a00414e <__udivmoddi4+0x96>
1a00420e:	f1c7 0c20 	rsb	ip, r7, #32
1a004212:	40bb      	lsls	r3, r7
1a004214:	fa22 fe0c 	lsr.w	lr, r2, ip
1a004218:	ea4e 0e03 	orr.w	lr, lr, r3
1a00421c:	fa01 f407 	lsl.w	r4, r1, r7
1a004220:	fa20 f50c 	lsr.w	r5, r0, ip
1a004224:	fa21 f30c 	lsr.w	r3, r1, ip
1a004228:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a00422c:	4325      	orrs	r5, r4
1a00422e:	fbb3 f9f8 	udiv	r9, r3, r8
1a004232:	0c2c      	lsrs	r4, r5, #16
1a004234:	fb08 3319 	mls	r3, r8, r9, r3
1a004238:	fa1f fa8e 	uxth.w	sl, lr
1a00423c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a004240:	fb09 f40a 	mul.w	r4, r9, sl
1a004244:	429c      	cmp	r4, r3
1a004246:	fa02 f207 	lsl.w	r2, r2, r7
1a00424a:	fa00 f107 	lsl.w	r1, r0, r7
1a00424e:	d90b      	bls.n	1a004268 <__udivmoddi4+0x1b0>
1a004250:	eb1e 0303 	adds.w	r3, lr, r3
1a004254:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a004258:	f080 8087 	bcs.w	1a00436a <__udivmoddi4+0x2b2>
1a00425c:	429c      	cmp	r4, r3
1a00425e:	f240 8084 	bls.w	1a00436a <__udivmoddi4+0x2b2>
1a004262:	f1a9 0902 	sub.w	r9, r9, #2
1a004266:	4473      	add	r3, lr
1a004268:	1b1b      	subs	r3, r3, r4
1a00426a:	b2ad      	uxth	r5, r5
1a00426c:	fbb3 f0f8 	udiv	r0, r3, r8
1a004270:	fb08 3310 	mls	r3, r8, r0, r3
1a004274:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a004278:	fb00 fa0a 	mul.w	sl, r0, sl
1a00427c:	45a2      	cmp	sl, r4
1a00427e:	d908      	bls.n	1a004292 <__udivmoddi4+0x1da>
1a004280:	eb1e 0404 	adds.w	r4, lr, r4
1a004284:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004288:	d26b      	bcs.n	1a004362 <__udivmoddi4+0x2aa>
1a00428a:	45a2      	cmp	sl, r4
1a00428c:	d969      	bls.n	1a004362 <__udivmoddi4+0x2aa>
1a00428e:	3802      	subs	r0, #2
1a004290:	4474      	add	r4, lr
1a004292:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a004296:	fba0 8902 	umull	r8, r9, r0, r2
1a00429a:	eba4 040a 	sub.w	r4, r4, sl
1a00429e:	454c      	cmp	r4, r9
1a0042a0:	46c2      	mov	sl, r8
1a0042a2:	464b      	mov	r3, r9
1a0042a4:	d354      	bcc.n	1a004350 <__udivmoddi4+0x298>
1a0042a6:	d051      	beq.n	1a00434c <__udivmoddi4+0x294>
1a0042a8:	2e00      	cmp	r6, #0
1a0042aa:	d069      	beq.n	1a004380 <__udivmoddi4+0x2c8>
1a0042ac:	ebb1 050a 	subs.w	r5, r1, sl
1a0042b0:	eb64 0403 	sbc.w	r4, r4, r3
1a0042b4:	fa04 fc0c 	lsl.w	ip, r4, ip
1a0042b8:	40fd      	lsrs	r5, r7
1a0042ba:	40fc      	lsrs	r4, r7
1a0042bc:	ea4c 0505 	orr.w	r5, ip, r5
1a0042c0:	e9c6 5400 	strd	r5, r4, [r6]
1a0042c4:	2700      	movs	r7, #0
1a0042c6:	e747      	b.n	1a004158 <__udivmoddi4+0xa0>
1a0042c8:	f1c2 0320 	rsb	r3, r2, #32
1a0042cc:	fa20 f703 	lsr.w	r7, r0, r3
1a0042d0:	4095      	lsls	r5, r2
1a0042d2:	fa01 f002 	lsl.w	r0, r1, r2
1a0042d6:	fa21 f303 	lsr.w	r3, r1, r3
1a0042da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0042de:	4338      	orrs	r0, r7
1a0042e0:	0c01      	lsrs	r1, r0, #16
1a0042e2:	fbb3 f7fe 	udiv	r7, r3, lr
1a0042e6:	fa1f f885 	uxth.w	r8, r5
1a0042ea:	fb0e 3317 	mls	r3, lr, r7, r3
1a0042ee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0042f2:	fb07 f308 	mul.w	r3, r7, r8
1a0042f6:	428b      	cmp	r3, r1
1a0042f8:	fa04 f402 	lsl.w	r4, r4, r2
1a0042fc:	d907      	bls.n	1a00430e <__udivmoddi4+0x256>
1a0042fe:	1869      	adds	r1, r5, r1
1a004300:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a004304:	d22f      	bcs.n	1a004366 <__udivmoddi4+0x2ae>
1a004306:	428b      	cmp	r3, r1
1a004308:	d92d      	bls.n	1a004366 <__udivmoddi4+0x2ae>
1a00430a:	3f02      	subs	r7, #2
1a00430c:	4429      	add	r1, r5
1a00430e:	1acb      	subs	r3, r1, r3
1a004310:	b281      	uxth	r1, r0
1a004312:	fbb3 f0fe 	udiv	r0, r3, lr
1a004316:	fb0e 3310 	mls	r3, lr, r0, r3
1a00431a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00431e:	fb00 f308 	mul.w	r3, r0, r8
1a004322:	428b      	cmp	r3, r1
1a004324:	d907      	bls.n	1a004336 <__udivmoddi4+0x27e>
1a004326:	1869      	adds	r1, r5, r1
1a004328:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a00432c:	d217      	bcs.n	1a00435e <__udivmoddi4+0x2a6>
1a00432e:	428b      	cmp	r3, r1
1a004330:	d915      	bls.n	1a00435e <__udivmoddi4+0x2a6>
1a004332:	3802      	subs	r0, #2
1a004334:	4429      	add	r1, r5
1a004336:	1ac9      	subs	r1, r1, r3
1a004338:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a00433c:	e73b      	b.n	1a0041b6 <__udivmoddi4+0xfe>
1a00433e:	4637      	mov	r7, r6
1a004340:	4630      	mov	r0, r6
1a004342:	e709      	b.n	1a004158 <__udivmoddi4+0xa0>
1a004344:	4607      	mov	r7, r0
1a004346:	e6e7      	b.n	1a004118 <__udivmoddi4+0x60>
1a004348:	4618      	mov	r0, r3
1a00434a:	e6fb      	b.n	1a004144 <__udivmoddi4+0x8c>
1a00434c:	4541      	cmp	r1, r8
1a00434e:	d2ab      	bcs.n	1a0042a8 <__udivmoddi4+0x1f0>
1a004350:	ebb8 0a02 	subs.w	sl, r8, r2
1a004354:	eb69 020e 	sbc.w	r2, r9, lr
1a004358:	3801      	subs	r0, #1
1a00435a:	4613      	mov	r3, r2
1a00435c:	e7a4      	b.n	1a0042a8 <__udivmoddi4+0x1f0>
1a00435e:	4660      	mov	r0, ip
1a004360:	e7e9      	b.n	1a004336 <__udivmoddi4+0x27e>
1a004362:	4618      	mov	r0, r3
1a004364:	e795      	b.n	1a004292 <__udivmoddi4+0x1da>
1a004366:	4667      	mov	r7, ip
1a004368:	e7d1      	b.n	1a00430e <__udivmoddi4+0x256>
1a00436a:	4681      	mov	r9, r0
1a00436c:	e77c      	b.n	1a004268 <__udivmoddi4+0x1b0>
1a00436e:	3802      	subs	r0, #2
1a004370:	442c      	add	r4, r5
1a004372:	e747      	b.n	1a004204 <__udivmoddi4+0x14c>
1a004374:	f1ac 0c02 	sub.w	ip, ip, #2
1a004378:	442b      	add	r3, r5
1a00437a:	e72f      	b.n	1a0041dc <__udivmoddi4+0x124>
1a00437c:	4638      	mov	r0, r7
1a00437e:	e708      	b.n	1a004192 <__udivmoddi4+0xda>
1a004380:	4637      	mov	r7, r6
1a004382:	e6e9      	b.n	1a004158 <__udivmoddi4+0xa0>

1a004384 <__aeabi_idiv0>:
1a004384:	4770      	bx	lr
1a004386:	bf00      	nop

1a004388 <__sflush_r>:
1a004388:	898a      	ldrh	r2, [r1, #12]
1a00438a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00438e:	4605      	mov	r5, r0
1a004390:	0710      	lsls	r0, r2, #28
1a004392:	460c      	mov	r4, r1
1a004394:	d458      	bmi.n	1a004448 <__sflush_r+0xc0>
1a004396:	684b      	ldr	r3, [r1, #4]
1a004398:	2b00      	cmp	r3, #0
1a00439a:	dc05      	bgt.n	1a0043a8 <__sflush_r+0x20>
1a00439c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a00439e:	2b00      	cmp	r3, #0
1a0043a0:	dc02      	bgt.n	1a0043a8 <__sflush_r+0x20>
1a0043a2:	2000      	movs	r0, #0
1a0043a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0043a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a0043aa:	2e00      	cmp	r6, #0
1a0043ac:	d0f9      	beq.n	1a0043a2 <__sflush_r+0x1a>
1a0043ae:	2300      	movs	r3, #0
1a0043b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a0043b4:	682f      	ldr	r7, [r5, #0]
1a0043b6:	6a21      	ldr	r1, [r4, #32]
1a0043b8:	602b      	str	r3, [r5, #0]
1a0043ba:	d032      	beq.n	1a004422 <__sflush_r+0x9a>
1a0043bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a0043be:	89a3      	ldrh	r3, [r4, #12]
1a0043c0:	075a      	lsls	r2, r3, #29
1a0043c2:	d505      	bpl.n	1a0043d0 <__sflush_r+0x48>
1a0043c4:	6863      	ldr	r3, [r4, #4]
1a0043c6:	1ac0      	subs	r0, r0, r3
1a0043c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a0043ca:	b10b      	cbz	r3, 1a0043d0 <__sflush_r+0x48>
1a0043cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0043ce:	1ac0      	subs	r0, r0, r3
1a0043d0:	2300      	movs	r3, #0
1a0043d2:	4602      	mov	r2, r0
1a0043d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a0043d6:	6a21      	ldr	r1, [r4, #32]
1a0043d8:	4628      	mov	r0, r5
1a0043da:	47b0      	blx	r6
1a0043dc:	1c43      	adds	r3, r0, #1
1a0043de:	89a3      	ldrh	r3, [r4, #12]
1a0043e0:	d106      	bne.n	1a0043f0 <__sflush_r+0x68>
1a0043e2:	6829      	ldr	r1, [r5, #0]
1a0043e4:	291d      	cmp	r1, #29
1a0043e6:	d848      	bhi.n	1a00447a <__sflush_r+0xf2>
1a0043e8:	4a29      	ldr	r2, [pc, #164]	; (1a004490 <__sflush_r+0x108>)
1a0043ea:	40ca      	lsrs	r2, r1
1a0043ec:	07d6      	lsls	r6, r2, #31
1a0043ee:	d544      	bpl.n	1a00447a <__sflush_r+0xf2>
1a0043f0:	2200      	movs	r2, #0
1a0043f2:	6062      	str	r2, [r4, #4]
1a0043f4:	04d9      	lsls	r1, r3, #19
1a0043f6:	6922      	ldr	r2, [r4, #16]
1a0043f8:	6022      	str	r2, [r4, #0]
1a0043fa:	d504      	bpl.n	1a004406 <__sflush_r+0x7e>
1a0043fc:	1c42      	adds	r2, r0, #1
1a0043fe:	d101      	bne.n	1a004404 <__sflush_r+0x7c>
1a004400:	682b      	ldr	r3, [r5, #0]
1a004402:	b903      	cbnz	r3, 1a004406 <__sflush_r+0x7e>
1a004404:	6560      	str	r0, [r4, #84]	; 0x54
1a004406:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a004408:	602f      	str	r7, [r5, #0]
1a00440a:	2900      	cmp	r1, #0
1a00440c:	d0c9      	beq.n	1a0043a2 <__sflush_r+0x1a>
1a00440e:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a004412:	4299      	cmp	r1, r3
1a004414:	d002      	beq.n	1a00441c <__sflush_r+0x94>
1a004416:	4628      	mov	r0, r5
1a004418:	f000 f99c 	bl	1a004754 <_free_r>
1a00441c:	2000      	movs	r0, #0
1a00441e:	6360      	str	r0, [r4, #52]	; 0x34
1a004420:	e7c0      	b.n	1a0043a4 <__sflush_r+0x1c>
1a004422:	2301      	movs	r3, #1
1a004424:	4628      	mov	r0, r5
1a004426:	47b0      	blx	r6
1a004428:	1c41      	adds	r1, r0, #1
1a00442a:	d1c8      	bne.n	1a0043be <__sflush_r+0x36>
1a00442c:	682b      	ldr	r3, [r5, #0]
1a00442e:	2b00      	cmp	r3, #0
1a004430:	d0c5      	beq.n	1a0043be <__sflush_r+0x36>
1a004432:	2b1d      	cmp	r3, #29
1a004434:	d001      	beq.n	1a00443a <__sflush_r+0xb2>
1a004436:	2b16      	cmp	r3, #22
1a004438:	d101      	bne.n	1a00443e <__sflush_r+0xb6>
1a00443a:	602f      	str	r7, [r5, #0]
1a00443c:	e7b1      	b.n	1a0043a2 <__sflush_r+0x1a>
1a00443e:	89a3      	ldrh	r3, [r4, #12]
1a004440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004444:	81a3      	strh	r3, [r4, #12]
1a004446:	e7ad      	b.n	1a0043a4 <__sflush_r+0x1c>
1a004448:	690f      	ldr	r7, [r1, #16]
1a00444a:	2f00      	cmp	r7, #0
1a00444c:	d0a9      	beq.n	1a0043a2 <__sflush_r+0x1a>
1a00444e:	0793      	lsls	r3, r2, #30
1a004450:	680e      	ldr	r6, [r1, #0]
1a004452:	bf08      	it	eq
1a004454:	694b      	ldreq	r3, [r1, #20]
1a004456:	600f      	str	r7, [r1, #0]
1a004458:	bf18      	it	ne
1a00445a:	2300      	movne	r3, #0
1a00445c:	eba6 0807 	sub.w	r8, r6, r7
1a004460:	608b      	str	r3, [r1, #8]
1a004462:	f1b8 0f00 	cmp.w	r8, #0
1a004466:	dd9c      	ble.n	1a0043a2 <__sflush_r+0x1a>
1a004468:	4643      	mov	r3, r8
1a00446a:	463a      	mov	r2, r7
1a00446c:	6a21      	ldr	r1, [r4, #32]
1a00446e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a004470:	4628      	mov	r0, r5
1a004472:	47b0      	blx	r6
1a004474:	2800      	cmp	r0, #0
1a004476:	dc06      	bgt.n	1a004486 <__sflush_r+0xfe>
1a004478:	89a3      	ldrh	r3, [r4, #12]
1a00447a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00447e:	81a3      	strh	r3, [r4, #12]
1a004480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004484:	e78e      	b.n	1a0043a4 <__sflush_r+0x1c>
1a004486:	4407      	add	r7, r0
1a004488:	eba8 0800 	sub.w	r8, r8, r0
1a00448c:	e7e9      	b.n	1a004462 <__sflush_r+0xda>
1a00448e:	bf00      	nop
1a004490:	20400001 	.word	0x20400001

1a004494 <_fflush_r>:
1a004494:	b538      	push	{r3, r4, r5, lr}
1a004496:	690b      	ldr	r3, [r1, #16]
1a004498:	4605      	mov	r5, r0
1a00449a:	460c      	mov	r4, r1
1a00449c:	b1db      	cbz	r3, 1a0044d6 <_fflush_r+0x42>
1a00449e:	b118      	cbz	r0, 1a0044a8 <_fflush_r+0x14>
1a0044a0:	6983      	ldr	r3, [r0, #24]
1a0044a2:	b90b      	cbnz	r3, 1a0044a8 <_fflush_r+0x14>
1a0044a4:	f000 f860 	bl	1a004568 <__sinit>
1a0044a8:	4b0c      	ldr	r3, [pc, #48]	; (1a0044dc <_fflush_r+0x48>)
1a0044aa:	429c      	cmp	r4, r3
1a0044ac:	d109      	bne.n	1a0044c2 <_fflush_r+0x2e>
1a0044ae:	686c      	ldr	r4, [r5, #4]
1a0044b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0044b4:	b17b      	cbz	r3, 1a0044d6 <_fflush_r+0x42>
1a0044b6:	4621      	mov	r1, r4
1a0044b8:	4628      	mov	r0, r5
1a0044ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a0044be:	f7ff bf63 	b.w	1a004388 <__sflush_r>
1a0044c2:	4b07      	ldr	r3, [pc, #28]	; (1a0044e0 <_fflush_r+0x4c>)
1a0044c4:	429c      	cmp	r4, r3
1a0044c6:	d101      	bne.n	1a0044cc <_fflush_r+0x38>
1a0044c8:	68ac      	ldr	r4, [r5, #8]
1a0044ca:	e7f1      	b.n	1a0044b0 <_fflush_r+0x1c>
1a0044cc:	4b05      	ldr	r3, [pc, #20]	; (1a0044e4 <_fflush_r+0x50>)
1a0044ce:	429c      	cmp	r4, r3
1a0044d0:	bf08      	it	eq
1a0044d2:	68ec      	ldreq	r4, [r5, #12]
1a0044d4:	e7ec      	b.n	1a0044b0 <_fflush_r+0x1c>
1a0044d6:	2000      	movs	r0, #0
1a0044d8:	bd38      	pop	{r3, r4, r5, pc}
1a0044da:	bf00      	nop
1a0044dc:	1a0056e8 	.word	0x1a0056e8
1a0044e0:	1a005708 	.word	0x1a005708
1a0044e4:	1a0056c8 	.word	0x1a0056c8

1a0044e8 <std>:
1a0044e8:	2300      	movs	r3, #0
1a0044ea:	b510      	push	{r4, lr}
1a0044ec:	4604      	mov	r4, r0
1a0044ee:	e9c0 3300 	strd	r3, r3, [r0]
1a0044f2:	6083      	str	r3, [r0, #8]
1a0044f4:	8181      	strh	r1, [r0, #12]
1a0044f6:	6643      	str	r3, [r0, #100]	; 0x64
1a0044f8:	81c2      	strh	r2, [r0, #14]
1a0044fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a0044fe:	6183      	str	r3, [r0, #24]
1a004500:	4619      	mov	r1, r3
1a004502:	2208      	movs	r2, #8
1a004504:	305c      	adds	r0, #92	; 0x5c
1a004506:	f000 f91c 	bl	1a004742 <memset>
1a00450a:	4b05      	ldr	r3, [pc, #20]	; (1a004520 <std+0x38>)
1a00450c:	6263      	str	r3, [r4, #36]	; 0x24
1a00450e:	4b05      	ldr	r3, [pc, #20]	; (1a004524 <std+0x3c>)
1a004510:	62a3      	str	r3, [r4, #40]	; 0x28
1a004512:	4b05      	ldr	r3, [pc, #20]	; (1a004528 <std+0x40>)
1a004514:	62e3      	str	r3, [r4, #44]	; 0x2c
1a004516:	4b05      	ldr	r3, [pc, #20]	; (1a00452c <std+0x44>)
1a004518:	6224      	str	r4, [r4, #32]
1a00451a:	6323      	str	r3, [r4, #48]	; 0x30
1a00451c:	bd10      	pop	{r4, pc}
1a00451e:	bf00      	nop
1a004520:	1a00499d 	.word	0x1a00499d
1a004524:	1a0049bf 	.word	0x1a0049bf
1a004528:	1a0049f7 	.word	0x1a0049f7
1a00452c:	1a004a1b 	.word	0x1a004a1b

1a004530 <_cleanup_r>:
1a004530:	4901      	ldr	r1, [pc, #4]	; (1a004538 <_cleanup_r+0x8>)
1a004532:	f000 b899 	b.w	1a004668 <_fwalk_reent>
1a004536:	bf00      	nop
1a004538:	1a004495 	.word	0x1a004495

1a00453c <__sfmoreglue>:
1a00453c:	b570      	push	{r4, r5, r6, lr}
1a00453e:	1e4a      	subs	r2, r1, #1
1a004540:	2568      	movs	r5, #104	; 0x68
1a004542:	4355      	muls	r5, r2
1a004544:	460e      	mov	r6, r1
1a004546:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a00454a:	f000 f951 	bl	1a0047f0 <_malloc_r>
1a00454e:	4604      	mov	r4, r0
1a004550:	b140      	cbz	r0, 1a004564 <__sfmoreglue+0x28>
1a004552:	2100      	movs	r1, #0
1a004554:	e9c0 1600 	strd	r1, r6, [r0]
1a004558:	300c      	adds	r0, #12
1a00455a:	60a0      	str	r0, [r4, #8]
1a00455c:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a004560:	f000 f8ef 	bl	1a004742 <memset>
1a004564:	4620      	mov	r0, r4
1a004566:	bd70      	pop	{r4, r5, r6, pc}

1a004568 <__sinit>:
1a004568:	6983      	ldr	r3, [r0, #24]
1a00456a:	b510      	push	{r4, lr}
1a00456c:	4604      	mov	r4, r0
1a00456e:	bb33      	cbnz	r3, 1a0045be <__sinit+0x56>
1a004570:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
1a004574:	6503      	str	r3, [r0, #80]	; 0x50
1a004576:	4b12      	ldr	r3, [pc, #72]	; (1a0045c0 <__sinit+0x58>)
1a004578:	4a12      	ldr	r2, [pc, #72]	; (1a0045c4 <__sinit+0x5c>)
1a00457a:	681b      	ldr	r3, [r3, #0]
1a00457c:	6282      	str	r2, [r0, #40]	; 0x28
1a00457e:	4298      	cmp	r0, r3
1a004580:	bf04      	itt	eq
1a004582:	2301      	moveq	r3, #1
1a004584:	6183      	streq	r3, [r0, #24]
1a004586:	f000 f81f 	bl	1a0045c8 <__sfp>
1a00458a:	6060      	str	r0, [r4, #4]
1a00458c:	4620      	mov	r0, r4
1a00458e:	f000 f81b 	bl	1a0045c8 <__sfp>
1a004592:	60a0      	str	r0, [r4, #8]
1a004594:	4620      	mov	r0, r4
1a004596:	f000 f817 	bl	1a0045c8 <__sfp>
1a00459a:	2200      	movs	r2, #0
1a00459c:	60e0      	str	r0, [r4, #12]
1a00459e:	2104      	movs	r1, #4
1a0045a0:	6860      	ldr	r0, [r4, #4]
1a0045a2:	f7ff ffa1 	bl	1a0044e8 <std>
1a0045a6:	2201      	movs	r2, #1
1a0045a8:	2109      	movs	r1, #9
1a0045aa:	68a0      	ldr	r0, [r4, #8]
1a0045ac:	f7ff ff9c 	bl	1a0044e8 <std>
1a0045b0:	2202      	movs	r2, #2
1a0045b2:	2112      	movs	r1, #18
1a0045b4:	68e0      	ldr	r0, [r4, #12]
1a0045b6:	f7ff ff97 	bl	1a0044e8 <std>
1a0045ba:	2301      	movs	r3, #1
1a0045bc:	61a3      	str	r3, [r4, #24]
1a0045be:	bd10      	pop	{r4, pc}
1a0045c0:	1a005728 	.word	0x1a005728
1a0045c4:	1a004531 	.word	0x1a004531

1a0045c8 <__sfp>:
1a0045c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0045ca:	4b1b      	ldr	r3, [pc, #108]	; (1a004638 <__sfp+0x70>)
1a0045cc:	681e      	ldr	r6, [r3, #0]
1a0045ce:	69b3      	ldr	r3, [r6, #24]
1a0045d0:	4607      	mov	r7, r0
1a0045d2:	b913      	cbnz	r3, 1a0045da <__sfp+0x12>
1a0045d4:	4630      	mov	r0, r6
1a0045d6:	f7ff ffc7 	bl	1a004568 <__sinit>
1a0045da:	3648      	adds	r6, #72	; 0x48
1a0045dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a0045e0:	3b01      	subs	r3, #1
1a0045e2:	d503      	bpl.n	1a0045ec <__sfp+0x24>
1a0045e4:	6833      	ldr	r3, [r6, #0]
1a0045e6:	b133      	cbz	r3, 1a0045f6 <__sfp+0x2e>
1a0045e8:	6836      	ldr	r6, [r6, #0]
1a0045ea:	e7f7      	b.n	1a0045dc <__sfp+0x14>
1a0045ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a0045f0:	b16d      	cbz	r5, 1a00460e <__sfp+0x46>
1a0045f2:	3468      	adds	r4, #104	; 0x68
1a0045f4:	e7f4      	b.n	1a0045e0 <__sfp+0x18>
1a0045f6:	2104      	movs	r1, #4
1a0045f8:	4638      	mov	r0, r7
1a0045fa:	f7ff ff9f 	bl	1a00453c <__sfmoreglue>
1a0045fe:	6030      	str	r0, [r6, #0]
1a004600:	2800      	cmp	r0, #0
1a004602:	d1f1      	bne.n	1a0045e8 <__sfp+0x20>
1a004604:	230c      	movs	r3, #12
1a004606:	603b      	str	r3, [r7, #0]
1a004608:	4604      	mov	r4, r0
1a00460a:	4620      	mov	r0, r4
1a00460c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00460e:	4b0b      	ldr	r3, [pc, #44]	; (1a00463c <__sfp+0x74>)
1a004610:	6665      	str	r5, [r4, #100]	; 0x64
1a004612:	e9c4 5500 	strd	r5, r5, [r4]
1a004616:	60a5      	str	r5, [r4, #8]
1a004618:	e9c4 3503 	strd	r3, r5, [r4, #12]
1a00461c:	e9c4 5505 	strd	r5, r5, [r4, #20]
1a004620:	2208      	movs	r2, #8
1a004622:	4629      	mov	r1, r5
1a004624:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a004628:	f000 f88b 	bl	1a004742 <memset>
1a00462c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a004630:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a004634:	e7e9      	b.n	1a00460a <__sfp+0x42>
1a004636:	bf00      	nop
1a004638:	1a005728 	.word	0x1a005728
1a00463c:	ffff0001 	.word	0xffff0001

1a004640 <__libc_fini_array>:
1a004640:	b538      	push	{r3, r4, r5, lr}
1a004642:	4d07      	ldr	r5, [pc, #28]	; (1a004660 <__libc_fini_array+0x20>)
1a004644:	4c07      	ldr	r4, [pc, #28]	; (1a004664 <__libc_fini_array+0x24>)
1a004646:	1b64      	subs	r4, r4, r5
1a004648:	10a4      	asrs	r4, r4, #2
1a00464a:	b91c      	cbnz	r4, 1a004654 <__libc_fini_array+0x14>
1a00464c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a004650:	f7fc bafc 	b.w	1a000c4c <_fini>
1a004654:	3c01      	subs	r4, #1
1a004656:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
1a00465a:	4798      	blx	r3
1a00465c:	e7f5      	b.n	1a00464a <__libc_fini_array+0xa>
1a00465e:	bf00      	nop
	...

1a004668 <_fwalk_reent>:
1a004668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00466c:	4680      	mov	r8, r0
1a00466e:	4689      	mov	r9, r1
1a004670:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a004674:	2600      	movs	r6, #0
1a004676:	b914      	cbnz	r4, 1a00467e <_fwalk_reent+0x16>
1a004678:	4630      	mov	r0, r6
1a00467a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00467e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a004682:	3f01      	subs	r7, #1
1a004684:	d501      	bpl.n	1a00468a <_fwalk_reent+0x22>
1a004686:	6824      	ldr	r4, [r4, #0]
1a004688:	e7f5      	b.n	1a004676 <_fwalk_reent+0xe>
1a00468a:	89ab      	ldrh	r3, [r5, #12]
1a00468c:	2b01      	cmp	r3, #1
1a00468e:	d907      	bls.n	1a0046a0 <_fwalk_reent+0x38>
1a004690:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a004694:	3301      	adds	r3, #1
1a004696:	d003      	beq.n	1a0046a0 <_fwalk_reent+0x38>
1a004698:	4629      	mov	r1, r5
1a00469a:	4640      	mov	r0, r8
1a00469c:	47c8      	blx	r9
1a00469e:	4306      	orrs	r6, r0
1a0046a0:	3568      	adds	r5, #104	; 0x68
1a0046a2:	e7ee      	b.n	1a004682 <_fwalk_reent+0x1a>

1a0046a4 <__libc_init_array>:
1a0046a4:	b570      	push	{r4, r5, r6, lr}
1a0046a6:	4e0d      	ldr	r6, [pc, #52]	; (1a0046dc <__libc_init_array+0x38>)
1a0046a8:	4c0d      	ldr	r4, [pc, #52]	; (1a0046e0 <__libc_init_array+0x3c>)
1a0046aa:	1ba4      	subs	r4, r4, r6
1a0046ac:	10a4      	asrs	r4, r4, #2
1a0046ae:	2500      	movs	r5, #0
1a0046b0:	42a5      	cmp	r5, r4
1a0046b2:	d109      	bne.n	1a0046c8 <__libc_init_array+0x24>
1a0046b4:	4e0b      	ldr	r6, [pc, #44]	; (1a0046e4 <__libc_init_array+0x40>)
1a0046b6:	4c0c      	ldr	r4, [pc, #48]	; (1a0046e8 <__libc_init_array+0x44>)
1a0046b8:	f7fc fac9 	bl	1a000c4e <_init>
1a0046bc:	1ba4      	subs	r4, r4, r6
1a0046be:	10a4      	asrs	r4, r4, #2
1a0046c0:	2500      	movs	r5, #0
1a0046c2:	42a5      	cmp	r5, r4
1a0046c4:	d105      	bne.n	1a0046d2 <__libc_init_array+0x2e>
1a0046c6:	bd70      	pop	{r4, r5, r6, pc}
1a0046c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0046cc:	4798      	blx	r3
1a0046ce:	3501      	adds	r5, #1
1a0046d0:	e7ee      	b.n	1a0046b0 <__libc_init_array+0xc>
1a0046d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0046d6:	4798      	blx	r3
1a0046d8:	3501      	adds	r5, #1
1a0046da:	e7f2      	b.n	1a0046c2 <__libc_init_array+0x1e>
1a0046dc:	1a00586c 	.word	0x1a00586c
1a0046e0:	1a00586c 	.word	0x1a00586c
1a0046e4:	1a00586c 	.word	0x1a00586c
1a0046e8:	1a005870 	.word	0x1a005870

1a0046ec <__locale_ctype_ptr>:
1a0046ec:	4b04      	ldr	r3, [pc, #16]	; (1a004700 <__locale_ctype_ptr+0x14>)
1a0046ee:	4a05      	ldr	r2, [pc, #20]	; (1a004704 <__locale_ctype_ptr+0x18>)
1a0046f0:	681b      	ldr	r3, [r3, #0]
1a0046f2:	6a1b      	ldr	r3, [r3, #32]
1a0046f4:	2b00      	cmp	r3, #0
1a0046f6:	bf08      	it	eq
1a0046f8:	4613      	moveq	r3, r2
1a0046fa:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
1a0046fe:	4770      	bx	lr
1a004700:	100000c8 	.word	0x100000c8
1a004704:	1000012c 	.word	0x1000012c

1a004708 <__ascii_mbtowc>:
1a004708:	b082      	sub	sp, #8
1a00470a:	b901      	cbnz	r1, 1a00470e <__ascii_mbtowc+0x6>
1a00470c:	a901      	add	r1, sp, #4
1a00470e:	b142      	cbz	r2, 1a004722 <__ascii_mbtowc+0x1a>
1a004710:	b14b      	cbz	r3, 1a004726 <__ascii_mbtowc+0x1e>
1a004712:	7813      	ldrb	r3, [r2, #0]
1a004714:	600b      	str	r3, [r1, #0]
1a004716:	7812      	ldrb	r2, [r2, #0]
1a004718:	1c10      	adds	r0, r2, #0
1a00471a:	bf18      	it	ne
1a00471c:	2001      	movne	r0, #1
1a00471e:	b002      	add	sp, #8
1a004720:	4770      	bx	lr
1a004722:	4610      	mov	r0, r2
1a004724:	e7fb      	b.n	1a00471e <__ascii_mbtowc+0x16>
1a004726:	f06f 0001 	mvn.w	r0, #1
1a00472a:	e7f8      	b.n	1a00471e <__ascii_mbtowc+0x16>

1a00472c <memcpy>:
1a00472c:	b510      	push	{r4, lr}
1a00472e:	1e43      	subs	r3, r0, #1
1a004730:	440a      	add	r2, r1
1a004732:	4291      	cmp	r1, r2
1a004734:	d100      	bne.n	1a004738 <memcpy+0xc>
1a004736:	bd10      	pop	{r4, pc}
1a004738:	f811 4b01 	ldrb.w	r4, [r1], #1
1a00473c:	f803 4f01 	strb.w	r4, [r3, #1]!
1a004740:	e7f7      	b.n	1a004732 <memcpy+0x6>

1a004742 <memset>:
1a004742:	4402      	add	r2, r0
1a004744:	4603      	mov	r3, r0
1a004746:	4293      	cmp	r3, r2
1a004748:	d100      	bne.n	1a00474c <memset+0xa>
1a00474a:	4770      	bx	lr
1a00474c:	f803 1b01 	strb.w	r1, [r3], #1
1a004750:	e7f9      	b.n	1a004746 <memset+0x4>
1a004752:	Address 0x000000001a004752 is out of bounds.


1a004754 <_free_r>:
1a004754:	b538      	push	{r3, r4, r5, lr}
1a004756:	4605      	mov	r5, r0
1a004758:	2900      	cmp	r1, #0
1a00475a:	d045      	beq.n	1a0047e8 <_free_r+0x94>
1a00475c:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a004760:	1f0c      	subs	r4, r1, #4
1a004762:	2b00      	cmp	r3, #0
1a004764:	bfb8      	it	lt
1a004766:	18e4      	addlt	r4, r4, r3
1a004768:	f000 fa96 	bl	1a004c98 <__malloc_lock>
1a00476c:	4a1f      	ldr	r2, [pc, #124]	; (1a0047ec <_free_r+0x98>)
1a00476e:	6813      	ldr	r3, [r2, #0]
1a004770:	4610      	mov	r0, r2
1a004772:	b933      	cbnz	r3, 1a004782 <_free_r+0x2e>
1a004774:	6063      	str	r3, [r4, #4]
1a004776:	6014      	str	r4, [r2, #0]
1a004778:	4628      	mov	r0, r5
1a00477a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a00477e:	f000 ba8c 	b.w	1a004c9a <__malloc_unlock>
1a004782:	42a3      	cmp	r3, r4
1a004784:	d90c      	bls.n	1a0047a0 <_free_r+0x4c>
1a004786:	6821      	ldr	r1, [r4, #0]
1a004788:	1862      	adds	r2, r4, r1
1a00478a:	4293      	cmp	r3, r2
1a00478c:	bf04      	itt	eq
1a00478e:	681a      	ldreq	r2, [r3, #0]
1a004790:	685b      	ldreq	r3, [r3, #4]
1a004792:	6063      	str	r3, [r4, #4]
1a004794:	bf04      	itt	eq
1a004796:	1852      	addeq	r2, r2, r1
1a004798:	6022      	streq	r2, [r4, #0]
1a00479a:	6004      	str	r4, [r0, #0]
1a00479c:	e7ec      	b.n	1a004778 <_free_r+0x24>
1a00479e:	4613      	mov	r3, r2
1a0047a0:	685a      	ldr	r2, [r3, #4]
1a0047a2:	b10a      	cbz	r2, 1a0047a8 <_free_r+0x54>
1a0047a4:	42a2      	cmp	r2, r4
1a0047a6:	d9fa      	bls.n	1a00479e <_free_r+0x4a>
1a0047a8:	6819      	ldr	r1, [r3, #0]
1a0047aa:	1858      	adds	r0, r3, r1
1a0047ac:	42a0      	cmp	r0, r4
1a0047ae:	d10b      	bne.n	1a0047c8 <_free_r+0x74>
1a0047b0:	6820      	ldr	r0, [r4, #0]
1a0047b2:	4401      	add	r1, r0
1a0047b4:	1858      	adds	r0, r3, r1
1a0047b6:	4282      	cmp	r2, r0
1a0047b8:	6019      	str	r1, [r3, #0]
1a0047ba:	d1dd      	bne.n	1a004778 <_free_r+0x24>
1a0047bc:	6810      	ldr	r0, [r2, #0]
1a0047be:	6852      	ldr	r2, [r2, #4]
1a0047c0:	605a      	str	r2, [r3, #4]
1a0047c2:	4401      	add	r1, r0
1a0047c4:	6019      	str	r1, [r3, #0]
1a0047c6:	e7d7      	b.n	1a004778 <_free_r+0x24>
1a0047c8:	d902      	bls.n	1a0047d0 <_free_r+0x7c>
1a0047ca:	230c      	movs	r3, #12
1a0047cc:	602b      	str	r3, [r5, #0]
1a0047ce:	e7d3      	b.n	1a004778 <_free_r+0x24>
1a0047d0:	6820      	ldr	r0, [r4, #0]
1a0047d2:	1821      	adds	r1, r4, r0
1a0047d4:	428a      	cmp	r2, r1
1a0047d6:	bf04      	itt	eq
1a0047d8:	6811      	ldreq	r1, [r2, #0]
1a0047da:	6852      	ldreq	r2, [r2, #4]
1a0047dc:	6062      	str	r2, [r4, #4]
1a0047de:	bf04      	itt	eq
1a0047e0:	1809      	addeq	r1, r1, r0
1a0047e2:	6021      	streq	r1, [r4, #0]
1a0047e4:	605c      	str	r4, [r3, #4]
1a0047e6:	e7c7      	b.n	1a004778 <_free_r+0x24>
1a0047e8:	bd38      	pop	{r3, r4, r5, pc}
1a0047ea:	bf00      	nop
1a0047ec:	10002d50 	.word	0x10002d50

1a0047f0 <_malloc_r>:
1a0047f0:	b570      	push	{r4, r5, r6, lr}
1a0047f2:	1ccd      	adds	r5, r1, #3
1a0047f4:	f025 0503 	bic.w	r5, r5, #3
1a0047f8:	3508      	adds	r5, #8
1a0047fa:	2d0c      	cmp	r5, #12
1a0047fc:	bf38      	it	cc
1a0047fe:	250c      	movcc	r5, #12
1a004800:	2d00      	cmp	r5, #0
1a004802:	4606      	mov	r6, r0
1a004804:	db01      	blt.n	1a00480a <_malloc_r+0x1a>
1a004806:	42a9      	cmp	r1, r5
1a004808:	d903      	bls.n	1a004812 <_malloc_r+0x22>
1a00480a:	230c      	movs	r3, #12
1a00480c:	6033      	str	r3, [r6, #0]
1a00480e:	2000      	movs	r0, #0
1a004810:	bd70      	pop	{r4, r5, r6, pc}
1a004812:	f000 fa41 	bl	1a004c98 <__malloc_lock>
1a004816:	4a21      	ldr	r2, [pc, #132]	; (1a00489c <_malloc_r+0xac>)
1a004818:	6814      	ldr	r4, [r2, #0]
1a00481a:	4621      	mov	r1, r4
1a00481c:	b991      	cbnz	r1, 1a004844 <_malloc_r+0x54>
1a00481e:	4c20      	ldr	r4, [pc, #128]	; (1a0048a0 <_malloc_r+0xb0>)
1a004820:	6823      	ldr	r3, [r4, #0]
1a004822:	b91b      	cbnz	r3, 1a00482c <_malloc_r+0x3c>
1a004824:	4630      	mov	r0, r6
1a004826:	f7fc fa67 	bl	1a000cf8 <_sbrk_r>
1a00482a:	6020      	str	r0, [r4, #0]
1a00482c:	4629      	mov	r1, r5
1a00482e:	4630      	mov	r0, r6
1a004830:	f7fc fa62 	bl	1a000cf8 <_sbrk_r>
1a004834:	1c43      	adds	r3, r0, #1
1a004836:	d124      	bne.n	1a004882 <_malloc_r+0x92>
1a004838:	230c      	movs	r3, #12
1a00483a:	6033      	str	r3, [r6, #0]
1a00483c:	4630      	mov	r0, r6
1a00483e:	f000 fa2c 	bl	1a004c9a <__malloc_unlock>
1a004842:	e7e4      	b.n	1a00480e <_malloc_r+0x1e>
1a004844:	680b      	ldr	r3, [r1, #0]
1a004846:	1b5b      	subs	r3, r3, r5
1a004848:	d418      	bmi.n	1a00487c <_malloc_r+0x8c>
1a00484a:	2b0b      	cmp	r3, #11
1a00484c:	d90f      	bls.n	1a00486e <_malloc_r+0x7e>
1a00484e:	600b      	str	r3, [r1, #0]
1a004850:	50cd      	str	r5, [r1, r3]
1a004852:	18cc      	adds	r4, r1, r3
1a004854:	4630      	mov	r0, r6
1a004856:	f000 fa20 	bl	1a004c9a <__malloc_unlock>
1a00485a:	f104 000b 	add.w	r0, r4, #11
1a00485e:	1d23      	adds	r3, r4, #4
1a004860:	f020 0007 	bic.w	r0, r0, #7
1a004864:	1ac3      	subs	r3, r0, r3
1a004866:	d0d3      	beq.n	1a004810 <_malloc_r+0x20>
1a004868:	425a      	negs	r2, r3
1a00486a:	50e2      	str	r2, [r4, r3]
1a00486c:	e7d0      	b.n	1a004810 <_malloc_r+0x20>
1a00486e:	428c      	cmp	r4, r1
1a004870:	684b      	ldr	r3, [r1, #4]
1a004872:	bf16      	itet	ne
1a004874:	6063      	strne	r3, [r4, #4]
1a004876:	6013      	streq	r3, [r2, #0]
1a004878:	460c      	movne	r4, r1
1a00487a:	e7eb      	b.n	1a004854 <_malloc_r+0x64>
1a00487c:	460c      	mov	r4, r1
1a00487e:	6849      	ldr	r1, [r1, #4]
1a004880:	e7cc      	b.n	1a00481c <_malloc_r+0x2c>
1a004882:	1cc4      	adds	r4, r0, #3
1a004884:	f024 0403 	bic.w	r4, r4, #3
1a004888:	42a0      	cmp	r0, r4
1a00488a:	d005      	beq.n	1a004898 <_malloc_r+0xa8>
1a00488c:	1a21      	subs	r1, r4, r0
1a00488e:	4630      	mov	r0, r6
1a004890:	f7fc fa32 	bl	1a000cf8 <_sbrk_r>
1a004894:	3001      	adds	r0, #1
1a004896:	d0cf      	beq.n	1a004838 <_malloc_r+0x48>
1a004898:	6025      	str	r5, [r4, #0]
1a00489a:	e7db      	b.n	1a004854 <_malloc_r+0x64>
1a00489c:	10002d50 	.word	0x10002d50
1a0048a0:	10002d54 	.word	0x10002d54

1a0048a4 <iprintf>:
1a0048a4:	b40f      	push	{r0, r1, r2, r3}
1a0048a6:	4b0a      	ldr	r3, [pc, #40]	; (1a0048d0 <iprintf+0x2c>)
1a0048a8:	b513      	push	{r0, r1, r4, lr}
1a0048aa:	681c      	ldr	r4, [r3, #0]
1a0048ac:	b124      	cbz	r4, 1a0048b8 <iprintf+0x14>
1a0048ae:	69a3      	ldr	r3, [r4, #24]
1a0048b0:	b913      	cbnz	r3, 1a0048b8 <iprintf+0x14>
1a0048b2:	4620      	mov	r0, r4
1a0048b4:	f7ff fe58 	bl	1a004568 <__sinit>
1a0048b8:	ab05      	add	r3, sp, #20
1a0048ba:	9a04      	ldr	r2, [sp, #16]
1a0048bc:	68a1      	ldr	r1, [r4, #8]
1a0048be:	9301      	str	r3, [sp, #4]
1a0048c0:	4620      	mov	r0, r4
1a0048c2:	f000 fa15 	bl	1a004cf0 <_vfiprintf_r>
1a0048c6:	b002      	add	sp, #8
1a0048c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a0048cc:	b004      	add	sp, #16
1a0048ce:	4770      	bx	lr
1a0048d0:	100000c8 	.word	0x100000c8

1a0048d4 <_puts_r>:
1a0048d4:	b570      	push	{r4, r5, r6, lr}
1a0048d6:	460e      	mov	r6, r1
1a0048d8:	4605      	mov	r5, r0
1a0048da:	b118      	cbz	r0, 1a0048e4 <_puts_r+0x10>
1a0048dc:	6983      	ldr	r3, [r0, #24]
1a0048de:	b90b      	cbnz	r3, 1a0048e4 <_puts_r+0x10>
1a0048e0:	f7ff fe42 	bl	1a004568 <__sinit>
1a0048e4:	69ab      	ldr	r3, [r5, #24]
1a0048e6:	68ac      	ldr	r4, [r5, #8]
1a0048e8:	b913      	cbnz	r3, 1a0048f0 <_puts_r+0x1c>
1a0048ea:	4628      	mov	r0, r5
1a0048ec:	f7ff fe3c 	bl	1a004568 <__sinit>
1a0048f0:	4b23      	ldr	r3, [pc, #140]	; (1a004980 <_puts_r+0xac>)
1a0048f2:	429c      	cmp	r4, r3
1a0048f4:	d117      	bne.n	1a004926 <_puts_r+0x52>
1a0048f6:	686c      	ldr	r4, [r5, #4]
1a0048f8:	89a3      	ldrh	r3, [r4, #12]
1a0048fa:	071b      	lsls	r3, r3, #28
1a0048fc:	d51d      	bpl.n	1a00493a <_puts_r+0x66>
1a0048fe:	6923      	ldr	r3, [r4, #16]
1a004900:	b1db      	cbz	r3, 1a00493a <_puts_r+0x66>
1a004902:	3e01      	subs	r6, #1
1a004904:	68a3      	ldr	r3, [r4, #8]
1a004906:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a00490a:	3b01      	subs	r3, #1
1a00490c:	60a3      	str	r3, [r4, #8]
1a00490e:	b9e9      	cbnz	r1, 1a00494c <_puts_r+0x78>
1a004910:	2b00      	cmp	r3, #0
1a004912:	da2e      	bge.n	1a004972 <_puts_r+0x9e>
1a004914:	4622      	mov	r2, r4
1a004916:	210a      	movs	r1, #10
1a004918:	4628      	mov	r0, r5
1a00491a:	f000 f88b 	bl	1a004a34 <__swbuf_r>
1a00491e:	3001      	adds	r0, #1
1a004920:	d011      	beq.n	1a004946 <_puts_r+0x72>
1a004922:	200a      	movs	r0, #10
1a004924:	e011      	b.n	1a00494a <_puts_r+0x76>
1a004926:	4b17      	ldr	r3, [pc, #92]	; (1a004984 <_puts_r+0xb0>)
1a004928:	429c      	cmp	r4, r3
1a00492a:	d101      	bne.n	1a004930 <_puts_r+0x5c>
1a00492c:	68ac      	ldr	r4, [r5, #8]
1a00492e:	e7e3      	b.n	1a0048f8 <_puts_r+0x24>
1a004930:	4b15      	ldr	r3, [pc, #84]	; (1a004988 <_puts_r+0xb4>)
1a004932:	429c      	cmp	r4, r3
1a004934:	bf08      	it	eq
1a004936:	68ec      	ldreq	r4, [r5, #12]
1a004938:	e7de      	b.n	1a0048f8 <_puts_r+0x24>
1a00493a:	4621      	mov	r1, r4
1a00493c:	4628      	mov	r0, r5
1a00493e:	f000 f8d9 	bl	1a004af4 <__swsetup_r>
1a004942:	2800      	cmp	r0, #0
1a004944:	d0dd      	beq.n	1a004902 <_puts_r+0x2e>
1a004946:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00494a:	bd70      	pop	{r4, r5, r6, pc}
1a00494c:	2b00      	cmp	r3, #0
1a00494e:	da04      	bge.n	1a00495a <_puts_r+0x86>
1a004950:	69a2      	ldr	r2, [r4, #24]
1a004952:	429a      	cmp	r2, r3
1a004954:	dc06      	bgt.n	1a004964 <_puts_r+0x90>
1a004956:	290a      	cmp	r1, #10
1a004958:	d004      	beq.n	1a004964 <_puts_r+0x90>
1a00495a:	6823      	ldr	r3, [r4, #0]
1a00495c:	1c5a      	adds	r2, r3, #1
1a00495e:	6022      	str	r2, [r4, #0]
1a004960:	7019      	strb	r1, [r3, #0]
1a004962:	e7cf      	b.n	1a004904 <_puts_r+0x30>
1a004964:	4622      	mov	r2, r4
1a004966:	4628      	mov	r0, r5
1a004968:	f000 f864 	bl	1a004a34 <__swbuf_r>
1a00496c:	3001      	adds	r0, #1
1a00496e:	d1c9      	bne.n	1a004904 <_puts_r+0x30>
1a004970:	e7e9      	b.n	1a004946 <_puts_r+0x72>
1a004972:	6823      	ldr	r3, [r4, #0]
1a004974:	200a      	movs	r0, #10
1a004976:	1c5a      	adds	r2, r3, #1
1a004978:	6022      	str	r2, [r4, #0]
1a00497a:	7018      	strb	r0, [r3, #0]
1a00497c:	e7e5      	b.n	1a00494a <_puts_r+0x76>
1a00497e:	bf00      	nop
1a004980:	1a0056e8 	.word	0x1a0056e8
1a004984:	1a005708 	.word	0x1a005708
1a004988:	1a0056c8 	.word	0x1a0056c8

1a00498c <puts>:
1a00498c:	4b02      	ldr	r3, [pc, #8]	; (1a004998 <puts+0xc>)
1a00498e:	4601      	mov	r1, r0
1a004990:	6818      	ldr	r0, [r3, #0]
1a004992:	f7ff bf9f 	b.w	1a0048d4 <_puts_r>
1a004996:	bf00      	nop
1a004998:	100000c8 	.word	0x100000c8

1a00499c <__sread>:
1a00499c:	b510      	push	{r4, lr}
1a00499e:	460c      	mov	r4, r1
1a0049a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0049a4:	f7fc f96c 	bl	1a000c80 <_read_r>
1a0049a8:	2800      	cmp	r0, #0
1a0049aa:	bfab      	itete	ge
1a0049ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a0049ae:	89a3      	ldrhlt	r3, [r4, #12]
1a0049b0:	181b      	addge	r3, r3, r0
1a0049b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a0049b6:	bfac      	ite	ge
1a0049b8:	6563      	strge	r3, [r4, #84]	; 0x54
1a0049ba:	81a3      	strhlt	r3, [r4, #12]
1a0049bc:	bd10      	pop	{r4, pc}

1a0049be <__swrite>:
1a0049be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0049c2:	461f      	mov	r7, r3
1a0049c4:	898b      	ldrh	r3, [r1, #12]
1a0049c6:	05db      	lsls	r3, r3, #23
1a0049c8:	4605      	mov	r5, r0
1a0049ca:	460c      	mov	r4, r1
1a0049cc:	4616      	mov	r6, r2
1a0049ce:	d505      	bpl.n	1a0049dc <__swrite+0x1e>
1a0049d0:	2302      	movs	r3, #2
1a0049d2:	2200      	movs	r2, #0
1a0049d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0049d8:	f7fc f94d 	bl	1a000c76 <_lseek_r>
1a0049dc:	89a3      	ldrh	r3, [r4, #12]
1a0049de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0049e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a0049e6:	81a3      	strh	r3, [r4, #12]
1a0049e8:	4632      	mov	r2, r6
1a0049ea:	463b      	mov	r3, r7
1a0049ec:	4628      	mov	r0, r5
1a0049ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a0049f2:	f7fc b96c 	b.w	1a000cce <_write_r>

1a0049f6 <__sseek>:
1a0049f6:	b510      	push	{r4, lr}
1a0049f8:	460c      	mov	r4, r1
1a0049fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0049fe:	f7fc f93a 	bl	1a000c76 <_lseek_r>
1a004a02:	1c43      	adds	r3, r0, #1
1a004a04:	89a3      	ldrh	r3, [r4, #12]
1a004a06:	bf15      	itete	ne
1a004a08:	6560      	strne	r0, [r4, #84]	; 0x54
1a004a0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a004a0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a004a12:	81a3      	strheq	r3, [r4, #12]
1a004a14:	bf18      	it	ne
1a004a16:	81a3      	strhne	r3, [r4, #12]
1a004a18:	bd10      	pop	{r4, pc}

1a004a1a <__sclose>:
1a004a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004a1e:	f7fc b917 	b.w	1a000c50 <_close_r>

1a004a22 <strlen>:
1a004a22:	4603      	mov	r3, r0
1a004a24:	f813 2b01 	ldrb.w	r2, [r3], #1
1a004a28:	2a00      	cmp	r2, #0
1a004a2a:	d1fb      	bne.n	1a004a24 <strlen+0x2>
1a004a2c:	1a18      	subs	r0, r3, r0
1a004a2e:	3801      	subs	r0, #1
1a004a30:	4770      	bx	lr
1a004a32:	Address 0x000000001a004a32 is out of bounds.


1a004a34 <__swbuf_r>:
1a004a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004a36:	460e      	mov	r6, r1
1a004a38:	4614      	mov	r4, r2
1a004a3a:	4605      	mov	r5, r0
1a004a3c:	b118      	cbz	r0, 1a004a46 <__swbuf_r+0x12>
1a004a3e:	6983      	ldr	r3, [r0, #24]
1a004a40:	b90b      	cbnz	r3, 1a004a46 <__swbuf_r+0x12>
1a004a42:	f7ff fd91 	bl	1a004568 <__sinit>
1a004a46:	4b21      	ldr	r3, [pc, #132]	; (1a004acc <__swbuf_r+0x98>)
1a004a48:	429c      	cmp	r4, r3
1a004a4a:	d12a      	bne.n	1a004aa2 <__swbuf_r+0x6e>
1a004a4c:	686c      	ldr	r4, [r5, #4]
1a004a4e:	69a3      	ldr	r3, [r4, #24]
1a004a50:	60a3      	str	r3, [r4, #8]
1a004a52:	89a3      	ldrh	r3, [r4, #12]
1a004a54:	071a      	lsls	r2, r3, #28
1a004a56:	d52e      	bpl.n	1a004ab6 <__swbuf_r+0x82>
1a004a58:	6923      	ldr	r3, [r4, #16]
1a004a5a:	b363      	cbz	r3, 1a004ab6 <__swbuf_r+0x82>
1a004a5c:	6923      	ldr	r3, [r4, #16]
1a004a5e:	6820      	ldr	r0, [r4, #0]
1a004a60:	1ac0      	subs	r0, r0, r3
1a004a62:	6963      	ldr	r3, [r4, #20]
1a004a64:	b2f6      	uxtb	r6, r6
1a004a66:	4283      	cmp	r3, r0
1a004a68:	4637      	mov	r7, r6
1a004a6a:	dc04      	bgt.n	1a004a76 <__swbuf_r+0x42>
1a004a6c:	4621      	mov	r1, r4
1a004a6e:	4628      	mov	r0, r5
1a004a70:	f7ff fd10 	bl	1a004494 <_fflush_r>
1a004a74:	bb28      	cbnz	r0, 1a004ac2 <__swbuf_r+0x8e>
1a004a76:	68a3      	ldr	r3, [r4, #8]
1a004a78:	3b01      	subs	r3, #1
1a004a7a:	60a3      	str	r3, [r4, #8]
1a004a7c:	6823      	ldr	r3, [r4, #0]
1a004a7e:	1c5a      	adds	r2, r3, #1
1a004a80:	6022      	str	r2, [r4, #0]
1a004a82:	701e      	strb	r6, [r3, #0]
1a004a84:	6963      	ldr	r3, [r4, #20]
1a004a86:	3001      	adds	r0, #1
1a004a88:	4283      	cmp	r3, r0
1a004a8a:	d004      	beq.n	1a004a96 <__swbuf_r+0x62>
1a004a8c:	89a3      	ldrh	r3, [r4, #12]
1a004a8e:	07db      	lsls	r3, r3, #31
1a004a90:	d519      	bpl.n	1a004ac6 <__swbuf_r+0x92>
1a004a92:	2e0a      	cmp	r6, #10
1a004a94:	d117      	bne.n	1a004ac6 <__swbuf_r+0x92>
1a004a96:	4621      	mov	r1, r4
1a004a98:	4628      	mov	r0, r5
1a004a9a:	f7ff fcfb 	bl	1a004494 <_fflush_r>
1a004a9e:	b190      	cbz	r0, 1a004ac6 <__swbuf_r+0x92>
1a004aa0:	e00f      	b.n	1a004ac2 <__swbuf_r+0x8e>
1a004aa2:	4b0b      	ldr	r3, [pc, #44]	; (1a004ad0 <__swbuf_r+0x9c>)
1a004aa4:	429c      	cmp	r4, r3
1a004aa6:	d101      	bne.n	1a004aac <__swbuf_r+0x78>
1a004aa8:	68ac      	ldr	r4, [r5, #8]
1a004aaa:	e7d0      	b.n	1a004a4e <__swbuf_r+0x1a>
1a004aac:	4b09      	ldr	r3, [pc, #36]	; (1a004ad4 <__swbuf_r+0xa0>)
1a004aae:	429c      	cmp	r4, r3
1a004ab0:	bf08      	it	eq
1a004ab2:	68ec      	ldreq	r4, [r5, #12]
1a004ab4:	e7cb      	b.n	1a004a4e <__swbuf_r+0x1a>
1a004ab6:	4621      	mov	r1, r4
1a004ab8:	4628      	mov	r0, r5
1a004aba:	f000 f81b 	bl	1a004af4 <__swsetup_r>
1a004abe:	2800      	cmp	r0, #0
1a004ac0:	d0cc      	beq.n	1a004a5c <__swbuf_r+0x28>
1a004ac2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a004ac6:	4638      	mov	r0, r7
1a004ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004aca:	bf00      	nop
1a004acc:	1a0056e8 	.word	0x1a0056e8
1a004ad0:	1a005708 	.word	0x1a005708
1a004ad4:	1a0056c8 	.word	0x1a0056c8

1a004ad8 <__ascii_wctomb>:
1a004ad8:	b149      	cbz	r1, 1a004aee <__ascii_wctomb+0x16>
1a004ada:	2aff      	cmp	r2, #255	; 0xff
1a004adc:	bf85      	ittet	hi
1a004ade:	238a      	movhi	r3, #138	; 0x8a
1a004ae0:	6003      	strhi	r3, [r0, #0]
1a004ae2:	700a      	strbls	r2, [r1, #0]
1a004ae4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
1a004ae8:	bf98      	it	ls
1a004aea:	2001      	movls	r0, #1
1a004aec:	4770      	bx	lr
1a004aee:	4608      	mov	r0, r1
1a004af0:	4770      	bx	lr
1a004af2:	Address 0x000000001a004af2 is out of bounds.


1a004af4 <__swsetup_r>:
1a004af4:	4b32      	ldr	r3, [pc, #200]	; (1a004bc0 <__swsetup_r+0xcc>)
1a004af6:	b570      	push	{r4, r5, r6, lr}
1a004af8:	681d      	ldr	r5, [r3, #0]
1a004afa:	4606      	mov	r6, r0
1a004afc:	460c      	mov	r4, r1
1a004afe:	b125      	cbz	r5, 1a004b0a <__swsetup_r+0x16>
1a004b00:	69ab      	ldr	r3, [r5, #24]
1a004b02:	b913      	cbnz	r3, 1a004b0a <__swsetup_r+0x16>
1a004b04:	4628      	mov	r0, r5
1a004b06:	f7ff fd2f 	bl	1a004568 <__sinit>
1a004b0a:	4b2e      	ldr	r3, [pc, #184]	; (1a004bc4 <__swsetup_r+0xd0>)
1a004b0c:	429c      	cmp	r4, r3
1a004b0e:	d10f      	bne.n	1a004b30 <__swsetup_r+0x3c>
1a004b10:	686c      	ldr	r4, [r5, #4]
1a004b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004b16:	b29a      	uxth	r2, r3
1a004b18:	0715      	lsls	r5, r2, #28
1a004b1a:	d42c      	bmi.n	1a004b76 <__swsetup_r+0x82>
1a004b1c:	06d0      	lsls	r0, r2, #27
1a004b1e:	d411      	bmi.n	1a004b44 <__swsetup_r+0x50>
1a004b20:	2209      	movs	r2, #9
1a004b22:	6032      	str	r2, [r6, #0]
1a004b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004b28:	81a3      	strh	r3, [r4, #12]
1a004b2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004b2e:	e03e      	b.n	1a004bae <__swsetup_r+0xba>
1a004b30:	4b25      	ldr	r3, [pc, #148]	; (1a004bc8 <__swsetup_r+0xd4>)
1a004b32:	429c      	cmp	r4, r3
1a004b34:	d101      	bne.n	1a004b3a <__swsetup_r+0x46>
1a004b36:	68ac      	ldr	r4, [r5, #8]
1a004b38:	e7eb      	b.n	1a004b12 <__swsetup_r+0x1e>
1a004b3a:	4b24      	ldr	r3, [pc, #144]	; (1a004bcc <__swsetup_r+0xd8>)
1a004b3c:	429c      	cmp	r4, r3
1a004b3e:	bf08      	it	eq
1a004b40:	68ec      	ldreq	r4, [r5, #12]
1a004b42:	e7e6      	b.n	1a004b12 <__swsetup_r+0x1e>
1a004b44:	0751      	lsls	r1, r2, #29
1a004b46:	d512      	bpl.n	1a004b6e <__swsetup_r+0x7a>
1a004b48:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a004b4a:	b141      	cbz	r1, 1a004b5e <__swsetup_r+0x6a>
1a004b4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a004b50:	4299      	cmp	r1, r3
1a004b52:	d002      	beq.n	1a004b5a <__swsetup_r+0x66>
1a004b54:	4630      	mov	r0, r6
1a004b56:	f7ff fdfd 	bl	1a004754 <_free_r>
1a004b5a:	2300      	movs	r3, #0
1a004b5c:	6363      	str	r3, [r4, #52]	; 0x34
1a004b5e:	89a3      	ldrh	r3, [r4, #12]
1a004b60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a004b64:	81a3      	strh	r3, [r4, #12]
1a004b66:	2300      	movs	r3, #0
1a004b68:	6063      	str	r3, [r4, #4]
1a004b6a:	6923      	ldr	r3, [r4, #16]
1a004b6c:	6023      	str	r3, [r4, #0]
1a004b6e:	89a3      	ldrh	r3, [r4, #12]
1a004b70:	f043 0308 	orr.w	r3, r3, #8
1a004b74:	81a3      	strh	r3, [r4, #12]
1a004b76:	6923      	ldr	r3, [r4, #16]
1a004b78:	b94b      	cbnz	r3, 1a004b8e <__swsetup_r+0x9a>
1a004b7a:	89a3      	ldrh	r3, [r4, #12]
1a004b7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a004b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a004b84:	d003      	beq.n	1a004b8e <__swsetup_r+0x9a>
1a004b86:	4621      	mov	r1, r4
1a004b88:	4630      	mov	r0, r6
1a004b8a:	f000 f845 	bl	1a004c18 <__smakebuf_r>
1a004b8e:	89a2      	ldrh	r2, [r4, #12]
1a004b90:	f012 0301 	ands.w	r3, r2, #1
1a004b94:	d00c      	beq.n	1a004bb0 <__swsetup_r+0xbc>
1a004b96:	2300      	movs	r3, #0
1a004b98:	60a3      	str	r3, [r4, #8]
1a004b9a:	6963      	ldr	r3, [r4, #20]
1a004b9c:	425b      	negs	r3, r3
1a004b9e:	61a3      	str	r3, [r4, #24]
1a004ba0:	6923      	ldr	r3, [r4, #16]
1a004ba2:	b953      	cbnz	r3, 1a004bba <__swsetup_r+0xc6>
1a004ba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004ba8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a004bac:	d1ba      	bne.n	1a004b24 <__swsetup_r+0x30>
1a004bae:	bd70      	pop	{r4, r5, r6, pc}
1a004bb0:	0792      	lsls	r2, r2, #30
1a004bb2:	bf58      	it	pl
1a004bb4:	6963      	ldrpl	r3, [r4, #20]
1a004bb6:	60a3      	str	r3, [r4, #8]
1a004bb8:	e7f2      	b.n	1a004ba0 <__swsetup_r+0xac>
1a004bba:	2000      	movs	r0, #0
1a004bbc:	e7f7      	b.n	1a004bae <__swsetup_r+0xba>
1a004bbe:	bf00      	nop
1a004bc0:	100000c8 	.word	0x100000c8
1a004bc4:	1a0056e8 	.word	0x1a0056e8
1a004bc8:	1a005708 	.word	0x1a005708
1a004bcc:	1a0056c8 	.word	0x1a0056c8

1a004bd0 <__swhatbuf_r>:
1a004bd0:	b570      	push	{r4, r5, r6, lr}
1a004bd2:	460e      	mov	r6, r1
1a004bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004bd8:	2900      	cmp	r1, #0
1a004bda:	b096      	sub	sp, #88	; 0x58
1a004bdc:	4614      	mov	r4, r2
1a004bde:	461d      	mov	r5, r3
1a004be0:	da07      	bge.n	1a004bf2 <__swhatbuf_r+0x22>
1a004be2:	2300      	movs	r3, #0
1a004be4:	602b      	str	r3, [r5, #0]
1a004be6:	89b3      	ldrh	r3, [r6, #12]
1a004be8:	061a      	lsls	r2, r3, #24
1a004bea:	d410      	bmi.n	1a004c0e <__swhatbuf_r+0x3e>
1a004bec:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a004bf0:	e00e      	b.n	1a004c10 <__swhatbuf_r+0x40>
1a004bf2:	466a      	mov	r2, sp
1a004bf4:	f7fc f831 	bl	1a000c5a <_fstat_r>
1a004bf8:	2800      	cmp	r0, #0
1a004bfa:	dbf2      	blt.n	1a004be2 <__swhatbuf_r+0x12>
1a004bfc:	9a01      	ldr	r2, [sp, #4]
1a004bfe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a004c02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a004c06:	425a      	negs	r2, r3
1a004c08:	415a      	adcs	r2, r3
1a004c0a:	602a      	str	r2, [r5, #0]
1a004c0c:	e7ee      	b.n	1a004bec <__swhatbuf_r+0x1c>
1a004c0e:	2340      	movs	r3, #64	; 0x40
1a004c10:	2000      	movs	r0, #0
1a004c12:	6023      	str	r3, [r4, #0]
1a004c14:	b016      	add	sp, #88	; 0x58
1a004c16:	bd70      	pop	{r4, r5, r6, pc}

1a004c18 <__smakebuf_r>:
1a004c18:	898b      	ldrh	r3, [r1, #12]
1a004c1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a004c1c:	079d      	lsls	r5, r3, #30
1a004c1e:	4606      	mov	r6, r0
1a004c20:	460c      	mov	r4, r1
1a004c22:	d507      	bpl.n	1a004c34 <__smakebuf_r+0x1c>
1a004c24:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a004c28:	6023      	str	r3, [r4, #0]
1a004c2a:	6123      	str	r3, [r4, #16]
1a004c2c:	2301      	movs	r3, #1
1a004c2e:	6163      	str	r3, [r4, #20]
1a004c30:	b002      	add	sp, #8
1a004c32:	bd70      	pop	{r4, r5, r6, pc}
1a004c34:	ab01      	add	r3, sp, #4
1a004c36:	466a      	mov	r2, sp
1a004c38:	f7ff ffca 	bl	1a004bd0 <__swhatbuf_r>
1a004c3c:	9900      	ldr	r1, [sp, #0]
1a004c3e:	4605      	mov	r5, r0
1a004c40:	4630      	mov	r0, r6
1a004c42:	f7ff fdd5 	bl	1a0047f0 <_malloc_r>
1a004c46:	b948      	cbnz	r0, 1a004c5c <__smakebuf_r+0x44>
1a004c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004c4c:	059a      	lsls	r2, r3, #22
1a004c4e:	d4ef      	bmi.n	1a004c30 <__smakebuf_r+0x18>
1a004c50:	f023 0303 	bic.w	r3, r3, #3
1a004c54:	f043 0302 	orr.w	r3, r3, #2
1a004c58:	81a3      	strh	r3, [r4, #12]
1a004c5a:	e7e3      	b.n	1a004c24 <__smakebuf_r+0xc>
1a004c5c:	4b0d      	ldr	r3, [pc, #52]	; (1a004c94 <__smakebuf_r+0x7c>)
1a004c5e:	62b3      	str	r3, [r6, #40]	; 0x28
1a004c60:	89a3      	ldrh	r3, [r4, #12]
1a004c62:	6020      	str	r0, [r4, #0]
1a004c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a004c68:	81a3      	strh	r3, [r4, #12]
1a004c6a:	9b00      	ldr	r3, [sp, #0]
1a004c6c:	6163      	str	r3, [r4, #20]
1a004c6e:	9b01      	ldr	r3, [sp, #4]
1a004c70:	6120      	str	r0, [r4, #16]
1a004c72:	b15b      	cbz	r3, 1a004c8c <__smakebuf_r+0x74>
1a004c74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a004c78:	4630      	mov	r0, r6
1a004c7a:	f7fb fff3 	bl	1a000c64 <_isatty_r>
1a004c7e:	b128      	cbz	r0, 1a004c8c <__smakebuf_r+0x74>
1a004c80:	89a3      	ldrh	r3, [r4, #12]
1a004c82:	f023 0303 	bic.w	r3, r3, #3
1a004c86:	f043 0301 	orr.w	r3, r3, #1
1a004c8a:	81a3      	strh	r3, [r4, #12]
1a004c8c:	89a3      	ldrh	r3, [r4, #12]
1a004c8e:	431d      	orrs	r5, r3
1a004c90:	81a5      	strh	r5, [r4, #12]
1a004c92:	e7cd      	b.n	1a004c30 <__smakebuf_r+0x18>
1a004c94:	1a004531 	.word	0x1a004531

1a004c98 <__malloc_lock>:
1a004c98:	4770      	bx	lr

1a004c9a <__malloc_unlock>:
1a004c9a:	4770      	bx	lr

1a004c9c <__sfputc_r>:
1a004c9c:	6893      	ldr	r3, [r2, #8]
1a004c9e:	3b01      	subs	r3, #1
1a004ca0:	2b00      	cmp	r3, #0
1a004ca2:	b410      	push	{r4}
1a004ca4:	6093      	str	r3, [r2, #8]
1a004ca6:	da08      	bge.n	1a004cba <__sfputc_r+0x1e>
1a004ca8:	6994      	ldr	r4, [r2, #24]
1a004caa:	42a3      	cmp	r3, r4
1a004cac:	db01      	blt.n	1a004cb2 <__sfputc_r+0x16>
1a004cae:	290a      	cmp	r1, #10
1a004cb0:	d103      	bne.n	1a004cba <__sfputc_r+0x1e>
1a004cb2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a004cb6:	f7ff bebd 	b.w	1a004a34 <__swbuf_r>
1a004cba:	6813      	ldr	r3, [r2, #0]
1a004cbc:	1c58      	adds	r0, r3, #1
1a004cbe:	6010      	str	r0, [r2, #0]
1a004cc0:	7019      	strb	r1, [r3, #0]
1a004cc2:	4608      	mov	r0, r1
1a004cc4:	f85d 4b04 	ldr.w	r4, [sp], #4
1a004cc8:	4770      	bx	lr

1a004cca <__sfputs_r>:
1a004cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004ccc:	4606      	mov	r6, r0
1a004cce:	460f      	mov	r7, r1
1a004cd0:	4614      	mov	r4, r2
1a004cd2:	18d5      	adds	r5, r2, r3
1a004cd4:	42ac      	cmp	r4, r5
1a004cd6:	d101      	bne.n	1a004cdc <__sfputs_r+0x12>
1a004cd8:	2000      	movs	r0, #0
1a004cda:	e007      	b.n	1a004cec <__sfputs_r+0x22>
1a004cdc:	463a      	mov	r2, r7
1a004cde:	f814 1b01 	ldrb.w	r1, [r4], #1
1a004ce2:	4630      	mov	r0, r6
1a004ce4:	f7ff ffda 	bl	1a004c9c <__sfputc_r>
1a004ce8:	1c43      	adds	r3, r0, #1
1a004cea:	d1f3      	bne.n	1a004cd4 <__sfputs_r+0xa>
1a004cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004cee:	Address 0x000000001a004cee is out of bounds.


1a004cf0 <_vfiprintf_r>:
1a004cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004cf4:	460c      	mov	r4, r1
1a004cf6:	b09d      	sub	sp, #116	; 0x74
1a004cf8:	4617      	mov	r7, r2
1a004cfa:	461d      	mov	r5, r3
1a004cfc:	4606      	mov	r6, r0
1a004cfe:	b118      	cbz	r0, 1a004d08 <_vfiprintf_r+0x18>
1a004d00:	6983      	ldr	r3, [r0, #24]
1a004d02:	b90b      	cbnz	r3, 1a004d08 <_vfiprintf_r+0x18>
1a004d04:	f7ff fc30 	bl	1a004568 <__sinit>
1a004d08:	4b7c      	ldr	r3, [pc, #496]	; (1a004efc <_vfiprintf_r+0x20c>)
1a004d0a:	429c      	cmp	r4, r3
1a004d0c:	d158      	bne.n	1a004dc0 <_vfiprintf_r+0xd0>
1a004d0e:	6874      	ldr	r4, [r6, #4]
1a004d10:	89a3      	ldrh	r3, [r4, #12]
1a004d12:	0718      	lsls	r0, r3, #28
1a004d14:	d55e      	bpl.n	1a004dd4 <_vfiprintf_r+0xe4>
1a004d16:	6923      	ldr	r3, [r4, #16]
1a004d18:	2b00      	cmp	r3, #0
1a004d1a:	d05b      	beq.n	1a004dd4 <_vfiprintf_r+0xe4>
1a004d1c:	2300      	movs	r3, #0
1a004d1e:	9309      	str	r3, [sp, #36]	; 0x24
1a004d20:	2320      	movs	r3, #32
1a004d22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a004d26:	2330      	movs	r3, #48	; 0x30
1a004d28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a004d2c:	9503      	str	r5, [sp, #12]
1a004d2e:	f04f 0b01 	mov.w	fp, #1
1a004d32:	46b8      	mov	r8, r7
1a004d34:	4645      	mov	r5, r8
1a004d36:	f815 3b01 	ldrb.w	r3, [r5], #1
1a004d3a:	b10b      	cbz	r3, 1a004d40 <_vfiprintf_r+0x50>
1a004d3c:	2b25      	cmp	r3, #37	; 0x25
1a004d3e:	d154      	bne.n	1a004dea <_vfiprintf_r+0xfa>
1a004d40:	ebb8 0a07 	subs.w	sl, r8, r7
1a004d44:	d00b      	beq.n	1a004d5e <_vfiprintf_r+0x6e>
1a004d46:	4653      	mov	r3, sl
1a004d48:	463a      	mov	r2, r7
1a004d4a:	4621      	mov	r1, r4
1a004d4c:	4630      	mov	r0, r6
1a004d4e:	f7ff ffbc 	bl	1a004cca <__sfputs_r>
1a004d52:	3001      	adds	r0, #1
1a004d54:	f000 80c2 	beq.w	1a004edc <_vfiprintf_r+0x1ec>
1a004d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004d5a:	4453      	add	r3, sl
1a004d5c:	9309      	str	r3, [sp, #36]	; 0x24
1a004d5e:	f898 3000 	ldrb.w	r3, [r8]
1a004d62:	2b00      	cmp	r3, #0
1a004d64:	f000 80ba 	beq.w	1a004edc <_vfiprintf_r+0x1ec>
1a004d68:	2300      	movs	r3, #0
1a004d6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a004d6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a004d72:	9304      	str	r3, [sp, #16]
1a004d74:	9307      	str	r3, [sp, #28]
1a004d76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a004d7a:	931a      	str	r3, [sp, #104]	; 0x68
1a004d7c:	46a8      	mov	r8, r5
1a004d7e:	2205      	movs	r2, #5
1a004d80:	f818 1b01 	ldrb.w	r1, [r8], #1
1a004d84:	485e      	ldr	r0, [pc, #376]	; (1a004f00 <_vfiprintf_r+0x210>)
1a004d86:	f000 fa53 	bl	1a005230 <memchr>
1a004d8a:	9b04      	ldr	r3, [sp, #16]
1a004d8c:	bb78      	cbnz	r0, 1a004dee <_vfiprintf_r+0xfe>
1a004d8e:	06d9      	lsls	r1, r3, #27
1a004d90:	bf44      	itt	mi
1a004d92:	2220      	movmi	r2, #32
1a004d94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a004d98:	071a      	lsls	r2, r3, #28
1a004d9a:	bf44      	itt	mi
1a004d9c:	222b      	movmi	r2, #43	; 0x2b
1a004d9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a004da2:	782a      	ldrb	r2, [r5, #0]
1a004da4:	2a2a      	cmp	r2, #42	; 0x2a
1a004da6:	d02a      	beq.n	1a004dfe <_vfiprintf_r+0x10e>
1a004da8:	9a07      	ldr	r2, [sp, #28]
1a004daa:	46a8      	mov	r8, r5
1a004dac:	2000      	movs	r0, #0
1a004dae:	250a      	movs	r5, #10
1a004db0:	4641      	mov	r1, r8
1a004db2:	f811 3b01 	ldrb.w	r3, [r1], #1
1a004db6:	3b30      	subs	r3, #48	; 0x30
1a004db8:	2b09      	cmp	r3, #9
1a004dba:	d969      	bls.n	1a004e90 <_vfiprintf_r+0x1a0>
1a004dbc:	b360      	cbz	r0, 1a004e18 <_vfiprintf_r+0x128>
1a004dbe:	e024      	b.n	1a004e0a <_vfiprintf_r+0x11a>
1a004dc0:	4b50      	ldr	r3, [pc, #320]	; (1a004f04 <_vfiprintf_r+0x214>)
1a004dc2:	429c      	cmp	r4, r3
1a004dc4:	d101      	bne.n	1a004dca <_vfiprintf_r+0xda>
1a004dc6:	68b4      	ldr	r4, [r6, #8]
1a004dc8:	e7a2      	b.n	1a004d10 <_vfiprintf_r+0x20>
1a004dca:	4b4f      	ldr	r3, [pc, #316]	; (1a004f08 <_vfiprintf_r+0x218>)
1a004dcc:	429c      	cmp	r4, r3
1a004dce:	bf08      	it	eq
1a004dd0:	68f4      	ldreq	r4, [r6, #12]
1a004dd2:	e79d      	b.n	1a004d10 <_vfiprintf_r+0x20>
1a004dd4:	4621      	mov	r1, r4
1a004dd6:	4630      	mov	r0, r6
1a004dd8:	f7ff fe8c 	bl	1a004af4 <__swsetup_r>
1a004ddc:	2800      	cmp	r0, #0
1a004dde:	d09d      	beq.n	1a004d1c <_vfiprintf_r+0x2c>
1a004de0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004de4:	b01d      	add	sp, #116	; 0x74
1a004de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004dea:	46a8      	mov	r8, r5
1a004dec:	e7a2      	b.n	1a004d34 <_vfiprintf_r+0x44>
1a004dee:	4a44      	ldr	r2, [pc, #272]	; (1a004f00 <_vfiprintf_r+0x210>)
1a004df0:	1a80      	subs	r0, r0, r2
1a004df2:	fa0b f000 	lsl.w	r0, fp, r0
1a004df6:	4318      	orrs	r0, r3
1a004df8:	9004      	str	r0, [sp, #16]
1a004dfa:	4645      	mov	r5, r8
1a004dfc:	e7be      	b.n	1a004d7c <_vfiprintf_r+0x8c>
1a004dfe:	9a03      	ldr	r2, [sp, #12]
1a004e00:	1d11      	adds	r1, r2, #4
1a004e02:	6812      	ldr	r2, [r2, #0]
1a004e04:	9103      	str	r1, [sp, #12]
1a004e06:	2a00      	cmp	r2, #0
1a004e08:	db01      	blt.n	1a004e0e <_vfiprintf_r+0x11e>
1a004e0a:	9207      	str	r2, [sp, #28]
1a004e0c:	e004      	b.n	1a004e18 <_vfiprintf_r+0x128>
1a004e0e:	4252      	negs	r2, r2
1a004e10:	f043 0302 	orr.w	r3, r3, #2
1a004e14:	9207      	str	r2, [sp, #28]
1a004e16:	9304      	str	r3, [sp, #16]
1a004e18:	f898 3000 	ldrb.w	r3, [r8]
1a004e1c:	2b2e      	cmp	r3, #46	; 0x2e
1a004e1e:	d10e      	bne.n	1a004e3e <_vfiprintf_r+0x14e>
1a004e20:	f898 3001 	ldrb.w	r3, [r8, #1]
1a004e24:	2b2a      	cmp	r3, #42	; 0x2a
1a004e26:	d138      	bne.n	1a004e9a <_vfiprintf_r+0x1aa>
1a004e28:	9b03      	ldr	r3, [sp, #12]
1a004e2a:	1d1a      	adds	r2, r3, #4
1a004e2c:	681b      	ldr	r3, [r3, #0]
1a004e2e:	9203      	str	r2, [sp, #12]
1a004e30:	2b00      	cmp	r3, #0
1a004e32:	bfb8      	it	lt
1a004e34:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a004e38:	f108 0802 	add.w	r8, r8, #2
1a004e3c:	9305      	str	r3, [sp, #20]
1a004e3e:	4d33      	ldr	r5, [pc, #204]	; (1a004f0c <_vfiprintf_r+0x21c>)
1a004e40:	f898 1000 	ldrb.w	r1, [r8]
1a004e44:	2203      	movs	r2, #3
1a004e46:	4628      	mov	r0, r5
1a004e48:	f000 f9f2 	bl	1a005230 <memchr>
1a004e4c:	b140      	cbz	r0, 1a004e60 <_vfiprintf_r+0x170>
1a004e4e:	2340      	movs	r3, #64	; 0x40
1a004e50:	1b40      	subs	r0, r0, r5
1a004e52:	fa03 f000 	lsl.w	r0, r3, r0
1a004e56:	9b04      	ldr	r3, [sp, #16]
1a004e58:	4303      	orrs	r3, r0
1a004e5a:	f108 0801 	add.w	r8, r8, #1
1a004e5e:	9304      	str	r3, [sp, #16]
1a004e60:	f898 1000 	ldrb.w	r1, [r8]
1a004e64:	482a      	ldr	r0, [pc, #168]	; (1a004f10 <_vfiprintf_r+0x220>)
1a004e66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a004e6a:	2206      	movs	r2, #6
1a004e6c:	f108 0701 	add.w	r7, r8, #1
1a004e70:	f000 f9de 	bl	1a005230 <memchr>
1a004e74:	2800      	cmp	r0, #0
1a004e76:	d037      	beq.n	1a004ee8 <_vfiprintf_r+0x1f8>
1a004e78:	4b26      	ldr	r3, [pc, #152]	; (1a004f14 <_vfiprintf_r+0x224>)
1a004e7a:	bb1b      	cbnz	r3, 1a004ec4 <_vfiprintf_r+0x1d4>
1a004e7c:	9b03      	ldr	r3, [sp, #12]
1a004e7e:	3307      	adds	r3, #7
1a004e80:	f023 0307 	bic.w	r3, r3, #7
1a004e84:	3308      	adds	r3, #8
1a004e86:	9303      	str	r3, [sp, #12]
1a004e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004e8a:	444b      	add	r3, r9
1a004e8c:	9309      	str	r3, [sp, #36]	; 0x24
1a004e8e:	e750      	b.n	1a004d32 <_vfiprintf_r+0x42>
1a004e90:	fb05 3202 	mla	r2, r5, r2, r3
1a004e94:	2001      	movs	r0, #1
1a004e96:	4688      	mov	r8, r1
1a004e98:	e78a      	b.n	1a004db0 <_vfiprintf_r+0xc0>
1a004e9a:	2300      	movs	r3, #0
1a004e9c:	f108 0801 	add.w	r8, r8, #1
1a004ea0:	9305      	str	r3, [sp, #20]
1a004ea2:	4619      	mov	r1, r3
1a004ea4:	250a      	movs	r5, #10
1a004ea6:	4640      	mov	r0, r8
1a004ea8:	f810 2b01 	ldrb.w	r2, [r0], #1
1a004eac:	3a30      	subs	r2, #48	; 0x30
1a004eae:	2a09      	cmp	r2, #9
1a004eb0:	d903      	bls.n	1a004eba <_vfiprintf_r+0x1ca>
1a004eb2:	2b00      	cmp	r3, #0
1a004eb4:	d0c3      	beq.n	1a004e3e <_vfiprintf_r+0x14e>
1a004eb6:	9105      	str	r1, [sp, #20]
1a004eb8:	e7c1      	b.n	1a004e3e <_vfiprintf_r+0x14e>
1a004eba:	fb05 2101 	mla	r1, r5, r1, r2
1a004ebe:	2301      	movs	r3, #1
1a004ec0:	4680      	mov	r8, r0
1a004ec2:	e7f0      	b.n	1a004ea6 <_vfiprintf_r+0x1b6>
1a004ec4:	ab03      	add	r3, sp, #12
1a004ec6:	9300      	str	r3, [sp, #0]
1a004ec8:	4622      	mov	r2, r4
1a004eca:	4b13      	ldr	r3, [pc, #76]	; (1a004f18 <_vfiprintf_r+0x228>)
1a004ecc:	a904      	add	r1, sp, #16
1a004ece:	4630      	mov	r0, r6
1a004ed0:	f3af 8000 	nop.w
1a004ed4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a004ed8:	4681      	mov	r9, r0
1a004eda:	d1d5      	bne.n	1a004e88 <_vfiprintf_r+0x198>
1a004edc:	89a3      	ldrh	r3, [r4, #12]
1a004ede:	065b      	lsls	r3, r3, #25
1a004ee0:	f53f af7e 	bmi.w	1a004de0 <_vfiprintf_r+0xf0>
1a004ee4:	9809      	ldr	r0, [sp, #36]	; 0x24
1a004ee6:	e77d      	b.n	1a004de4 <_vfiprintf_r+0xf4>
1a004ee8:	ab03      	add	r3, sp, #12
1a004eea:	9300      	str	r3, [sp, #0]
1a004eec:	4622      	mov	r2, r4
1a004eee:	4b0a      	ldr	r3, [pc, #40]	; (1a004f18 <_vfiprintf_r+0x228>)
1a004ef0:	a904      	add	r1, sp, #16
1a004ef2:	4630      	mov	r0, r6
1a004ef4:	f000 f888 	bl	1a005008 <_printf_i>
1a004ef8:	e7ec      	b.n	1a004ed4 <_vfiprintf_r+0x1e4>
1a004efa:	bf00      	nop
1a004efc:	1a0056e8 	.word	0x1a0056e8
1a004f00:	1a005837 	.word	0x1a005837
1a004f04:	1a005708 	.word	0x1a005708
1a004f08:	1a0056c8 	.word	0x1a0056c8
1a004f0c:	1a00583d 	.word	0x1a00583d
1a004f10:	1a005841 	.word	0x1a005841
1a004f14:	00000000 	.word	0x00000000
1a004f18:	1a004ccb 	.word	0x1a004ccb

1a004f1c <_printf_common>:
1a004f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a004f20:	4691      	mov	r9, r2
1a004f22:	461f      	mov	r7, r3
1a004f24:	688a      	ldr	r2, [r1, #8]
1a004f26:	690b      	ldr	r3, [r1, #16]
1a004f28:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a004f2c:	4293      	cmp	r3, r2
1a004f2e:	bfb8      	it	lt
1a004f30:	4613      	movlt	r3, r2
1a004f32:	f8c9 3000 	str.w	r3, [r9]
1a004f36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a004f3a:	4606      	mov	r6, r0
1a004f3c:	460c      	mov	r4, r1
1a004f3e:	b112      	cbz	r2, 1a004f46 <_printf_common+0x2a>
1a004f40:	3301      	adds	r3, #1
1a004f42:	f8c9 3000 	str.w	r3, [r9]
1a004f46:	6823      	ldr	r3, [r4, #0]
1a004f48:	0699      	lsls	r1, r3, #26
1a004f4a:	bf42      	ittt	mi
1a004f4c:	f8d9 3000 	ldrmi.w	r3, [r9]
1a004f50:	3302      	addmi	r3, #2
1a004f52:	f8c9 3000 	strmi.w	r3, [r9]
1a004f56:	6825      	ldr	r5, [r4, #0]
1a004f58:	f015 0506 	ands.w	r5, r5, #6
1a004f5c:	d107      	bne.n	1a004f6e <_printf_common+0x52>
1a004f5e:	f104 0a19 	add.w	sl, r4, #25
1a004f62:	68e3      	ldr	r3, [r4, #12]
1a004f64:	f8d9 2000 	ldr.w	r2, [r9]
1a004f68:	1a9b      	subs	r3, r3, r2
1a004f6a:	42ab      	cmp	r3, r5
1a004f6c:	dc28      	bgt.n	1a004fc0 <_printf_common+0xa4>
1a004f6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a004f72:	6822      	ldr	r2, [r4, #0]
1a004f74:	3300      	adds	r3, #0
1a004f76:	bf18      	it	ne
1a004f78:	2301      	movne	r3, #1
1a004f7a:	0692      	lsls	r2, r2, #26
1a004f7c:	d42d      	bmi.n	1a004fda <_printf_common+0xbe>
1a004f7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a004f82:	4639      	mov	r1, r7
1a004f84:	4630      	mov	r0, r6
1a004f86:	47c0      	blx	r8
1a004f88:	3001      	adds	r0, #1
1a004f8a:	d020      	beq.n	1a004fce <_printf_common+0xb2>
1a004f8c:	6823      	ldr	r3, [r4, #0]
1a004f8e:	68e5      	ldr	r5, [r4, #12]
1a004f90:	f8d9 2000 	ldr.w	r2, [r9]
1a004f94:	f003 0306 	and.w	r3, r3, #6
1a004f98:	2b04      	cmp	r3, #4
1a004f9a:	bf08      	it	eq
1a004f9c:	1aad      	subeq	r5, r5, r2
1a004f9e:	68a3      	ldr	r3, [r4, #8]
1a004fa0:	6922      	ldr	r2, [r4, #16]
1a004fa2:	bf0c      	ite	eq
1a004fa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a004fa8:	2500      	movne	r5, #0
1a004faa:	4293      	cmp	r3, r2
1a004fac:	bfc4      	itt	gt
1a004fae:	1a9b      	subgt	r3, r3, r2
1a004fb0:	18ed      	addgt	r5, r5, r3
1a004fb2:	f04f 0900 	mov.w	r9, #0
1a004fb6:	341a      	adds	r4, #26
1a004fb8:	454d      	cmp	r5, r9
1a004fba:	d11a      	bne.n	1a004ff2 <_printf_common+0xd6>
1a004fbc:	2000      	movs	r0, #0
1a004fbe:	e008      	b.n	1a004fd2 <_printf_common+0xb6>
1a004fc0:	2301      	movs	r3, #1
1a004fc2:	4652      	mov	r2, sl
1a004fc4:	4639      	mov	r1, r7
1a004fc6:	4630      	mov	r0, r6
1a004fc8:	47c0      	blx	r8
1a004fca:	3001      	adds	r0, #1
1a004fcc:	d103      	bne.n	1a004fd6 <_printf_common+0xba>
1a004fce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004fd6:	3501      	adds	r5, #1
1a004fd8:	e7c3      	b.n	1a004f62 <_printf_common+0x46>
1a004fda:	18e1      	adds	r1, r4, r3
1a004fdc:	1c5a      	adds	r2, r3, #1
1a004fde:	2030      	movs	r0, #48	; 0x30
1a004fe0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a004fe4:	4422      	add	r2, r4
1a004fe6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a004fea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a004fee:	3302      	adds	r3, #2
1a004ff0:	e7c5      	b.n	1a004f7e <_printf_common+0x62>
1a004ff2:	2301      	movs	r3, #1
1a004ff4:	4622      	mov	r2, r4
1a004ff6:	4639      	mov	r1, r7
1a004ff8:	4630      	mov	r0, r6
1a004ffa:	47c0      	blx	r8
1a004ffc:	3001      	adds	r0, #1
1a004ffe:	d0e6      	beq.n	1a004fce <_printf_common+0xb2>
1a005000:	f109 0901 	add.w	r9, r9, #1
1a005004:	e7d8      	b.n	1a004fb8 <_printf_common+0x9c>
1a005006:	Address 0x000000001a005006 is out of bounds.


1a005008 <_printf_i>:
1a005008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00500c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
1a005010:	460c      	mov	r4, r1
1a005012:	7e09      	ldrb	r1, [r1, #24]
1a005014:	b085      	sub	sp, #20
1a005016:	296e      	cmp	r1, #110	; 0x6e
1a005018:	4617      	mov	r7, r2
1a00501a:	4606      	mov	r6, r0
1a00501c:	4698      	mov	r8, r3
1a00501e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a005020:	f000 80b3 	beq.w	1a00518a <_printf_i+0x182>
1a005024:	d822      	bhi.n	1a00506c <_printf_i+0x64>
1a005026:	2963      	cmp	r1, #99	; 0x63
1a005028:	d036      	beq.n	1a005098 <_printf_i+0x90>
1a00502a:	d80a      	bhi.n	1a005042 <_printf_i+0x3a>
1a00502c:	2900      	cmp	r1, #0
1a00502e:	f000 80b9 	beq.w	1a0051a4 <_printf_i+0x19c>
1a005032:	2958      	cmp	r1, #88	; 0x58
1a005034:	f000 8083 	beq.w	1a00513e <_printf_i+0x136>
1a005038:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a00503c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a005040:	e032      	b.n	1a0050a8 <_printf_i+0xa0>
1a005042:	2964      	cmp	r1, #100	; 0x64
1a005044:	d001      	beq.n	1a00504a <_printf_i+0x42>
1a005046:	2969      	cmp	r1, #105	; 0x69
1a005048:	d1f6      	bne.n	1a005038 <_printf_i+0x30>
1a00504a:	6820      	ldr	r0, [r4, #0]
1a00504c:	6813      	ldr	r3, [r2, #0]
1a00504e:	0605      	lsls	r5, r0, #24
1a005050:	f103 0104 	add.w	r1, r3, #4
1a005054:	d52a      	bpl.n	1a0050ac <_printf_i+0xa4>
1a005056:	681b      	ldr	r3, [r3, #0]
1a005058:	6011      	str	r1, [r2, #0]
1a00505a:	2b00      	cmp	r3, #0
1a00505c:	da03      	bge.n	1a005066 <_printf_i+0x5e>
1a00505e:	222d      	movs	r2, #45	; 0x2d
1a005060:	425b      	negs	r3, r3
1a005062:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
1a005066:	486f      	ldr	r0, [pc, #444]	; (1a005224 <_printf_i+0x21c>)
1a005068:	220a      	movs	r2, #10
1a00506a:	e039      	b.n	1a0050e0 <_printf_i+0xd8>
1a00506c:	2973      	cmp	r1, #115	; 0x73
1a00506e:	f000 809d 	beq.w	1a0051ac <_printf_i+0x1a4>
1a005072:	d808      	bhi.n	1a005086 <_printf_i+0x7e>
1a005074:	296f      	cmp	r1, #111	; 0x6f
1a005076:	d020      	beq.n	1a0050ba <_printf_i+0xb2>
1a005078:	2970      	cmp	r1, #112	; 0x70
1a00507a:	d1dd      	bne.n	1a005038 <_printf_i+0x30>
1a00507c:	6823      	ldr	r3, [r4, #0]
1a00507e:	f043 0320 	orr.w	r3, r3, #32
1a005082:	6023      	str	r3, [r4, #0]
1a005084:	e003      	b.n	1a00508e <_printf_i+0x86>
1a005086:	2975      	cmp	r1, #117	; 0x75
1a005088:	d017      	beq.n	1a0050ba <_printf_i+0xb2>
1a00508a:	2978      	cmp	r1, #120	; 0x78
1a00508c:	d1d4      	bne.n	1a005038 <_printf_i+0x30>
1a00508e:	2378      	movs	r3, #120	; 0x78
1a005090:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a005094:	4864      	ldr	r0, [pc, #400]	; (1a005228 <_printf_i+0x220>)
1a005096:	e055      	b.n	1a005144 <_printf_i+0x13c>
1a005098:	6813      	ldr	r3, [r2, #0]
1a00509a:	1d19      	adds	r1, r3, #4
1a00509c:	681b      	ldr	r3, [r3, #0]
1a00509e:	6011      	str	r1, [r2, #0]
1a0050a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a0050a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a0050a8:	2301      	movs	r3, #1
1a0050aa:	e08c      	b.n	1a0051c6 <_printf_i+0x1be>
1a0050ac:	681b      	ldr	r3, [r3, #0]
1a0050ae:	6011      	str	r1, [r2, #0]
1a0050b0:	f010 0f40 	tst.w	r0, #64	; 0x40
1a0050b4:	bf18      	it	ne
1a0050b6:	b21b      	sxthne	r3, r3
1a0050b8:	e7cf      	b.n	1a00505a <_printf_i+0x52>
1a0050ba:	6813      	ldr	r3, [r2, #0]
1a0050bc:	6825      	ldr	r5, [r4, #0]
1a0050be:	1d18      	adds	r0, r3, #4
1a0050c0:	6010      	str	r0, [r2, #0]
1a0050c2:	0628      	lsls	r0, r5, #24
1a0050c4:	d501      	bpl.n	1a0050ca <_printf_i+0xc2>
1a0050c6:	681b      	ldr	r3, [r3, #0]
1a0050c8:	e002      	b.n	1a0050d0 <_printf_i+0xc8>
1a0050ca:	0668      	lsls	r0, r5, #25
1a0050cc:	d5fb      	bpl.n	1a0050c6 <_printf_i+0xbe>
1a0050ce:	881b      	ldrh	r3, [r3, #0]
1a0050d0:	4854      	ldr	r0, [pc, #336]	; (1a005224 <_printf_i+0x21c>)
1a0050d2:	296f      	cmp	r1, #111	; 0x6f
1a0050d4:	bf14      	ite	ne
1a0050d6:	220a      	movne	r2, #10
1a0050d8:	2208      	moveq	r2, #8
1a0050da:	2100      	movs	r1, #0
1a0050dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a0050e0:	6865      	ldr	r5, [r4, #4]
1a0050e2:	60a5      	str	r5, [r4, #8]
1a0050e4:	2d00      	cmp	r5, #0
1a0050e6:	f2c0 8095 	blt.w	1a005214 <_printf_i+0x20c>
1a0050ea:	6821      	ldr	r1, [r4, #0]
1a0050ec:	f021 0104 	bic.w	r1, r1, #4
1a0050f0:	6021      	str	r1, [r4, #0]
1a0050f2:	2b00      	cmp	r3, #0
1a0050f4:	d13d      	bne.n	1a005172 <_printf_i+0x16a>
1a0050f6:	2d00      	cmp	r5, #0
1a0050f8:	f040 808e 	bne.w	1a005218 <_printf_i+0x210>
1a0050fc:	4665      	mov	r5, ip
1a0050fe:	2a08      	cmp	r2, #8
1a005100:	d10b      	bne.n	1a00511a <_printf_i+0x112>
1a005102:	6823      	ldr	r3, [r4, #0]
1a005104:	07db      	lsls	r3, r3, #31
1a005106:	d508      	bpl.n	1a00511a <_printf_i+0x112>
1a005108:	6923      	ldr	r3, [r4, #16]
1a00510a:	6862      	ldr	r2, [r4, #4]
1a00510c:	429a      	cmp	r2, r3
1a00510e:	bfde      	ittt	le
1a005110:	2330      	movle	r3, #48	; 0x30
1a005112:	f805 3c01 	strble.w	r3, [r5, #-1]
1a005116:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a00511a:	ebac 0305 	sub.w	r3, ip, r5
1a00511e:	6123      	str	r3, [r4, #16]
1a005120:	f8cd 8000 	str.w	r8, [sp]
1a005124:	463b      	mov	r3, r7
1a005126:	aa03      	add	r2, sp, #12
1a005128:	4621      	mov	r1, r4
1a00512a:	4630      	mov	r0, r6
1a00512c:	f7ff fef6 	bl	1a004f1c <_printf_common>
1a005130:	3001      	adds	r0, #1
1a005132:	d14d      	bne.n	1a0051d0 <_printf_i+0x1c8>
1a005134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005138:	b005      	add	sp, #20
1a00513a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00513e:	4839      	ldr	r0, [pc, #228]	; (1a005224 <_printf_i+0x21c>)
1a005140:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a005144:	6813      	ldr	r3, [r2, #0]
1a005146:	6821      	ldr	r1, [r4, #0]
1a005148:	1d1d      	adds	r5, r3, #4
1a00514a:	681b      	ldr	r3, [r3, #0]
1a00514c:	6015      	str	r5, [r2, #0]
1a00514e:	060a      	lsls	r2, r1, #24
1a005150:	d50b      	bpl.n	1a00516a <_printf_i+0x162>
1a005152:	07ca      	lsls	r2, r1, #31
1a005154:	bf44      	itt	mi
1a005156:	f041 0120 	orrmi.w	r1, r1, #32
1a00515a:	6021      	strmi	r1, [r4, #0]
1a00515c:	b91b      	cbnz	r3, 1a005166 <_printf_i+0x15e>
1a00515e:	6822      	ldr	r2, [r4, #0]
1a005160:	f022 0220 	bic.w	r2, r2, #32
1a005164:	6022      	str	r2, [r4, #0]
1a005166:	2210      	movs	r2, #16
1a005168:	e7b7      	b.n	1a0050da <_printf_i+0xd2>
1a00516a:	064d      	lsls	r5, r1, #25
1a00516c:	bf48      	it	mi
1a00516e:	b29b      	uxthmi	r3, r3
1a005170:	e7ef      	b.n	1a005152 <_printf_i+0x14a>
1a005172:	4665      	mov	r5, ip
1a005174:	fbb3 f1f2 	udiv	r1, r3, r2
1a005178:	fb02 3311 	mls	r3, r2, r1, r3
1a00517c:	5cc3      	ldrb	r3, [r0, r3]
1a00517e:	f805 3d01 	strb.w	r3, [r5, #-1]!
1a005182:	460b      	mov	r3, r1
1a005184:	2900      	cmp	r1, #0
1a005186:	d1f5      	bne.n	1a005174 <_printf_i+0x16c>
1a005188:	e7b9      	b.n	1a0050fe <_printf_i+0xf6>
1a00518a:	6813      	ldr	r3, [r2, #0]
1a00518c:	6825      	ldr	r5, [r4, #0]
1a00518e:	6961      	ldr	r1, [r4, #20]
1a005190:	1d18      	adds	r0, r3, #4
1a005192:	6010      	str	r0, [r2, #0]
1a005194:	0628      	lsls	r0, r5, #24
1a005196:	681b      	ldr	r3, [r3, #0]
1a005198:	d501      	bpl.n	1a00519e <_printf_i+0x196>
1a00519a:	6019      	str	r1, [r3, #0]
1a00519c:	e002      	b.n	1a0051a4 <_printf_i+0x19c>
1a00519e:	066a      	lsls	r2, r5, #25
1a0051a0:	d5fb      	bpl.n	1a00519a <_printf_i+0x192>
1a0051a2:	8019      	strh	r1, [r3, #0]
1a0051a4:	2300      	movs	r3, #0
1a0051a6:	6123      	str	r3, [r4, #16]
1a0051a8:	4665      	mov	r5, ip
1a0051aa:	e7b9      	b.n	1a005120 <_printf_i+0x118>
1a0051ac:	6813      	ldr	r3, [r2, #0]
1a0051ae:	1d19      	adds	r1, r3, #4
1a0051b0:	6011      	str	r1, [r2, #0]
1a0051b2:	681d      	ldr	r5, [r3, #0]
1a0051b4:	6862      	ldr	r2, [r4, #4]
1a0051b6:	2100      	movs	r1, #0
1a0051b8:	4628      	mov	r0, r5
1a0051ba:	f000 f839 	bl	1a005230 <memchr>
1a0051be:	b108      	cbz	r0, 1a0051c4 <_printf_i+0x1bc>
1a0051c0:	1b40      	subs	r0, r0, r5
1a0051c2:	6060      	str	r0, [r4, #4]
1a0051c4:	6863      	ldr	r3, [r4, #4]
1a0051c6:	6123      	str	r3, [r4, #16]
1a0051c8:	2300      	movs	r3, #0
1a0051ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a0051ce:	e7a7      	b.n	1a005120 <_printf_i+0x118>
1a0051d0:	6923      	ldr	r3, [r4, #16]
1a0051d2:	462a      	mov	r2, r5
1a0051d4:	4639      	mov	r1, r7
1a0051d6:	4630      	mov	r0, r6
1a0051d8:	47c0      	blx	r8
1a0051da:	3001      	adds	r0, #1
1a0051dc:	d0aa      	beq.n	1a005134 <_printf_i+0x12c>
1a0051de:	6823      	ldr	r3, [r4, #0]
1a0051e0:	079b      	lsls	r3, r3, #30
1a0051e2:	d413      	bmi.n	1a00520c <_printf_i+0x204>
1a0051e4:	68e0      	ldr	r0, [r4, #12]
1a0051e6:	9b03      	ldr	r3, [sp, #12]
1a0051e8:	4298      	cmp	r0, r3
1a0051ea:	bfb8      	it	lt
1a0051ec:	4618      	movlt	r0, r3
1a0051ee:	e7a3      	b.n	1a005138 <_printf_i+0x130>
1a0051f0:	2301      	movs	r3, #1
1a0051f2:	464a      	mov	r2, r9
1a0051f4:	4639      	mov	r1, r7
1a0051f6:	4630      	mov	r0, r6
1a0051f8:	47c0      	blx	r8
1a0051fa:	3001      	adds	r0, #1
1a0051fc:	d09a      	beq.n	1a005134 <_printf_i+0x12c>
1a0051fe:	3501      	adds	r5, #1
1a005200:	68e3      	ldr	r3, [r4, #12]
1a005202:	9a03      	ldr	r2, [sp, #12]
1a005204:	1a9b      	subs	r3, r3, r2
1a005206:	42ab      	cmp	r3, r5
1a005208:	dcf2      	bgt.n	1a0051f0 <_printf_i+0x1e8>
1a00520a:	e7eb      	b.n	1a0051e4 <_printf_i+0x1dc>
1a00520c:	2500      	movs	r5, #0
1a00520e:	f104 0919 	add.w	r9, r4, #25
1a005212:	e7f5      	b.n	1a005200 <_printf_i+0x1f8>
1a005214:	2b00      	cmp	r3, #0
1a005216:	d1ac      	bne.n	1a005172 <_printf_i+0x16a>
1a005218:	7803      	ldrb	r3, [r0, #0]
1a00521a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a00521e:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a005222:	e76c      	b.n	1a0050fe <_printf_i+0xf6>
1a005224:	1a005848 	.word	0x1a005848
1a005228:	1a005859 	.word	0x1a005859
1a00522c:	ffffffff 	.word	0xffffffff

1a005230 <memchr>:
1a005230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a005234:	2a10      	cmp	r2, #16
1a005236:	db2b      	blt.n	1a005290 <memchr+0x60>
1a005238:	f010 0f07 	tst.w	r0, #7
1a00523c:	d008      	beq.n	1a005250 <memchr+0x20>
1a00523e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a005242:	3a01      	subs	r2, #1
1a005244:	428b      	cmp	r3, r1
1a005246:	d02d      	beq.n	1a0052a4 <memchr+0x74>
1a005248:	f010 0f07 	tst.w	r0, #7
1a00524c:	b342      	cbz	r2, 1a0052a0 <memchr+0x70>
1a00524e:	d1f6      	bne.n	1a00523e <memchr+0xe>
1a005250:	b4f0      	push	{r4, r5, r6, r7}
1a005252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a005256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a00525a:	f022 0407 	bic.w	r4, r2, #7
1a00525e:	f07f 0700 	mvns.w	r7, #0
1a005262:	2300      	movs	r3, #0
1a005264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a005268:	3c08      	subs	r4, #8
1a00526a:	ea85 0501 	eor.w	r5, r5, r1
1a00526e:	ea86 0601 	eor.w	r6, r6, r1
1a005272:	fa85 f547 	uadd8	r5, r5, r7
1a005276:	faa3 f587 	sel	r5, r3, r7
1a00527a:	fa86 f647 	uadd8	r6, r6, r7
1a00527e:	faa5 f687 	sel	r6, r5, r7
1a005282:	b98e      	cbnz	r6, 1a0052a8 <memchr+0x78>
1a005284:	d1ee      	bne.n	1a005264 <memchr+0x34>
1a005286:	bcf0      	pop	{r4, r5, r6, r7}
1a005288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a00528c:	f002 0207 	and.w	r2, r2, #7
1a005290:	b132      	cbz	r2, 1a0052a0 <memchr+0x70>
1a005292:	f810 3b01 	ldrb.w	r3, [r0], #1
1a005296:	3a01      	subs	r2, #1
1a005298:	ea83 0301 	eor.w	r3, r3, r1
1a00529c:	b113      	cbz	r3, 1a0052a4 <memchr+0x74>
1a00529e:	d1f8      	bne.n	1a005292 <memchr+0x62>
1a0052a0:	2000      	movs	r0, #0
1a0052a2:	4770      	bx	lr
1a0052a4:	3801      	subs	r0, #1
1a0052a6:	4770      	bx	lr
1a0052a8:	2d00      	cmp	r5, #0
1a0052aa:	bf06      	itte	eq
1a0052ac:	4635      	moveq	r5, r6
1a0052ae:	3803      	subeq	r0, #3
1a0052b0:	3807      	subne	r0, #7
1a0052b2:	f015 0f01 	tst.w	r5, #1
1a0052b6:	d107      	bne.n	1a0052c8 <memchr+0x98>
1a0052b8:	3001      	adds	r0, #1
1a0052ba:	f415 7f80 	tst.w	r5, #256	; 0x100
1a0052be:	bf02      	ittt	eq
1a0052c0:	3001      	addeq	r0, #1
1a0052c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a0052c6:	3001      	addeq	r0, #1
1a0052c8:	bcf0      	pop	{r4, r5, r6, r7}
1a0052ca:	3801      	subs	r0, #1
1a0052cc:	4770      	bx	lr
1a0052ce:	bf00      	nop
1a0052d0:	63696e49 	.word	0x63696e49
1a0052d4:	646e6169 	.word	0x646e6169
1a0052d8:	2e2e2e6f 	.word	0x2e2e2e6f
1a0052dc:	ff000a0d 	.word	0xff000a0d
1a0052e0:	4d5f4f41 	.word	0x4d5f4f41
1a0052e4:	73757961 	.word	0x73757961
1a0052e8:	696c7563 	.word	0x696c7563
1a0052ec:	0072617a 	.word	0x0072617a

1a0052f0 <crc8_small_table>:
1a0052f0:	090e0700 15121b1c 31363f38 2d2a2324     ........8?61$#*-
1a005300:	656d6954 2074756f 00006e69 656d6954     Timeout in..Time
1a005310:	206f5420 74697845 00000000 656d6954      To Exit....Time
1a005320:	65482072 62747261 00746165 76697244     r Heartbeat.Driv
1a005330:	00007265 6f6d6544 006f696e 4f525245     er..Demonio.ERRO
1a005340:	ff002052 4f525245 494c2052 ff00204d     R ..ERROR LIM ..
1a005350:	6c707041 74616369 206e6f69 6c6c614d     Application Mall
1a005360:	4620636f 656c6961 6f482064 0d216b6f     oc Failed Hook!.
1a005370:	00000000 7362696c 6572662f 6f747265     ....libs/freerto
1a005380:	6f732f73 65637275 6f6f682f 632e736b     s/source/hooks.c
1a005390:	ffffff00 70410a0d 63696c70 6f697461     ......Applicatio
1a0053a0:	7453206e 206b6361 7265764f 776f6c66     n Stack Overflow
1a0053b0:	6f202121 6154206e 203a6b73 0a0d7325     !! on Task: %s..
1a0053c0:	ffffff00 41760a0d 72657373 6c614374     ......vAssertCal
1a0053d0:	2864656c 200a0d29 4c4c2020 20656e69     led()..   LLine 
1a0053e0:	626d754e 3d207265 0d642520 2020200a     Number = %d..   
1a0053f0:	656c6946 6d614e20 203d2065 0a0d7325     File Name = %s..
1a005400:	ff000a0d 454c4449 ffffff00 51726d54     ....IDLE....TmrQ
1a005410:	ffffff00 20726d54 00637653              ....Tmr Svc.

1a00541c <ExtRateIn>:
1a00541c:	00000000                                ....

1a005420 <GpioButtons>:
1a005420:	08000400 09010900                       ........

1a005428 <GpioLeds>:
1a005428:	01050005 0e000205 0c010b01              ............

1a005434 <GpioPorts>:
1a005434:	03030003 0f050403 05031005 07030603     ................
1a005444:	ffff0802                                ....

1a005448 <OscRateIn>:
1a005448:	00b71b00                                ....

1a00544c <InitClkStates>:
1a00544c:	01010f01                                ....

1a005450 <pinmuxing>:
1a005450:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a005460:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a005470:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a005480:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a005490:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a0054a0:	00d50301 00d50401 00160107 00560207     ..............V.
1a0054b0:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a0054c0:	00570206                                ..W.

1a0054c4 <UART_BClock>:
1a0054c4:	01a201c2 01620182                       ......b.

1a0054cc <UART_PClock>:
1a0054cc:	00820081 00a200a1 08040201 0f0f0f03     ................
1a0054dc:	000000ff                                ....

1a0054e0 <periph_to_base>:
1a0054e0:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0054f0:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a005500:	000100e0 01000100 01200003 00060120     .......... . ...
1a005510:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a005520:	01820013 00120182 01a201a2 01c20011     ................
1a005530:	001001c2 01e201e2 0202000f 000e0202     ................
1a005540:	02220222 0223000d 001c0223              "."...#.#...

1a00554c <InitClkStates>:
1a00554c:	00010100 00010909 0001090a 01010701     ................
1a00555c:	00010902 00010906 0101090c 0001090d     ................
1a00556c:	0001090e 0001090f 00010910 00010911     ................
1a00557c:	00010912 00010913 00011114 00011119     ................
1a00558c:	0001111a 0001111b                       ........

1a005594 <lpcUarts>:
1a005594:	40081000 06020406 00180205 40081000     ...@...........@
1a0055a4:	09070509 00180706 40082000 00000000     ......... .@....
1a0055b4:	00190000 400c1000 07060107 001a0602     .......@........
1a0055c4:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a0055d4:	02020302 001b0204                       ........

1a0055dc <gpioPinsInit>:
1a0055dc:	02000104 00050701 05010d03 04080100     ................
1a0055ec:	02020002 02000304 00000403 04070002     ................
1a0055fc:	030c0300 09050402 05040103 04030208     ................
1a00560c:	04020305 06040504 0802000c 03000b06     ................
1a00561c:	00090607 07060503 060f0504 03030004     ................
1a00562c:	02000404 00050404 06040502 04060200     ................
1a00563c:	0c050408 05040a04 0003010e 14010a00     ................
1a00564c:	010f0000 0d000012 00001101 0010010c     ................
1a00565c:	07070300 000f0300 01000001 00000000     ................
1a00566c:	000a0600 08060603 06100504 04030005     ................
1a00567c:	03000106 04090400 04010d05 010b0000     ................
1a00568c:	0200000f 00000001 00010104 02010800     ................
1a00569c:	01090000 09010006 05040002 04010200     ................
1a0056ac:	02020105 02020504 0e00000a 01000b02     ................
1a0056bc:	000c020b ffff0c01                       ........

1a0056c4 <ultrasonicSensorsIrqMap>:
1a0056c4:	ff020100                                ....

1a0056c8 <__sf_fake_stderr>:
	...

1a0056e8 <__sf_fake_stdin>:
	...

1a005708 <__sf_fake_stdout>:
	...

1a005728 <_global_impure_ptr>:
1a005728:	100000cc 4f500043 00584953               ....C.POSIX...

1a005736 <_ctype_>:
1a005736:	20202000 20202020 28282020 20282828     .         ((((( 
1a005746:	20202020 20202020 20202020 20202020                     
1a005756:	10108820 10101010 10101010 10101010      ...............
1a005766:	04040410 04040404 10040404 10101010     ................
1a005776:	41411010 41414141 01010101 01010101     ..AAAAAA........
1a005786:	01010101 01010101 01010101 10101010     ................
1a005796:	42421010 42424242 02020202 02020202     ..BBBBBB........
1a0057a6:	02020202 02020202 02020202 10101010     ................
1a0057b6:	00000020 00000000 00000000 00000000      ...............
	...
1a005836:	302d2300 6800202b 65004c6c 46456766     .#-0+ .hlL.efgEF
1a005846:	31300047 35343332 39383736 44434241     G.0123456789ABCD
1a005856:	30004645 34333231 38373635 63626139     EF.0123456789abc
1a005866:	00666564                                 def...
